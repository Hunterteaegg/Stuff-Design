
Scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002888  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c8  080029c8  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080029c8  080029c8  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c8  080029c8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c8  080029c8  000129c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080029d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000028  080029f8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080029f8  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece0  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f03  00000000  00000000  0002ed31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  00030c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad0  00000000  00000000  00031800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017eed  00000000  00000000  000322d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a632  00000000  00000000  0004a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088f39  00000000  00000000  000547ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dd728  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000301c  00000000  00000000  000dd7a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	0800297c 	.word	0x0800297c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	0800297c 	.word	0x0800297c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <bluetooth_transmit_weight>:
#include "bluetooth.h"

extern UART_HandleTypeDef huart1;

void bluetooth_transmit_weight(uint32_t weight)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint8_t display[8]={
 8000164:	4a25      	ldr	r2, [pc, #148]	; (80001fc <bluetooth_transmit_weight+0xa0>)
 8000166:	f107 0308 	add.w	r3, r7, #8
 800016a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800016e:	e883 0003 	stmia.w	r3, {r0, r1}
			0,'.',0,0,0,'K','G',0x0A,
	};

	display[0]=(weight / 1000)+48;
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	4a22      	ldr	r2, [pc, #136]	; (8000200 <bluetooth_transmit_weight+0xa4>)
 8000176:	fba2 2303 	umull	r2, r3, r2, r3
 800017a:	099b      	lsrs	r3, r3, #6
 800017c:	b2db      	uxtb	r3, r3
 800017e:	3330      	adds	r3, #48	; 0x30
 8000180:	b2db      	uxtb	r3, r3
 8000182:	723b      	strb	r3, [r7, #8]
	display[2]=(weight % 1000 / 100)+48;
 8000184:	687a      	ldr	r2, [r7, #4]
 8000186:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <bluetooth_transmit_weight+0xa4>)
 8000188:	fba3 1302 	umull	r1, r3, r3, r2
 800018c:	099b      	lsrs	r3, r3, #6
 800018e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000192:	fb01 f303 	mul.w	r3, r1, r3
 8000196:	1ad3      	subs	r3, r2, r3
 8000198:	4a1a      	ldr	r2, [pc, #104]	; (8000204 <bluetooth_transmit_weight+0xa8>)
 800019a:	fba2 2303 	umull	r2, r3, r2, r3
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	3330      	adds	r3, #48	; 0x30
 80001a4:	b2db      	uxtb	r3, r3
 80001a6:	72bb      	strb	r3, [r7, #10]
	display[3]=(weight % 100 / 10)+48;
 80001a8:	687a      	ldr	r2, [r7, #4]
 80001aa:	4b16      	ldr	r3, [pc, #88]	; (8000204 <bluetooth_transmit_weight+0xa8>)
 80001ac:	fba3 1302 	umull	r1, r3, r3, r2
 80001b0:	095b      	lsrs	r3, r3, #5
 80001b2:	2164      	movs	r1, #100	; 0x64
 80001b4:	fb01 f303 	mul.w	r3, r1, r3
 80001b8:	1ad3      	subs	r3, r2, r3
 80001ba:	4a13      	ldr	r2, [pc, #76]	; (8000208 <bluetooth_transmit_weight+0xac>)
 80001bc:	fba2 2303 	umull	r2, r3, r2, r3
 80001c0:	08db      	lsrs	r3, r3, #3
 80001c2:	b2db      	uxtb	r3, r3
 80001c4:	3330      	adds	r3, #48	; 0x30
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	72fb      	strb	r3, [r7, #11]
	display[4]=(weight % 10)+48;
 80001ca:	6879      	ldr	r1, [r7, #4]
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <bluetooth_transmit_weight+0xac>)
 80001ce:	fba3 2301 	umull	r2, r3, r3, r1
 80001d2:	08da      	lsrs	r2, r3, #3
 80001d4:	4613      	mov	r3, r2
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	4413      	add	r3, r2
 80001da:	005b      	lsls	r3, r3, #1
 80001dc:	1aca      	subs	r2, r1, r3
 80001de:	b2d3      	uxtb	r3, r2
 80001e0:	3330      	adds	r3, #48	; 0x30
 80001e2:	b2db      	uxtb	r3, r3
 80001e4:	733b      	strb	r3, [r7, #12]


	HAL_UART_Transmit(&huart1, display, sizeof(display), 0xFF);
 80001e6:	f107 0108 	add.w	r1, r7, #8
 80001ea:	23ff      	movs	r3, #255	; 0xff
 80001ec:	2208      	movs	r2, #8
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <bluetooth_transmit_weight+0xb0>)
 80001f0:	f002 fa2d 	bl	800264e <HAL_UART_Transmit>
}
 80001f4:	bf00      	nop
 80001f6:	3710      	adds	r7, #16
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	08002994 	.word	0x08002994
 8000200:	10624dd3 	.word	0x10624dd3
 8000204:	51eb851f 	.word	0x51eb851f
 8000208:	cccccccd 	.word	0xcccccccd
 800020c:	20000044 	.word	0x20000044

08000210 <HAL_GPIO_EXTI_Callback>:
 */

#include "calibration.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800021a:	88fb      	ldrh	r3, [r7, #6]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d000      	beq.n	8000222 <HAL_GPIO_EXTI_Callback+0x12>
		}
		break;
	default:
		;
	}
}
 8000220:	e00f      	b.n	8000242 <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(calibration_GPIO_Port, calibration_Pin)==GPIO_PIN_RESET)
 8000222:	2102      	movs	r1, #2
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <HAL_GPIO_EXTI_Callback+0x3c>)
 8000226:	f000 ff9f 	bl	8001168 <HAL_GPIO_ReadPin>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d107      	bne.n	8000240 <HAL_GPIO_EXTI_Callback+0x30>
			offset+=convert();
 8000230:	f000 f876 	bl	8000320 <convert>
 8000234:	4602      	mov	r2, r0
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <HAL_GPIO_EXTI_Callback+0x40>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4413      	add	r3, r2
 800023c:	4a04      	ldr	r2, [pc, #16]	; (8000250 <HAL_GPIO_EXTI_Callback+0x40>)
 800023e:	6013      	str	r3, [r2, #0]
		break;
 8000240:	bf00      	nop
}
 8000242:	bf00      	nop
 8000244:	3708      	adds	r7, #8
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010800 	.word	0x40010800
 8000250:	20000000 	.word	0x20000000

08000254 <delay>:


#include "hx711.h"

void delay(uint8_t i)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]
	while(i--);
 800025e:	bf00      	nop
 8000260:	79fb      	ldrb	r3, [r7, #7]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	71fa      	strb	r2, [r7, #7]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1fa      	bne.n	8000260 <delay+0xc>
}
 800026a:	bf00      	nop
 800026c:	370c      	adds	r7, #12
 800026e:	46bd      	mov	sp, r7
 8000270:	bc80      	pop	{r7}
 8000272:	4770      	bx	lr

08000274 <readData>:

uint32_t offset  = 21711;

uint32_t readData()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	uint32_t count=0;
 800027a:	2300      	movs	r3, #0
 800027c:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin, GPIO_PIN_SET);
 800027e:	2201      	movs	r2, #1
 8000280:	2108      	movs	r1, #8
 8000282:	4826      	ldr	r0, [pc, #152]	; (800031c <readData+0xa8>)
 8000284:	f000 ff87 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 8000288:	2200      	movs	r2, #0
 800028a:	2110      	movs	r1, #16
 800028c:	4823      	ldr	r0, [pc, #140]	; (800031c <readData+0xa8>)
 800028e:	f000 ff82 	bl	8001196 <HAL_GPIO_WritePin>
	delay(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f7ff ffde 	bl	8000254 <delay>
	while(HAL_GPIO_ReadPin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin));
 8000298:	bf00      	nop
 800029a:	2108      	movs	r1, #8
 800029c:	481f      	ldr	r0, [pc, #124]	; (800031c <readData+0xa8>)
 800029e:	f000 ff63 	bl	8001168 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d1f8      	bne.n	800029a <readData+0x26>

	for(uint8_t i=0;i<24;i++)
 80002a8:	2300      	movs	r3, #0
 80002aa:	70fb      	strb	r3, [r7, #3]
 80002ac:	e01c      	b.n	80002e8 <readData+0x74>
	{
		HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	2110      	movs	r1, #16
 80002b2:	481a      	ldr	r0, [pc, #104]	; (800031c <readData+0xa8>)
 80002b4:	f000 ff6f 	bl	8001196 <HAL_GPIO_WritePin>
		delay(1);
 80002b8:	2001      	movs	r0, #1
 80002ba:	f7ff ffcb 	bl	8000254 <delay>
		count<<=1;
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	2110      	movs	r1, #16
 80002c8:	4814      	ldr	r0, [pc, #80]	; (800031c <readData+0xa8>)
 80002ca:	f000 ff64 	bl	8001196 <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin))
 80002ce:	2108      	movs	r1, #8
 80002d0:	4812      	ldr	r0, [pc, #72]	; (800031c <readData+0xa8>)
 80002d2:	f000 ff49 	bl	8001168 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d002      	beq.n	80002e2 <readData+0x6e>
		{
			count++;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	3301      	adds	r3, #1
 80002e0:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<24;i++)
 80002e2:	78fb      	ldrb	r3, [r7, #3]
 80002e4:	3301      	adds	r3, #1
 80002e6:	70fb      	strb	r3, [r7, #3]
 80002e8:	78fb      	ldrb	r3, [r7, #3]
 80002ea:	2b17      	cmp	r3, #23
 80002ec:	d9df      	bls.n	80002ae <readData+0x3a>
		}
	}

	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_SET);
 80002ee:	2201      	movs	r2, #1
 80002f0:	2110      	movs	r1, #16
 80002f2:	480a      	ldr	r0, [pc, #40]	; (800031c <readData+0xa8>)
 80002f4:	f000 ff4f 	bl	8001196 <HAL_GPIO_WritePin>
	delay(2);
 80002f8:	2002      	movs	r0, #2
 80002fa:	f7ff ffab 	bl	8000254 <delay>
	count^=0x800000;
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000304:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	2110      	movs	r1, #16
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <readData+0xa8>)
 800030c:	f000 ff43 	bl	8001196 <HAL_GPIO_WritePin>

	return count;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40010800 	.word	0x40010800

08000320 <convert>:

uint32_t convert()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	return ((readData()/GapVal)-offset);
 8000324:	f7ff ffa6 	bl	8000274 <readData>
 8000328:	4602      	mov	r2, r0
 800032a:	4b04      	ldr	r3, [pc, #16]	; (800033c <convert+0x1c>)
 800032c:	fba3 2302 	umull	r2, r3, r3, r2
 8000330:	09da      	lsrs	r2, r3, #7
 8000332:	4b03      	ldr	r3, [pc, #12]	; (8000340 <convert+0x20>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	1ad3      	subs	r3, r2, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	bd80      	pop	{r7, pc}
 800033c:	551c979b 	.word	0x551c979b
 8000340:	20000000 	.word	0x20000000

08000344 <lcd_write>:

char string_overScale[]="FATAL ERROR!";
bool overScale=false;

void lcd_write(uint8_t dat)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0301 	and.w	r3, r3, #1
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800035c:	4829      	ldr	r0, [pc, #164]	; (8000404 <lcd_write+0xc0>)
 800035e:	f000 ff1a 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	085b      	lsrs	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	f003 0301 	and.w	r3, r3, #1
 800036c:	b2db      	uxtb	r3, r3
 800036e:	461a      	mov	r2, r3
 8000370:	2108      	movs	r1, #8
 8000372:	4825      	ldr	r0, [pc, #148]	; (8000408 <lcd_write+0xc4>)
 8000374:	f000 ff0f 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	089b      	lsrs	r3, r3, #2
 800037c:	b2db      	uxtb	r3, r3
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	b2db      	uxtb	r3, r3
 8000384:	461a      	mov	r2, r3
 8000386:	2110      	movs	r1, #16
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <lcd_write+0xc4>)
 800038a:	f000 ff04 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	08db      	lsrs	r3, r3, #3
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f003 0301 	and.w	r3, r3, #1
 8000398:	b2db      	uxtb	r3, r3
 800039a:	461a      	mov	r2, r3
 800039c:	2120      	movs	r1, #32
 800039e:	481a      	ldr	r0, [pc, #104]	; (8000408 <lcd_write+0xc4>)
 80003a0:	f000 fef9 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003a4:	79fb      	ldrb	r3, [r7, #7]
 80003a6:	091b      	lsrs	r3, r3, #4
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	f003 0301 	and.w	r3, r3, #1
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	461a      	mov	r2, r3
 80003b2:	2140      	movs	r1, #64	; 0x40
 80003b4:	4814      	ldr	r0, [pc, #80]	; (8000408 <lcd_write+0xc4>)
 80003b6:	f000 feee 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	095b      	lsrs	r3, r3, #5
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	f003 0301 	and.w	r3, r3, #1
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	2180      	movs	r1, #128	; 0x80
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <lcd_write+0xc4>)
 80003cc:	f000 fee3 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	099b      	lsrs	r3, r3, #6
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	461a      	mov	r2, r3
 80003de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e2:	4809      	ldr	r0, [pc, #36]	; (8000408 <lcd_write+0xc4>)
 80003e4:	f000 fed7 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	09db      	lsrs	r3, r3, #7
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f4:	4804      	ldr	r0, [pc, #16]	; (8000408 <lcd_write+0xc4>)
 80003f6:	f000 fece 	bl	8001196 <HAL_GPIO_WritePin>
}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40010800 	.word	0x40010800
 8000408:	40010c00 	.word	0x40010c00

0800040c <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2180      	movs	r1, #128	; 0x80
 800041a:	4812      	ldr	r0, [pc, #72]	; (8000464 <lcd_writeCom+0x58>)
 800041c:	f000 febb 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8000420:	2200      	movs	r2, #0
 8000422:	2140      	movs	r1, #64	; 0x40
 8000424:	480f      	ldr	r0, [pc, #60]	; (8000464 <lcd_writeCom+0x58>)
 8000426:	f000 feb6 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	2120      	movs	r1, #32
 800042e:	480d      	ldr	r0, [pc, #52]	; (8000464 <lcd_writeCom+0x58>)
 8000430:	f000 feb1 	bl	8001196 <HAL_GPIO_WritePin>

	lcd_write(com);
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff84 	bl	8000344 <lcd_write>
	HAL_Delay(1);
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fc09 	bl	8000c54 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2180      	movs	r1, #128	; 0x80
 8000446:	4807      	ldr	r0, [pc, #28]	; (8000464 <lcd_writeCom+0x58>)
 8000448:	f000 fea5 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800044c:	2001      	movs	r0, #1
 800044e:	f000 fc01 	bl	8000c54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000452:	2200      	movs	r2, #0
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	4803      	ldr	r0, [pc, #12]	; (8000464 <lcd_writeCom+0x58>)
 8000458:	f000 fe9d 	bl	8001196 <HAL_GPIO_WritePin>
}
 800045c:	bf00      	nop
 800045e:	3708      	adds	r7, #8
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40010800 	.word	0x40010800

08000468 <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2180      	movs	r1, #128	; 0x80
 8000476:	4812      	ldr	r0, [pc, #72]	; (80004c0 <lcd_writeData+0x58>)
 8000478:	f000 fe8d 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	2140      	movs	r1, #64	; 0x40
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <lcd_writeData+0x58>)
 8000482:	f000 fe88 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2120      	movs	r1, #32
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <lcd_writeData+0x58>)
 800048c:	f000 fe83 	bl	8001196 <HAL_GPIO_WritePin>

	lcd_write(data);
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff56 	bl	8000344 <lcd_write>
	HAL_Delay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f000 fbdb 	bl	8000c54 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	4807      	ldr	r0, [pc, #28]	; (80004c0 <lcd_writeData+0x58>)
 80004a4:	f000 fe77 	bl	8001196 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004a8:	2001      	movs	r0, #1
 80004aa:	f000 fbd3 	bl	8000c54 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	4803      	ldr	r0, [pc, #12]	; (80004c0 <lcd_writeData+0x58>)
 80004b4:	f000 fe6f 	bl	8001196 <HAL_GPIO_WritePin>
}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010800 	.word	0x40010800

080004c4 <lcd_init>:

void lcd_init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 80004c8:	2038      	movs	r0, #56	; 0x38
 80004ca:	f7ff ff9f 	bl	800040c <lcd_writeCom>
	lcd_writeCom(0x0c);
 80004ce:	200c      	movs	r0, #12
 80004d0:	f7ff ff9c 	bl	800040c <lcd_writeCom>
	lcd_writeCom(0x06);
 80004d4:	2006      	movs	r0, #6
 80004d6:	f7ff ff99 	bl	800040c <lcd_writeCom>
	lcd_writeCom(0x01);
 80004da:	2001      	movs	r0, #1
 80004dc:	f7ff ff96 	bl	800040c <lcd_writeCom>
	lcd_writeCom(0X80);
 80004e0:	2080      	movs	r0, #128	; 0x80
 80004e2:	f7ff ff93 	bl	800040c <lcd_writeCom>
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <lcd_show>:

void lcd_show(uint32_t result)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	lcd_writeData((result / 1000)+48);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4a39      	ldr	r2, [pc, #228]	; (80005dc <lcd_show+0xf0>)
 80004f8:	fba2 2303 	umull	r2, r3, r2, r3
 80004fc:	099b      	lsrs	r3, r3, #6
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	3330      	adds	r3, #48	; 0x30
 8000502:	b2db      	uxtb	r3, r3
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ffaf 	bl	8000468 <lcd_writeData>
	lcd_writeData('.');
 800050a:	202e      	movs	r0, #46	; 0x2e
 800050c:	f7ff ffac 	bl	8000468 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <lcd_show+0xf0>)
 8000514:	fba3 1302 	umull	r1, r3, r3, r2
 8000518:	099b      	lsrs	r3, r3, #6
 800051a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800051e:	fb01 f303 	mul.w	r3, r1, r3
 8000522:	1ad3      	subs	r3, r2, r3
 8000524:	4a2e      	ldr	r2, [pc, #184]	; (80005e0 <lcd_show+0xf4>)
 8000526:	fba2 2303 	umull	r2, r3, r2, r3
 800052a:	095b      	lsrs	r3, r3, #5
 800052c:	b2db      	uxtb	r3, r3
 800052e:	3330      	adds	r3, #48	; 0x30
 8000530:	b2db      	uxtb	r3, r3
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff98 	bl	8000468 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	4b29      	ldr	r3, [pc, #164]	; (80005e0 <lcd_show+0xf4>)
 800053c:	fba3 1302 	umull	r1, r3, r3, r2
 8000540:	095b      	lsrs	r3, r3, #5
 8000542:	2164      	movs	r1, #100	; 0x64
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <lcd_show+0xf8>)
 800054c:	fba2 2303 	umull	r2, r3, r2, r3
 8000550:	08db      	lsrs	r3, r3, #3
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3330      	adds	r3, #48	; 0x30
 8000556:	b2db      	uxtb	r3, r3
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff85 	bl	8000468 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 800055e:	6879      	ldr	r1, [r7, #4]
 8000560:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <lcd_show+0xf8>)
 8000562:	fba3 2301 	umull	r2, r3, r3, r1
 8000566:	08da      	lsrs	r2, r3, #3
 8000568:	4613      	mov	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	4413      	add	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	1aca      	subs	r2, r1, r3
 8000572:	b2d3      	uxtb	r3, r2
 8000574:	3330      	adds	r3, #48	; 0x30
 8000576:	b2db      	uxtb	r3, r3
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff ff75 	bl	8000468 <lcd_writeData>
	lcd_writeData('K');
 800057e:	204b      	movs	r0, #75	; 0x4b
 8000580:	f7ff ff72 	bl	8000468 <lcd_writeData>
	lcd_writeData('G');
 8000584:	2047      	movs	r0, #71	; 0x47
 8000586:	f7ff ff6f 	bl	8000468 <lcd_writeData>

	if((result>1800) && (result<10000))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000590:	d920      	bls.n	80005d4 <lcd_show+0xe8>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f242 720f 	movw	r2, #9999	; 0x270f
 8000598:	4293      	cmp	r3, r2
 800059a:	d81b      	bhi.n	80005d4 <lcd_show+0xe8>
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4812      	ldr	r0, [pc, #72]	; (80005e8 <lcd_show+0xfc>)
 80005a0:	f001 faee 	bl	8001b80 <HAL_TIM_PWM_Start>

		lcd_writeCom(0x80|0x40);
 80005a4:	20c0      	movs	r0, #192	; 0xc0
 80005a6:	f7ff ff31 	bl	800040c <lcd_writeCom>

		for(int i=0;i<strlen(string_overScale);i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	e009      	b.n	80005c4 <lcd_show+0xd8>
		{
			lcd_writeData(string_overScale[i]);
 80005b0:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <lcd_show+0x100>)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	4413      	add	r3, r2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff55 	bl	8000468 <lcd_writeData>
		for(int i=0;i<strlen(string_overScale);i++)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	4809      	ldr	r0, [pc, #36]	; (80005ec <lcd_show+0x100>)
 80005c6:	f7ff fdc1 	bl	800014c <strlen>
 80005ca:	4602      	mov	r2, r0
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	429a      	cmp	r2, r3
 80005d0:	d8ee      	bhi.n	80005b0 <lcd_show+0xc4>
		}
		while(1);
 80005d2:	e7fe      	b.n	80005d2 <lcd_show+0xe6>
	}
}
 80005d4:	bf00      	nop
 80005d6:	3710      	adds	r7, #16
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	10624dd3 	.word	0x10624dd3
 80005e0:	51eb851f 	.word	0x51eb851f
 80005e4:	cccccccd 	.word	0xcccccccd
 80005e8:	20000084 	.word	0x20000084
 80005ec:	20000004 	.word	0x20000004

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 facb 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f82d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f913 	bl	8000828 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000602:	f000 f86f 	bl	80006e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000606:	f000 f8e5 	bl	80007d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800060a:	f7ff ff5b 	bl	80004c4 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_writeCom(0x80|0x00);
 800060e:	2080      	movs	r0, #128	; 0x80
 8000610:	f7ff fefc 	bl	800040c <lcd_writeCom>

	  for(uint8_t i=0;i<strlen(string_WEIGHT);i++)
 8000614:	2300      	movs	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	e008      	b.n	800062c <main+0x3c>
	  {
		  lcd_writeData(string_WEIGHT[i]);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <main+0x64>)
 800061e:	5cd3      	ldrb	r3, [r2, r3]
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff ff21 	bl	8000468 <lcd_writeData>
	  for(uint8_t i=0;i<strlen(string_WEIGHT);i++)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	3301      	adds	r3, #1
 800062a:	71fb      	strb	r3, [r7, #7]
 800062c:	79fc      	ldrb	r4, [r7, #7]
 800062e:	4809      	ldr	r0, [pc, #36]	; (8000654 <main+0x64>)
 8000630:	f7ff fd8c 	bl	800014c <strlen>
 8000634:	4603      	mov	r3, r0
 8000636:	429c      	cmp	r4, r3
 8000638:	d3ef      	bcc.n	800061a <main+0x2a>
	  }

	  lcd_show(convert());
 800063a:	f7ff fe71 	bl	8000320 <convert>
 800063e:	4603      	mov	r3, r0
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff ff53 	bl	80004ec <lcd_show>
	  bluetooth_transmit_weight(convert());
 8000646:	f7ff fe6b 	bl	8000320 <convert>
 800064a:	4603      	mov	r3, r0
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff fd85 	bl	800015c <bluetooth_transmit_weight>
	  lcd_writeCom(0x80|0x00);
 8000652:	e7dc      	b.n	800060e <main+0x1e>
 8000654:	20000014 	.word	0x20000014

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0318 	add.w	r3, r7, #24
 8000662:	2228      	movs	r2, #40	; 0x28
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f002 f980 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000682:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000690:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000696:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fda9 	bl	80011f8 <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006ac:	f000 f942 	bl	8000934 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	2302      	movs	r3, #2
 80006b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 f814 	bl	80016f8 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006d6:	f000 f92d 	bl	8000934 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3740      	adds	r7, #64	; 0x40
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]
 8000712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <MX_TIM2_Init+0xec>)
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 800071c:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_TIM2_Init+0xec>)
 800071e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000722:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_TIM2_Init+0xec>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <MX_TIM2_Init+0xec>)
 800072c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000730:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_TIM2_Init+0xec>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <MX_TIM2_Init+0xec>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <MX_TIM2_Init+0xec>)
 8000740:	f001 f976 	bl	8001a30 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800074a:	f000 f8f3 	bl	8000934 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000758:	4619      	mov	r1, r3
 800075a:	481d      	ldr	r0, [pc, #116]	; (80007d0 <MX_TIM2_Init+0xec>)
 800075c:	f001 fb70 	bl	8001e40 <HAL_TIM_ConfigClockSource>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000766:	f000 f8e5 	bl	8000934 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800076a:	4819      	ldr	r0, [pc, #100]	; (80007d0 <MX_TIM2_Init+0xec>)
 800076c:	f001 f9af 	bl	8001ace <HAL_TIM_PWM_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000776:	f000 f8dd 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	4619      	mov	r1, r3
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <MX_TIM2_Init+0xec>)
 800078a:	f001 feb5 	bl	80024f8 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000794:	f000 f8ce 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 800079c:	f241 3388 	movw	r3, #5000	; 0x1388
 80007a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2200      	movs	r2, #0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4807      	ldr	r0, [pc, #28]	; (80007d0 <MX_TIM2_Init+0xec>)
 80007b2:	f001 fa87 	bl	8001cc4 <HAL_TIM_PWM_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80007bc:	f000 f8ba 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007c0:	4803      	ldr	r0, [pc, #12]	; (80007d0 <MX_TIM2_Init+0xec>)
 80007c2:	f000 f90b 	bl	80009dc <HAL_TIM_MspPostInit>

}
 80007c6:	bf00      	nop
 80007c8:	3738      	adds	r7, #56	; 0x38
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000084 	.word	0x20000084

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <MX_USART1_UART_Init+0x50>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART1_UART_Init+0x4c>)
 800080c:	f001 fed2 	bl	80025b4 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000816:	f000 f88d 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000044 	.word	0x20000044
 8000824:	40013800 	.word	0x40013800

08000828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083c:	4b39      	ldr	r3, [pc, #228]	; (8000924 <MX_GPIO_Init+0xfc>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a38      	ldr	r2, [pc, #224]	; (8000924 <MX_GPIO_Init+0xfc>)
 8000842:	f043 0320 	orr.w	r3, r3, #32
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <MX_GPIO_Init+0xfc>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <MX_GPIO_Init+0xfc>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a32      	ldr	r2, [pc, #200]	; (8000924 <MX_GPIO_Init+0xfc>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_GPIO_Init+0xfc>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	60bb      	str	r3, [r7, #8]
 800086a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086c:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_GPIO_Init+0xfc>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a2c      	ldr	r2, [pc, #176]	; (8000924 <MX_GPIO_Init+0xfc>)
 8000872:	f043 0308 	orr.w	r3, r3, #8
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <MX_GPIO_Init+0xfc>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0308 	and.w	r3, r3, #8
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HX711_ADDO_Pin|HX711_ADSK_Pin|LCD_WR_Pin|LCD_RD_Pin
 8000884:	2200      	movs	r2, #0
 8000886:	f248 01f8 	movw	r1, #33016	; 0x80f8
 800088a:	4827      	ldr	r0, [pc, #156]	; (8000928 <MX_GPIO_Init+0x100>)
 800088c:	f000 fc83 	bl	8001196 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <MX_GPIO_Init+0x104>)
 8000898:	f000 fc7d 	bl	8001196 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : calibration_Pin */
  GPIO_InitStruct.Pin = calibration_Pin;
 800089c:	2302      	movs	r3, #2
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a0:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_GPIO_Init+0x108>)
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(calibration_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	4619      	mov	r1, r3
 80008ae:	481e      	ldr	r0, [pc, #120]	; (8000928 <MX_GPIO_Init+0x100>)
 80008b0:	f000 fb00 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_ADDO_Pin */
  GPIO_InitStruct.Pin = HX711_ADDO_Pin;
 80008b4:	2308      	movs	r3, #8
 80008b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80008b8:	2311      	movs	r3, #17
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_ADDO_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4817      	ldr	r0, [pc, #92]	; (8000928 <MX_GPIO_Init+0x100>)
 80008cc:	f000 faf2 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HX711_ADSK_Pin LCD_WR_Pin LCD_RD_Pin LCD_E_Pin
                           LCD_D0_Pin */
  GPIO_InitStruct.Pin = HX711_ADSK_Pin|LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin
 80008d0:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80008d4:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2302      	movs	r3, #2
 80008e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	f107 0310 	add.w	r3, r7, #16
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	; (8000928 <MX_GPIO_Init+0x100>)
 80008ea:	f000 fae3 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 80008ee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80008f2:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <MX_GPIO_Init+0x104>)
 8000908:	f000 fad4 	bl	8000eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2007      	movs	r0, #7
 8000912:	f000 fa98 	bl	8000e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000916:	2007      	movs	r0, #7
 8000918:	f000 fab1 	bl	8000e7e <HAL_NVIC_EnableIRQ>

}
 800091c:	bf00      	nop
 800091e:	3720      	adds	r7, #32
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800
 800092c:	40010c00 	.word	0x40010c00
 8000930:	10210000 	.word	0x10210000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_MspInit+0x5c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_MspInit+0x5c>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b0f      	ldr	r3, [pc, #60]	; (800099c <HAL_MspInit+0x5c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a0e      	ldr	r2, [pc, #56]	; (800099c <HAL_MspInit+0x5c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_MspInit+0x60>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <HAL_MspInit+0x60>)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010000 	.word	0x40010000

080009a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009b4:	d10b      	bne.n	80009ce <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_TIM_Base_MspInit+0x34>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_TIM_Base_MspInit+0x34>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	61d3      	str	r3, [r2, #28]
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_TIM_Base_MspInit+0x34>)
 80009c4:	69db      	ldr	r3, [r3, #28]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr
 80009d8:	40021000 	.word	0x40021000

080009dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009fa:	d117      	bne.n	8000a2c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fc:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <HAL_TIM_MspPostInit+0x58>)
 80009fe:	699b      	ldr	r3, [r3, #24]
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <HAL_TIM_MspPostInit+0x58>)
 8000a02:	f043 0304 	orr.w	r3, r3, #4
 8000a06:	6193      	str	r3, [r2, #24]
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_TIM_MspPostInit+0x58>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	f003 0304 	and.w	r3, r3, #4
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ALERM_LIGHT_Pin;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERM_LIGHT_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <HAL_TIM_MspPostInit+0x5c>)
 8000a28:	f000 fa44 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800

08000a3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0310 	add.w	r3, r7, #16
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <HAL_UART_MspInit+0x8c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d131      	bne.n	8000ac0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a1a      	ldr	r2, [pc, #104]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b15      	ldr	r3, [pc, #84]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a14      	ldr	r2, [pc, #80]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b12      	ldr	r3, [pc, #72]	; (8000acc <HAL_UART_MspInit+0x90>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480b      	ldr	r0, [pc, #44]	; (8000ad0 <HAL_UART_MspInit+0x94>)
 8000aa2:	f000 fa07 	bl	8000eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aaa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0310 	add.w	r3, r7, #16
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <HAL_UART_MspInit+0x94>)
 8000abc:	f000 f9fa 	bl	8000eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	3720      	adds	r7, #32
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <HardFault_Handler+0x4>

08000ae6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <MemManage_Handler+0x4>

08000aec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <BusFault_Handler+0x4>

08000af2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <UsageFault_Handler+0x4>

08000af8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bc80      	pop	{r7}
 8000b02:	4770      	bx	lr

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr

08000b10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f87c 	bl	8000c1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f000 fb4b 	bl	80011c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr
	...

08000b44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b46:	e003      	b.n	8000b50 <LoopCopyDataInit>

08000b48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000b4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b4e:	3104      	adds	r1, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b50:	480a      	ldr	r0, [pc, #40]	; (8000b7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000b54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b58:	d3f6      	bcc.n	8000b48 <CopyDataInit>
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	; (8000b84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000b5c:	e002      	b.n	8000b64 <LoopFillZerobss>

08000b5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000b60:	f842 3b04 	str.w	r3, [r2], #4

08000b64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000b66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b68:	d3f9      	bcc.n	8000b5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b6a:	f7ff ffe4 	bl	8000b36 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f001 fed9 	bl	8002924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b72:	f7ff fd3d 	bl	80005f0 <main>
  bx lr
 8000b76:	4770      	bx	lr
  ldr r3, =_sidata
 8000b78:	080029d0 	.word	0x080029d0
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b80:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8000b84:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8000b88:	200000d0 	.word	0x200000d0

08000b8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC1_2_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_Init+0x28>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_Init+0x28>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	f000 f945 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f808 	bl	8000bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bac:	f7ff fec8 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40022000 	.word	0x40022000

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bc4:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_InitTick+0x54>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_InitTick+0x58>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f95d 	bl	8000e9a <HAL_SYSTICK_Config>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00e      	b.n	8000c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b0f      	cmp	r3, #15
 8000bee:	d80a      	bhi.n	8000c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	f000 f925 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_InitTick+0x5c>)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
 8000c04:	e000      	b.n	8000c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	2000001c 	.word	0x2000001c
 8000c14:	20000024 	.word	0x20000024
 8000c18:	20000020 	.word	0x20000020

08000c1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_IncTick+0x1c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <HAL_IncTick+0x20>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	4a03      	ldr	r2, [pc, #12]	; (8000c3c <HAL_IncTick+0x20>)
 8000c2e:	6013      	str	r3, [r2, #0]
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	20000024 	.word	0x20000024
 8000c3c:	200000cc 	.word	0x200000cc

08000c40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b02      	ldr	r3, [pc, #8]	; (8000c50 <HAL_GetTick+0x10>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	200000cc 	.word	0x200000cc

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff fff0 	bl	8000c40 <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_Delay+0x40>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffe0 	bl	8000c40 <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000024 	.word	0x20000024

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4906      	ldr	r1, [pc, #24]	; (8000d30 <__NVIC_EnableIRQ+0x34>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	; (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	; (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	; 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff2d 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff42 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff35 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e127      	b.n	8001118 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	69fa      	ldr	r2, [r7, #28]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	f040 8116 	bne.w	8001112 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b12      	cmp	r3, #18
 8000eec:	d034      	beq.n	8000f58 <HAL_GPIO_Init+0xa4>
 8000eee:	2b12      	cmp	r3, #18
 8000ef0:	d80d      	bhi.n	8000f0e <HAL_GPIO_Init+0x5a>
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x9a>
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d804      	bhi.n	8000f04 <HAL_GPIO_Init+0x50>
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d031      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d01c      	beq.n	8000f3c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f02:	e048      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d043      	beq.n	8000f90 <HAL_GPIO_Init+0xdc>
 8000f08:	2b11      	cmp	r3, #17
 8000f0a:	d01b      	beq.n	8000f44 <HAL_GPIO_Init+0x90>
          break;
 8000f0c:	e043      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f0e:	4a89      	ldr	r2, [pc, #548]	; (8001134 <HAL_GPIO_Init+0x280>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d026      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
 8000f14:	4a87      	ldr	r2, [pc, #540]	; (8001134 <HAL_GPIO_Init+0x280>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d806      	bhi.n	8000f28 <HAL_GPIO_Init+0x74>
 8000f1a:	4a87      	ldr	r2, [pc, #540]	; (8001138 <HAL_GPIO_Init+0x284>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d020      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
 8000f20:	4a86      	ldr	r2, [pc, #536]	; (800113c <HAL_GPIO_Init+0x288>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01d      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
          break;
 8000f26:	e036      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000f28:	4a85      	ldr	r2, [pc, #532]	; (8001140 <HAL_GPIO_Init+0x28c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
 8000f2e:	4a85      	ldr	r2, [pc, #532]	; (8001144 <HAL_GPIO_Init+0x290>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d016      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
 8000f34:	4a84      	ldr	r2, [pc, #528]	; (8001148 <HAL_GPIO_Init+0x294>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d013      	beq.n	8000f62 <HAL_GPIO_Init+0xae>
          break;
 8000f3a:	e02c      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	623b      	str	r3, [r7, #32]
          break;
 8000f42:	e028      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	623b      	str	r3, [r7, #32]
          break;
 8000f4c:	e023      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	3308      	adds	r3, #8
 8000f54:	623b      	str	r3, [r7, #32]
          break;
 8000f56:	e01e      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	330c      	adds	r3, #12
 8000f5e:	623b      	str	r3, [r7, #32]
          break;
 8000f60:	e019      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d102      	bne.n	8000f70 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f6a:	2304      	movs	r3, #4
 8000f6c:	623b      	str	r3, [r7, #32]
          break;
 8000f6e:	e012      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d105      	bne.n	8000f84 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f78:	2308      	movs	r3, #8
 8000f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69fa      	ldr	r2, [r7, #28]
 8000f80:	611a      	str	r2, [r3, #16]
          break;
 8000f82:	e008      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f84:	2308      	movs	r3, #8
 8000f86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	615a      	str	r2, [r3, #20]
          break;
 8000f8e:	e002      	b.n	8000f96 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
          break;
 8000f94:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	2bff      	cmp	r3, #255	; 0xff
 8000f9a:	d801      	bhi.n	8000fa0 <HAL_GPIO_Init+0xec>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	e001      	b.n	8000fa4 <HAL_GPIO_Init+0xf0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3304      	adds	r3, #4
 8000fa4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	2bff      	cmp	r3, #255	; 0xff
 8000faa:	d802      	bhi.n	8000fb2 <HAL_GPIO_Init+0xfe>
 8000fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x104>
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	3b08      	subs	r3, #8
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	210f      	movs	r1, #15
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	401a      	ands	r2, r3
 8000fca:	6a39      	ldr	r1, [r7, #32]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8096 	beq.w	8001112 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <HAL_GPIO_Init+0x298>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	4a58      	ldr	r2, [pc, #352]	; (800114c <HAL_GPIO_Init+0x298>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6193      	str	r3, [r2, #24]
 8000ff2:	4b56      	ldr	r3, [pc, #344]	; (800114c <HAL_GPIO_Init+0x298>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ffe:	4a54      	ldr	r2, [pc, #336]	; (8001150 <HAL_GPIO_Init+0x29c>)
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4b      	ldr	r2, [pc, #300]	; (8001154 <HAL_GPIO_Init+0x2a0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x19e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4a      	ldr	r2, [pc, #296]	; (8001158 <HAL_GPIO_Init+0x2a4>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x19a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a49      	ldr	r2, [pc, #292]	; (800115c <HAL_GPIO_Init+0x2a8>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x196>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a48      	ldr	r2, [pc, #288]	; (8001160 <HAL_GPIO_Init+0x2ac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x192>
 8001042:	2303      	movs	r3, #3
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x1a0>
 8001046:	2304      	movs	r3, #4
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x1a0>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x1a0>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x1a0>
 8001052:	2300      	movs	r3, #0
 8001054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001064:	493a      	ldr	r1, [pc, #232]	; (8001150 <HAL_GPIO_Init+0x29c>)
 8001066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4938      	ldr	r1, [pc, #224]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	600b      	str	r3, [r1, #0]
 800108a:	e006      	b.n	800109a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	43db      	mvns	r3, r3
 8001094:	4933      	ldr	r1, [pc, #204]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8001096:	4013      	ands	r3, r2
 8001098:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d006      	beq.n	80010b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	492e      	ldr	r1, [pc, #184]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	604b      	str	r3, [r1, #4]
 80010b2:	e006      	b.n	80010c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	4929      	ldr	r1, [pc, #164]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010be:	4013      	ands	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	4924      	ldr	r1, [pc, #144]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	608b      	str	r3, [r1, #8]
 80010da:	e006      	b.n	80010ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010dc:	4b21      	ldr	r3, [pc, #132]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	491f      	ldr	r1, [pc, #124]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010e6:	4013      	ands	r3, r2
 80010e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d006      	beq.n	8001104 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010f6:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010f8:	68da      	ldr	r2, [r3, #12]
 80010fa:	491a      	ldr	r1, [pc, #104]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60cb      	str	r3, [r1, #12]
 8001102:	e006      	b.n	8001112 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	43db      	mvns	r3, r3
 800110c:	4915      	ldr	r1, [pc, #84]	; (8001164 <HAL_GPIO_Init+0x2b0>)
 800110e:	4013      	ands	r3, r2
 8001110:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	3301      	adds	r3, #1
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	f47f aed0 	bne.w	8000ec8 <HAL_GPIO_Init+0x14>
  }
}
 8001128:	bf00      	nop
 800112a:	372c      	adds	r7, #44	; 0x2c
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	10210000 	.word	0x10210000
 8001138:	10110000 	.word	0x10110000
 800113c:	10120000 	.word	0x10120000
 8001140:	10310000 	.word	0x10310000
 8001144:	10320000 	.word	0x10320000
 8001148:	10220000 	.word	0x10220000
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	40011400 	.word	0x40011400
 8001164:	40010400 	.word	0x40010400

08001168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	460b      	mov	r3, r1
 8001172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	887b      	ldrh	r3, [r7, #2]
 800117a:	4013      	ands	r3, r2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001180:	2301      	movs	r3, #1
 8001182:	73fb      	strb	r3, [r7, #15]
 8001184:	e001      	b.n	800118a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118a:	7bfb      	ldrb	r3, [r7, #15]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	807b      	strh	r3, [r7, #2]
 80011a2:	4613      	mov	r3, r2
 80011a4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a6:	787b      	ldrb	r3, [r7, #1]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	611a      	str	r2, [r3, #16]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	88fb      	ldrh	r3, [r7, #6]
 80011d8:	4013      	ands	r3, r2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011e4:	88fb      	ldrh	r3, [r7, #6]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f812 	bl	8000210 <HAL_GPIO_EXTI_Callback>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d101      	bne.n	800120a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e26c      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8087 	beq.w	8001326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b04      	cmp	r3, #4
 8001222:	d00c      	beq.n	800123e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001224:	4b8f      	ldr	r3, [pc, #572]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d112      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
 8001230:	4b8c      	ldr	r3, [pc, #560]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800123c:	d10b      	bne.n	8001256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123e:	4b89      	ldr	r3, [pc, #548]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d06c      	beq.n	8001324 <HAL_RCC_OscConfig+0x12c>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d168      	bne.n	8001324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e246      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800125e:	d106      	bne.n	800126e <HAL_RCC_OscConfig+0x76>
 8001260:	4b80      	ldr	r3, [pc, #512]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a7f      	ldr	r2, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	e02e      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x98>
 8001276:	4b7b      	ldr	r3, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a7a      	ldr	r2, [pc, #488]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a77      	ldr	r2, [pc, #476]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e01d      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001298:	d10c      	bne.n	80012b4 <HAL_RCC_OscConfig+0xbc>
 800129a:	4b72      	ldr	r3, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a71      	ldr	r2, [pc, #452]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e00b      	b.n	80012cc <HAL_RCC_OscConfig+0xd4>
 80012b4:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6a      	ldr	r2, [pc, #424]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b68      	ldr	r3, [pc, #416]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a67      	ldr	r2, [pc, #412]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d013      	beq.n	80012fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d4:	f7ff fcb4 	bl	8000c40 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fcb0 	bl	8000c40 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e1fa      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f0      	beq.n	80012dc <HAL_RCC_OscConfig+0xe4>
 80012fa:	e014      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fca0 	bl	8000c40 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fc9c 	bl	8000c40 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e1e6      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001316:	4b53      	ldr	r3, [pc, #332]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f0      	bne.n	8001304 <HAL_RCC_OscConfig+0x10c>
 8001322:	e000      	b.n	8001326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001332:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 030c 	and.w	r3, r3, #12
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00b      	beq.n	8001356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800133e:	4b49      	ldr	r3, [pc, #292]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f003 030c 	and.w	r3, r3, #12
 8001346:	2b08      	cmp	r3, #8
 8001348:	d11c      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
 800134a:	4b46      	ldr	r3, [pc, #280]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d116      	bne.n	8001384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d001      	beq.n	800136e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e1ba      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136e:	4b3d      	ldr	r3, [pc, #244]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	4939      	ldr	r1, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 800137e:	4313      	orrs	r3, r2
 8001380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001382:	e03a      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d020      	beq.n	80013ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800138c:	4b36      	ldr	r3, [pc, #216]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001392:	f7ff fc55 	bl	8000c40 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fc51 	bl	8000c40 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e19b      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4927      	ldr	r1, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	600b      	str	r3, [r1, #0]
 80013cc:	e015      	b.n	80013fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b26      	ldr	r3, [pc, #152]	; (8001468 <HAL_RCC_OscConfig+0x270>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc34 	bl	8000c40 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013dc:	f7ff fc30 	bl	8000c40 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e17a      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	2b00      	cmp	r3, #0
 8001404:	d03a      	beq.n	800147c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d019      	beq.n	8001442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001414:	f7ff fc14 	bl	8000c40 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141c:	f7ff fc10 	bl	8000c40 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e15a      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_RCC_OscConfig+0x26c>)
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800143a:	2001      	movs	r0, #1
 800143c:	f000 fada 	bl	80019f4 <RCC_Delay>
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_RCC_OscConfig+0x274>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fbfa 	bl	8000c40 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144e:	e00f      	b.n	8001470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001450:	f7ff fbf6 	bl	8000c40 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d908      	bls.n	8001470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e140      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	42420000 	.word	0x42420000
 800146c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	4b9e      	ldr	r3, [pc, #632]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1e9      	bne.n	8001450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	f000 80a6 	beq.w	80015d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800148e:	4b97      	ldr	r3, [pc, #604]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d10d      	bne.n	80014b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800149a:	4b94      	ldr	r3, [pc, #592]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a93      	ldr	r2, [pc, #588]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014b2:	2301      	movs	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b6:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d118      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014c2:	4b8b      	ldr	r3, [pc, #556]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a8a      	ldr	r2, [pc, #552]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fbb7 	bl	8000c40 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d6:	f7ff fbb3 	bl	8000c40 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e0fd      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	4b81      	ldr	r3, [pc, #516]	; (80016f0 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d106      	bne.n	800150a <HAL_RCC_OscConfig+0x312>
 80014fc:	4b7b      	ldr	r3, [pc, #492]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	6a1b      	ldr	r3, [r3, #32]
 8001500:	4a7a      	ldr	r2, [pc, #488]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6213      	str	r3, [r2, #32]
 8001508:	e02d      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0x334>
 8001512:	4b76      	ldr	r3, [pc, #472]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4a75      	ldr	r2, [pc, #468]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6213      	str	r3, [r2, #32]
 800151e:	4b73      	ldr	r3, [pc, #460]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a72      	ldr	r2, [pc, #456]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	e01c      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	2b05      	cmp	r3, #5
 8001532:	d10c      	bne.n	800154e <HAL_RCC_OscConfig+0x356>
 8001534:	4b6d      	ldr	r3, [pc, #436]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	4a6c      	ldr	r2, [pc, #432]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800153a:	f043 0304 	orr.w	r3, r3, #4
 800153e:	6213      	str	r3, [r2, #32]
 8001540:	4b6a      	ldr	r3, [pc, #424]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	4a69      	ldr	r2, [pc, #420]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6213      	str	r3, [r2, #32]
 800154c:	e00b      	b.n	8001566 <HAL_RCC_OscConfig+0x36e>
 800154e:	4b67      	ldr	r3, [pc, #412]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a66      	ldr	r2, [pc, #408]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	4b64      	ldr	r3, [pc, #400]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	4a63      	ldr	r2, [pc, #396]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001560:	f023 0304 	bic.w	r3, r3, #4
 8001564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d015      	beq.n	800159a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156e:	f7ff fb67 	bl	8000c40 <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fb63 	bl	8000c40 <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e0ab      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0ee      	beq.n	8001576 <HAL_RCC_OscConfig+0x37e>
 8001598:	e014      	b.n	80015c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159a:	f7ff fb51 	bl	8000c40 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	e00a      	b.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a2:	f7ff fb4d 	bl	8000c40 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e095      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b8:	4b4c      	ldr	r3, [pc, #304]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1ee      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015c4:	7dfb      	ldrb	r3, [r7, #23]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d105      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015ca:	4b48      	ldr	r3, [pc, #288]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	4a47      	ldr	r2, [pc, #284]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 8081 	beq.w	80016e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 030c 	and.w	r3, r3, #12
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d061      	beq.n	80016b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d146      	bne.n	8001682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f4:	4b3f      	ldr	r3, [pc, #252]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fb21 	bl	8000c40 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001602:	f7ff fb1d 	bl	8000c40 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e067      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001614:	4b35      	ldr	r3, [pc, #212]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001628:	d108      	bne.n	800163c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800162a:	4b30      	ldr	r3, [pc, #192]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	492d      	ldr	r1, [pc, #180]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a19      	ldr	r1, [r3, #32]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	430b      	orrs	r3, r1
 800164e:	4927      	ldr	r1, [pc, #156]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff faf1 	bl	8000c40 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff faed 	bl	8000c40 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e037      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001674:	4b1d      	ldr	r3, [pc, #116]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x46a>
 8001680:	e02f      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_RCC_OscConfig+0x4fc>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fada 	bl	8000c40 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fad6 	bl	8000c40 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e020      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x498>
 80016ae:	e018      	b.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e013      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_RCC_OscConfig+0x4f4>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	40007000 	.word	0x40007000
 80016f4:	42420060 	.word	0x42420060

080016f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d101      	bne.n	800170c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0d0      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800170c:	4b6a      	ldr	r3, [pc, #424]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	429a      	cmp	r2, r3
 8001718:	d910      	bls.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 0207 	bic.w	r2, r3, #7
 8001722:	4965      	ldr	r1, [pc, #404]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b8      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0302 	and.w	r3, r3, #2
 8001744:	2b00      	cmp	r3, #0
 8001746:	d020      	beq.n	800178a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001754:	4b59      	ldr	r3, [pc, #356]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800175e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b00      	cmp	r3, #0
 800176a:	d005      	beq.n	8001778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800176c:	4b53      	ldr	r3, [pc, #332]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001778:	4b50      	ldr	r3, [pc, #320]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	494d      	ldr	r1, [pc, #308]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	2b00      	cmp	r3, #0
 8001794:	d040      	beq.n	8001818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d115      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e07f      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d107      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b6:	4b41      	ldr	r3, [pc, #260]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d109      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e073      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c6:	4b3d      	ldr	r3, [pc, #244]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e06b      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f023 0203 	bic.w	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	4936      	ldr	r1, [pc, #216]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e8:	f7ff fa2a 	bl	8000c40 <HAL_GetTick>
 80017ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	e00a      	b.n	8001806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f0:	f7ff fa26 	bl	8000c40 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e053      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 020c 	and.w	r2, r3, #12
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	429a      	cmp	r2, r3
 8001816:	d1eb      	bne.n	80017f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b27      	ldr	r3, [pc, #156]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0307 	and.w	r3, r3, #7
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d210      	bcs.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f023 0207 	bic.w	r2, r3, #7
 800182e:	4922      	ldr	r1, [pc, #136]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	429a      	cmp	r2, r3
 8001842:	d001      	beq.n	8001848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e032      	b.n	80018ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d008      	beq.n	8001866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	4916      	ldr	r1, [pc, #88]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d009      	beq.n	8001886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	490e      	ldr	r1, [pc, #56]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001886:	f000 f821 	bl	80018cc <HAL_RCC_GetSysClockFreq>
 800188a:	4601      	mov	r1, r0
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1c4>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	fa21 f303 	lsr.w	r3, r1, r3
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1cc>)
 80018a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_ClockConfig+0x1d0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff f988 	bl	8000bbc <HAL_InitTick>

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40022000 	.word	0x40022000
 80018bc:	40021000 	.word	0x40021000
 80018c0:	080029b0 	.word	0x080029b0
 80018c4:	2000001c 	.word	0x2000001c
 80018c8:	20000020 	.word	0x20000020

080018cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018cc:	b490      	push	{r4, r7}
 80018ce:	b08a      	sub	sp, #40	; 0x28
 80018d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_RCC_GetSysClockFreq+0xb0>)
 80018d4:	1d3c      	adds	r4, r7, #4
 80018d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018dc:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
 80018e6:	2300      	movs	r3, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	2300      	movs	r3, #0
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 030c 	and.w	r3, r3, #12
 8001902:	2b04      	cmp	r3, #4
 8001904:	d002      	beq.n	800190c <HAL_RCC_GetSysClockFreq+0x40>
 8001906:	2b08      	cmp	r3, #8
 8001908:	d003      	beq.n	8001912 <HAL_RCC_GetSysClockFreq+0x46>
 800190a:	e02d      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800190e:	623b      	str	r3, [r7, #32]
      break;
 8001910:	e02d      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	0c9b      	lsrs	r3, r3, #18
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800191e:	4413      	add	r3, r2
 8001920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d013      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c5b      	lsrs	r3, r3, #17
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800193e:	4413      	add	r3, r2
 8001940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800194a:	fb02 f203 	mul.w	r2, r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	fbb2 f3f3 	udiv	r3, r2, r3
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	e004      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_RCC_GetSysClockFreq+0xc0>)
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	623b      	str	r3, [r7, #32]
      break;
 8001966:	e002      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800196a:	623b      	str	r3, [r7, #32]
      break;
 800196c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800196e:	6a3b      	ldr	r3, [r7, #32]
}
 8001970:	4618      	mov	r0, r3
 8001972:	3728      	adds	r7, #40	; 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bc90      	pop	{r4, r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	0800299c 	.word	0x0800299c
 8001980:	080029ac 	.word	0x080029ac
 8001984:	40021000 	.word	0x40021000
 8001988:	007a1200 	.word	0x007a1200
 800198c:	003d0900 	.word	0x003d0900

08001990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001994:	4b02      	ldr	r3, [pc, #8]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	2000001c 	.word	0x2000001c

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019a8:	f7ff fff2 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019ac:	4601      	mov	r1, r0
 80019ae:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	4a03      	ldr	r2, [pc, #12]	; (80019c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ba:	5cd3      	ldrb	r3, [r2, r3]
 80019bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	080029c0 	.word	0x080029c0

080019cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019d0:	f7ff ffde 	bl	8001990 <HAL_RCC_GetHCLKFreq>
 80019d4:	4601      	mov	r1, r0
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0adb      	lsrs	r3, r3, #11
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	4a03      	ldr	r2, [pc, #12]	; (80019f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	080029c0 	.word	0x080029c0

080019f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019fc:	4b0a      	ldr	r3, [pc, #40]	; (8001a28 <RCC_Delay+0x34>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a0a      	ldr	r2, [pc, #40]	; (8001a2c <RCC_Delay+0x38>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0a5b      	lsrs	r3, r3, #9
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a10:	bf00      	nop
  }
  while (Delay --);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	60fa      	str	r2, [r7, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1f9      	bne.n	8001a10 <RCC_Delay+0x1c>
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000001c 	.word	0x2000001c
 8001a2c:	10624dd3 	.word	0x10624dd3

08001a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e041      	b.n	8001ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d106      	bne.n	8001a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7fe ffa4 	bl	80009a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4610      	mov	r0, r2
 8001a70:	f000 fa9e 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e041      	b.n	8001b64 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d106      	bne.n	8001afa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f839 	bl	8001b6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f000 fa4f 	bl	8001fb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2201      	movs	r2, #1
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d109      	bne.n	8001ba4 <HAL_TIM_PWM_Start+0x24>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	bf14      	ite	ne
 8001b9c:	2301      	movne	r3, #1
 8001b9e:	2300      	moveq	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	e022      	b.n	8001bea <HAL_TIM_PWM_Start+0x6a>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d109      	bne.n	8001bbe <HAL_TIM_PWM_Start+0x3e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	e015      	b.n	8001bea <HAL_TIM_PWM_Start+0x6a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d109      	bne.n	8001bd8 <HAL_TIM_PWM_Start+0x58>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	bf14      	ite	ne
 8001bd0:	2301      	movne	r3, #1
 8001bd2:	2300      	moveq	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e008      	b.n	8001bea <HAL_TIM_PWM_Start+0x6a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e05e      	b.n	8001cb0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d104      	bne.n	8001c02 <HAL_TIM_PWM_Start+0x82>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c00:	e013      	b.n	8001c2a <HAL_TIM_PWM_Start+0xaa>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	d104      	bne.n	8001c12 <HAL_TIM_PWM_Start+0x92>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c10:	e00b      	b.n	8001c2a <HAL_TIM_PWM_Start+0xaa>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	2b08      	cmp	r3, #8
 8001c16:	d104      	bne.n	8001c22 <HAL_TIM_PWM_Start+0xa2>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	e003      	b.n	8001c2a <HAL_TIM_PWM_Start+0xaa>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2202      	movs	r2, #2
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	6839      	ldr	r1, [r7, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fc3c 	bl	80024b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	; (8001cb8 <HAL_TIM_PWM_Start+0x138>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d107      	bne.n	8001c52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_PWM_Start+0x138>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00e      	beq.n	8001c7a <HAL_TIM_PWM_Start+0xfa>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c64:	d009      	beq.n	8001c7a <HAL_TIM_PWM_Start+0xfa>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a14      	ldr	r2, [pc, #80]	; (8001cbc <HAL_TIM_PWM_Start+0x13c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_TIM_PWM_Start+0xfa>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_PWM_Start+0x140>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d111      	bne.n	8001c9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d010      	beq.n	8001cae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	e007      	b.n	8001cae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40012c00 	.word	0x40012c00
 8001cbc:	40000400 	.word	0x40000400
 8001cc0:	40000800 	.word	0x40000800

08001cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d101      	bne.n	8001cde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001cda:	2302      	movs	r3, #2
 8001cdc:	e0ac      	b.n	8001e38 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	f200 809f 	bhi.w	8001e2c <HAL_TIM_PWM_ConfigChannel+0x168>
 8001cee:	a201      	add	r2, pc, #4	; (adr r2, 8001cf4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d29 	.word	0x08001d29
 8001cf8:	08001e2d 	.word	0x08001e2d
 8001cfc:	08001e2d 	.word	0x08001e2d
 8001d00:	08001e2d 	.word	0x08001e2d
 8001d04:	08001d69 	.word	0x08001d69
 8001d08:	08001e2d 	.word	0x08001e2d
 8001d0c:	08001e2d 	.word	0x08001e2d
 8001d10:	08001e2d 	.word	0x08001e2d
 8001d14:	08001dab 	.word	0x08001dab
 8001d18:	08001e2d 	.word	0x08001e2d
 8001d1c:	08001e2d 	.word	0x08001e2d
 8001d20:	08001e2d 	.word	0x08001e2d
 8001d24:	08001deb 	.word	0x08001deb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f000 f9a0 	bl	8002074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f042 0208 	orr.w	r2, r2, #8
 8001d42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	699a      	ldr	r2, [r3, #24]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f022 0204 	bic.w	r2, r2, #4
 8001d52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	691a      	ldr	r2, [r3, #16]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	619a      	str	r2, [r3, #24]
      break;
 8001d66:	e062      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68b9      	ldr	r1, [r7, #8]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 f9e6 	bl	8002140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	699a      	ldr	r2, [r3, #24]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6999      	ldr	r1, [r3, #24]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	021a      	lsls	r2, r3, #8
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	430a      	orrs	r2, r1
 8001da6:	619a      	str	r2, [r3, #24]
      break;
 8001da8:	e041      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fa2f 	bl	8002214 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0208 	orr.w	r2, r2, #8
 8001dc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0204 	bic.w	r2, r2, #4
 8001dd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	69d9      	ldr	r1, [r3, #28]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	691a      	ldr	r2, [r3, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	61da      	str	r2, [r3, #28]
      break;
 8001de8:	e021      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68b9      	ldr	r1, [r7, #8]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fa79 	bl	80022e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	69da      	ldr	r2, [r3, #28]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69da      	ldr	r2, [r3, #28]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	69d9      	ldr	r1, [r3, #28]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	021a      	lsls	r2, r3, #8
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
      break;
 8001e2a:	e000      	b.n	8001e2e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3710      	adds	r7, #16
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <HAL_TIM_ConfigClockSource+0x18>
 8001e54:	2302      	movs	r3, #2
 8001e56:	e0a6      	b.n	8001fa6 <HAL_TIM_ConfigClockSource+0x166>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e7e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b40      	cmp	r3, #64	; 0x40
 8001e8e:	d067      	beq.n	8001f60 <HAL_TIM_ConfigClockSource+0x120>
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d80b      	bhi.n	8001eac <HAL_TIM_ConfigClockSource+0x6c>
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d073      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x140>
 8001e98:	2b10      	cmp	r3, #16
 8001e9a:	d802      	bhi.n	8001ea2 <HAL_TIM_ConfigClockSource+0x62>
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d06f      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001ea0:	e078      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	d06c      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x140>
 8001ea6:	2b30      	cmp	r3, #48	; 0x30
 8001ea8:	d06a      	beq.n	8001f80 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001eaa:	e073      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001eac:	2b70      	cmp	r3, #112	; 0x70
 8001eae:	d00d      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0x8c>
 8001eb0:	2b70      	cmp	r3, #112	; 0x70
 8001eb2:	d804      	bhi.n	8001ebe <HAL_TIM_ConfigClockSource+0x7e>
 8001eb4:	2b50      	cmp	r3, #80	; 0x50
 8001eb6:	d033      	beq.n	8001f20 <HAL_TIM_ConfigClockSource+0xe0>
 8001eb8:	2b60      	cmp	r3, #96	; 0x60
 8001eba:	d041      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ebc:	e06a      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec2:	d066      	beq.n	8001f92 <HAL_TIM_ConfigClockSource+0x152>
 8001ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec8:	d017      	beq.n	8001efa <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001eca:	e063      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6818      	ldr	r0, [r3, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	6899      	ldr	r1, [r3, #8]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f000 fac9 	bl	8002472 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001eee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	609a      	str	r2, [r3, #8]
      break;
 8001ef8:	e04c      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6899      	ldr	r1, [r3, #8]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f000 fab2 	bl	8002472 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1c:	609a      	str	r2, [r3, #8]
      break;
 8001f1e:	e039      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f000 fa29 	bl	8002384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2150      	movs	r1, #80	; 0x50
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fa80 	bl	800243e <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e029      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6859      	ldr	r1, [r3, #4]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f000 fa47 	bl	80023e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2160      	movs	r1, #96	; 0x60
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fa70 	bl	800243e <TIM_ITRx_SetConfig>
      break;
 8001f5e:	e019      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	6859      	ldr	r1, [r3, #4]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	f000 fa09 	bl	8002384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fa60 	bl	800243e <TIM_ITRx_SetConfig>
      break;
 8001f7e:	e009      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 fa57 	bl	800243e <TIM_ITRx_SetConfig>
        break;
 8001f90:	e000      	b.n	8001f94 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a29      	ldr	r2, [pc, #164]	; (8002068 <TIM_Base_SetConfig+0xb8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00b      	beq.n	8001fe0 <TIM_Base_SetConfig+0x30>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fce:	d007      	beq.n	8001fe0 <TIM_Base_SetConfig+0x30>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a26      	ldr	r2, [pc, #152]	; (800206c <TIM_Base_SetConfig+0xbc>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d003      	beq.n	8001fe0 <TIM_Base_SetConfig+0x30>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a25      	ldr	r2, [pc, #148]	; (8002070 <TIM_Base_SetConfig+0xc0>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d108      	bne.n	8001ff2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <TIM_Base_SetConfig+0xb8>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00b      	beq.n	8002012 <TIM_Base_SetConfig+0x62>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d007      	beq.n	8002012 <TIM_Base_SetConfig+0x62>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <TIM_Base_SetConfig+0xbc>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d003      	beq.n	8002012 <TIM_Base_SetConfig+0x62>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <TIM_Base_SetConfig+0xc0>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d108      	bne.n	8002024 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	4313      	orrs	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a07      	ldr	r2, [pc, #28]	; (8002068 <TIM_Base_SetConfig+0xb8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d103      	bne.n	8002058 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	615a      	str	r2, [r3, #20]
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800

08002074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	f023 0201 	bic.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0303 	bic.w	r3, r3, #3
 80020aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f023 0302 	bic.w	r3, r3, #2
 80020bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a1c      	ldr	r2, [pc, #112]	; (800213c <TIM_OC1_SetConfig+0xc8>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d10c      	bne.n	80020ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f023 0308 	bic.w	r3, r3, #8
 80020d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a13      	ldr	r2, [pc, #76]	; (800213c <TIM_OC1_SetConfig+0xc8>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d111      	bne.n	8002116 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002100:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	693a      	ldr	r2, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	621a      	str	r2, [r3, #32]
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40012c00 	.word	0x40012c00

08002140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f023 0210 	bic.w	r2, r3, #16
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800216e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f023 0320 	bic.w	r3, r3, #32
 800218a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	4313      	orrs	r3, r2
 8002196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a1d      	ldr	r2, [pc, #116]	; (8002210 <TIM_OC2_SetConfig+0xd0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d10d      	bne.n	80021bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a14      	ldr	r2, [pc, #80]	; (8002210 <TIM_OC2_SetConfig+0xd0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d113      	bne.n	80021ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	621a      	str	r2, [r3, #32]
}
 8002206:	bf00      	nop
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	40012c00 	.word	0x40012c00

08002214 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0303 	bic.w	r3, r3, #3
 800224a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800225c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a1d      	ldr	r2, [pc, #116]	; (80022e4 <TIM_OC3_SetConfig+0xd0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10d      	bne.n	800228e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800228c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <TIM_OC3_SetConfig+0xd0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d113      	bne.n	80022be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800229c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	621a      	str	r2, [r3, #32]
}
 80022d8:	bf00      	nop
 80022da:	371c      	adds	r7, #28
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	031b      	lsls	r3, r3, #12
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0f      	ldr	r2, [pc, #60]	; (8002380 <TIM_OC4_SetConfig+0x98>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d109      	bne.n	800235c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	019b      	lsls	r3, r3, #6
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	4313      	orrs	r3, r2
 800235a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	621a      	str	r2, [r3, #32]
}
 8002376:	bf00      	nop
 8002378:	371c      	adds	r7, #28
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	40012c00 	.word	0x40012c00

08002384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	f023 0201 	bic.w	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f023 030a 	bic.w	r3, r3, #10
 80023c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	621a      	str	r2, [r3, #32]
}
 80023d6:	bf00      	nop
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	f023 0210 	bic.w	r2, r3, #16
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800240a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	031b      	lsls	r3, r3, #12
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800241c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	621a      	str	r2, [r3, #32]
}
 8002434:	bf00      	nop
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800243e:	b480      	push	{r7}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	f043 0307 	orr.w	r3, r3, #7
 8002460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002472:	b480      	push	{r7}
 8002474:	b087      	sub	sp, #28
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
 800247e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800248c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	021a      	lsls	r2, r3, #8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	431a      	orrs	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4313      	orrs	r3, r2
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	609a      	str	r2, [r3, #8]
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800250c:	2302      	movs	r3, #2
 800250e:	e046      	b.n	800259e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002536:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a16      	ldr	r2, [pc, #88]	; (80025a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00e      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800255c:	d009      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a10      	ldr	r2, [pc, #64]	; (80025b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d10c      	bne.n	800258c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4313      	orrs	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr
 80025a8:	40012c00 	.word	0x40012c00
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40000800 	.word	0x40000800

080025b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e03f      	b.n	8002646 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fa2e 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2224      	movs	r2, #36	; 0x24
 80025e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68da      	ldr	r2, [r3, #12]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f905 	bl	8002808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800260c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	695a      	ldr	r2, [r3, #20]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800261c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68da      	ldr	r2, [r3, #12]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800262c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2220      	movs	r2, #32
 8002640:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b08a      	sub	sp, #40	; 0x28
 8002652:	af02      	add	r7, sp, #8
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	603b      	str	r3, [r7, #0]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	d17c      	bne.n	8002768 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_UART_Transmit+0x2c>
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e075      	b.n	800276a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_UART_Transmit+0x3e>
 8002688:	2302      	movs	r3, #2
 800268a:	e06e      	b.n	800276a <HAL_UART_Transmit+0x11c>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	; 0x21
 800269e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026a2:	f7fe facd 	bl	8000c40 <HAL_GetTick>
 80026a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	88fa      	ldrh	r2, [r7, #6]
 80026ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026bc:	d108      	bne.n	80026d0 <HAL_UART_Transmit+0x82>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d104      	bne.n	80026d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e003      	b.n	80026d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026e0:	e02a      	b.n	8002738 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	2180      	movs	r1, #128	; 0x80
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f840 	bl	8002772 <UART_WaitOnFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e036      	b.n	800276a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10b      	bne.n	800271a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	461a      	mov	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002710:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	3302      	adds	r3, #2
 8002716:	61bb      	str	r3, [r7, #24]
 8002718:	e007      	b.n	800272a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	781a      	ldrb	r2, [r3, #0]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800273c:	b29b      	uxth	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1cf      	bne.n	80026e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2200      	movs	r2, #0
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 f810 	bl	8002772 <UART_WaitOnFlagUntilTimeout>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e006      	b.n	800276a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2220      	movs	r2, #32
 8002760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	4613      	mov	r3, r2
 8002780:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002782:	e02c      	b.n	80027de <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278a:	d028      	beq.n	80027de <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002792:	f7fe fa55 	bl	8000c40 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d21d      	bcs.n	80027de <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80027b0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e00f      	b.n	80027fe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	4013      	ands	r3, r2
 80027e8:	68ba      	ldr	r2, [r7, #8]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	bf0c      	ite	eq
 80027ee:	2301      	moveq	r3, #1
 80027f0:	2300      	movne	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d0c3      	beq.n	8002784 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002842:	f023 030c 	bic.w	r3, r3, #12
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	430b      	orrs	r3, r1
 800284e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a2c      	ldr	r2, [pc, #176]	; (800291c <UART_SetConfig+0x114>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d103      	bne.n	8002878 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002870:	f7ff f8ac 	bl	80019cc <HAL_RCC_GetPCLK2Freq>
 8002874:	60f8      	str	r0, [r7, #12]
 8002876:	e002      	b.n	800287e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff f894 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	009a      	lsls	r2, r3, #2
 8002888:	441a      	add	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	4a22      	ldr	r2, [pc, #136]	; (8002920 <UART_SetConfig+0x118>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	0119      	lsls	r1, r3, #4
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	009a      	lsls	r2, r3, #2
 80028a8:	441a      	add	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b4:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <UART_SetConfig+0x118>)
 80028b6:	fba3 0302 	umull	r0, r3, r3, r2
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2064      	movs	r0, #100	; 0x64
 80028be:	fb00 f303 	mul.w	r3, r0, r3
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	3332      	adds	r3, #50	; 0x32
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <UART_SetConfig+0x118>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028d4:	4419      	add	r1, r3
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <UART_SetConfig+0x118>)
 80028ee:	fba3 0302 	umull	r0, r3, r3, r2
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	2064      	movs	r0, #100	; 0x64
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	4a07      	ldr	r2, [pc, #28]	; (8002920 <UART_SetConfig+0x118>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 020f 	and.w	r2, r3, #15
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	440a      	add	r2, r1
 8002912:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40013800 	.word	0x40013800
 8002920:	51eb851f 	.word	0x51eb851f

08002924 <__libc_init_array>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	2500      	movs	r5, #0
 8002928:	4e0c      	ldr	r6, [pc, #48]	; (800295c <__libc_init_array+0x38>)
 800292a:	4c0d      	ldr	r4, [pc, #52]	; (8002960 <__libc_init_array+0x3c>)
 800292c:	1ba4      	subs	r4, r4, r6
 800292e:	10a4      	asrs	r4, r4, #2
 8002930:	42a5      	cmp	r5, r4
 8002932:	d109      	bne.n	8002948 <__libc_init_array+0x24>
 8002934:	f000 f822 	bl	800297c <_init>
 8002938:	2500      	movs	r5, #0
 800293a:	4e0a      	ldr	r6, [pc, #40]	; (8002964 <__libc_init_array+0x40>)
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <__libc_init_array+0x44>)
 800293e:	1ba4      	subs	r4, r4, r6
 8002940:	10a4      	asrs	r4, r4, #2
 8002942:	42a5      	cmp	r5, r4
 8002944:	d105      	bne.n	8002952 <__libc_init_array+0x2e>
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800294c:	4798      	blx	r3
 800294e:	3501      	adds	r5, #1
 8002950:	e7ee      	b.n	8002930 <__libc_init_array+0xc>
 8002952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002956:	4798      	blx	r3
 8002958:	3501      	adds	r5, #1
 800295a:	e7f2      	b.n	8002942 <__libc_init_array+0x1e>
 800295c:	080029c8 	.word	0x080029c8
 8002960:	080029c8 	.word	0x080029c8
 8002964:	080029c8 	.word	0x080029c8
 8002968:	080029cc 	.word	0x080029cc

0800296c <memset>:
 800296c:	4603      	mov	r3, r0
 800296e:	4402      	add	r2, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <_init>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr

08002988 <_fini>:
 8002988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298a:	bf00      	nop
 800298c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298e:	bc08      	pop	{r3}
 8002990:	469e      	mov	lr, r3
 8002992:	4770      	bx	lr
