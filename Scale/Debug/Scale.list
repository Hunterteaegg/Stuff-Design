
Scale.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000233c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800246c  0800246c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800246c  0800246c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800246c  0800246c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800246c  0800246c  0001246c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002470  08002470  00012470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000028  0800249c  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800249c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb1d  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c66  00000000  00000000  0002cb6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a20  00000000  00000000  0002e7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  0002f1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017908  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000941f  00000000  00000000  00047438  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086e26  00000000  00000000  00050857  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d767d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028c4  00000000  00000000  000d76f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002430 	.word	0x08002430

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002430 	.word	0x08002430

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_GPIO_EXTI_Callback>:
 */

#include "calibration.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	4603      	mov	r3, r0
 8000164:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8000166:	88fb      	ldrh	r3, [r7, #6]
 8000168:	2b02      	cmp	r3, #2
 800016a:	d000      	beq.n	800016e <HAL_GPIO_EXTI_Callback+0x12>
		}
		break;
	default:
		;
	}
}
 800016c:	e00f      	b.n	800018e <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(calibration_GPIO_Port, calibration_Pin)==GPIO_PIN_RESET)
 800016e:	2102      	movs	r1, #2
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000172:	f000 ff3d 	bl	8000ff0 <HAL_GPIO_ReadPin>
 8000176:	4603      	mov	r3, r0
 8000178:	2b00      	cmp	r3, #0
 800017a:	d107      	bne.n	800018c <HAL_GPIO_EXTI_Callback+0x30>
			offset+=convert();
 800017c:	f000 f876 	bl	800026c <convert>
 8000180:	4602      	mov	r2, r0
 8000182:	4b06      	ldr	r3, [pc, #24]	; (800019c <HAL_GPIO_EXTI_Callback+0x40>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	4413      	add	r3, r2
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <HAL_GPIO_EXTI_Callback+0x40>)
 800018a:	6013      	str	r3, [r2, #0]
		break;
 800018c:	bf00      	nop
}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40010800 	.word	0x40010800
 800019c:	20000000 	.word	0x20000000

080001a0 <delay>:


#include "hx711.h"

void delay(uint8_t i)
{
 80001a0:	b480      	push	{r7}
 80001a2:	b083      	sub	sp, #12
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	4603      	mov	r3, r0
 80001a8:	71fb      	strb	r3, [r7, #7]
	while(i--);
 80001aa:	bf00      	nop
 80001ac:	79fb      	ldrb	r3, [r7, #7]
 80001ae:	1e5a      	subs	r2, r3, #1
 80001b0:	71fa      	strb	r2, [r7, #7]
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d1fa      	bne.n	80001ac <delay+0xc>
}
 80001b6:	bf00      	nop
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr

080001c0 <readData>:

uint32_t offset  = 21711;

uint32_t readData()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
	uint32_t count=0;
 80001c6:	2300      	movs	r3, #0
 80001c8:	607b      	str	r3, [r7, #4]

	HAL_GPIO_WritePin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin, GPIO_PIN_SET);
 80001ca:	2201      	movs	r2, #1
 80001cc:	2108      	movs	r1, #8
 80001ce:	4826      	ldr	r0, [pc, #152]	; (8000268 <readData+0xa8>)
 80001d0:	f000 ff25 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	2110      	movs	r1, #16
 80001d8:	4823      	ldr	r0, [pc, #140]	; (8000268 <readData+0xa8>)
 80001da:	f000 ff20 	bl	800101e <HAL_GPIO_WritePin>
	delay(1);
 80001de:	2001      	movs	r0, #1
 80001e0:	f7ff ffde 	bl	80001a0 <delay>
	while(HAL_GPIO_ReadPin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin));
 80001e4:	bf00      	nop
 80001e6:	2108      	movs	r1, #8
 80001e8:	481f      	ldr	r0, [pc, #124]	; (8000268 <readData+0xa8>)
 80001ea:	f000 ff01 	bl	8000ff0 <HAL_GPIO_ReadPin>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d1f8      	bne.n	80001e6 <readData+0x26>

	for(uint8_t i=0;i<24;i++)
 80001f4:	2300      	movs	r3, #0
 80001f6:	70fb      	strb	r3, [r7, #3]
 80001f8:	e01c      	b.n	8000234 <readData+0x74>
	{
		HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2110      	movs	r1, #16
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <readData+0xa8>)
 8000200:	f000 ff0d 	bl	800101e <HAL_GPIO_WritePin>
		delay(1);
 8000204:	2001      	movs	r0, #1
 8000206:	f7ff ffcb 	bl	80001a0 <delay>
		count<<=1;
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 8000210:	2200      	movs	r2, #0
 8000212:	2110      	movs	r1, #16
 8000214:	4814      	ldr	r0, [pc, #80]	; (8000268 <readData+0xa8>)
 8000216:	f000 ff02 	bl	800101e <HAL_GPIO_WritePin>

		if(HAL_GPIO_ReadPin(HX711_ADDO_GPIO_Port, HX711_ADDO_Pin))
 800021a:	2108      	movs	r1, #8
 800021c:	4812      	ldr	r0, [pc, #72]	; (8000268 <readData+0xa8>)
 800021e:	f000 fee7 	bl	8000ff0 <HAL_GPIO_ReadPin>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <readData+0x6e>
		{
			count++;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3301      	adds	r3, #1
 800022c:	607b      	str	r3, [r7, #4]
	for(uint8_t i=0;i<24;i++)
 800022e:	78fb      	ldrb	r3, [r7, #3]
 8000230:	3301      	adds	r3, #1
 8000232:	70fb      	strb	r3, [r7, #3]
 8000234:	78fb      	ldrb	r3, [r7, #3]
 8000236:	2b17      	cmp	r3, #23
 8000238:	d9df      	bls.n	80001fa <readData+0x3a>
		}
	}

	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_SET);
 800023a:	2201      	movs	r2, #1
 800023c:	2110      	movs	r1, #16
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <readData+0xa8>)
 8000240:	f000 feed 	bl	800101e <HAL_GPIO_WritePin>
	delay(2);
 8000244:	2002      	movs	r0, #2
 8000246:	f7ff ffab 	bl	80001a0 <delay>
	count^=0x800000;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
 8000250:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(HX711_ADSK_GPIO_Port, HX711_ADSK_Pin, GPIO_PIN_RESET);
 8000252:	2200      	movs	r2, #0
 8000254:	2110      	movs	r1, #16
 8000256:	4804      	ldr	r0, [pc, #16]	; (8000268 <readData+0xa8>)
 8000258:	f000 fee1 	bl	800101e <HAL_GPIO_WritePin>

	return count;
 800025c:	687b      	ldr	r3, [r7, #4]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3708      	adds	r7, #8
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800

0800026c <convert>:

uint32_t convert()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	return ((readData()/GapVal)-offset);
 8000270:	f7ff ffa6 	bl	80001c0 <readData>
 8000274:	4602      	mov	r2, r0
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <convert+0x1c>)
 8000278:	fba3 2302 	umull	r2, r3, r3, r2
 800027c:	09da      	lsrs	r2, r3, #7
 800027e:	4b03      	ldr	r3, [pc, #12]	; (800028c <convert+0x20>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	1ad3      	subs	r3, r2, r3
}
 8000284:	4618      	mov	r0, r3
 8000286:	bd80      	pop	{r7, pc}
 8000288:	551c979b 	.word	0x551c979b
 800028c:	20000000 	.word	0x20000000

08000290 <lcd_write>:

char string_overScale[]="FATAL ERROR!";
bool overScale=false;

void lcd_write(uint8_t dat)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a8:	4829      	ldr	r0, [pc, #164]	; (8000350 <lcd_write+0xc0>)
 80002aa:	f000 feb8 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	085b      	lsrs	r3, r3, #1
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	f003 0301 	and.w	r3, r3, #1
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	2108      	movs	r1, #8
 80002be:	4825      	ldr	r0, [pc, #148]	; (8000354 <lcd_write+0xc4>)
 80002c0:	f000 fead 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	461a      	mov	r2, r3
 80002d2:	2110      	movs	r1, #16
 80002d4:	481f      	ldr	r0, [pc, #124]	; (8000354 <lcd_write+0xc4>)
 80002d6:	f000 fea2 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	08db      	lsrs	r3, r3, #3
 80002de:	b2db      	uxtb	r3, r3
 80002e0:	f003 0301 	and.w	r3, r3, #1
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	2120      	movs	r1, #32
 80002ea:	481a      	ldr	r0, [pc, #104]	; (8000354 <lcd_write+0xc4>)
 80002ec:	f000 fe97 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	091b      	lsrs	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	461a      	mov	r2, r3
 80002fe:	2140      	movs	r1, #64	; 0x40
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <lcd_write+0xc4>)
 8000302:	f000 fe8c 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	095b      	lsrs	r3, r3, #5
 800030a:	b2db      	uxtb	r3, r3
 800030c:	f003 0301 	and.w	r3, r3, #1
 8000310:	b2db      	uxtb	r3, r3
 8000312:	461a      	mov	r2, r3
 8000314:	2180      	movs	r1, #128	; 0x80
 8000316:	480f      	ldr	r0, [pc, #60]	; (8000354 <lcd_write+0xc4>)
 8000318:	f000 fe81 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	099b      	lsrs	r3, r3, #6
 8000320:	b2db      	uxtb	r3, r3
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	b2db      	uxtb	r3, r3
 8000328:	461a      	mov	r2, r3
 800032a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032e:	4809      	ldr	r0, [pc, #36]	; (8000354 <lcd_write+0xc4>)
 8000330:	f000 fe75 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	09db      	lsrs	r3, r3, #7
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <lcd_write+0xc4>)
 8000342:	f000 fe6c 	bl	800101e <HAL_GPIO_WritePin>
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800
 8000354:	40010c00 	.word	0x40010c00

08000358 <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000362:	2200      	movs	r2, #0
 8000364:	2180      	movs	r1, #128	; 0x80
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <lcd_writeCom+0x58>)
 8000368:	f000 fe59 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	2140      	movs	r1, #64	; 0x40
 8000370:	480f      	ldr	r0, [pc, #60]	; (80003b0 <lcd_writeCom+0x58>)
 8000372:	f000 fe54 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2120      	movs	r1, #32
 800037a:	480d      	ldr	r0, [pc, #52]	; (80003b0 <lcd_writeCom+0x58>)
 800037c:	f000 fe4f 	bl	800101e <HAL_GPIO_WritePin>

	lcd_write(com);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff84 	bl	8000290 <lcd_write>
	HAL_Delay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f000 fb95 	bl	8000ab8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2180      	movs	r1, #128	; 0x80
 8000392:	4807      	ldr	r0, [pc, #28]	; (80003b0 <lcd_writeCom+0x58>)
 8000394:	f000 fe43 	bl	800101e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000398:	2001      	movs	r0, #1
 800039a:	f000 fb8d 	bl	8000ab8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2180      	movs	r1, #128	; 0x80
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <lcd_writeCom+0x58>)
 80003a4:	f000 fe3b 	bl	800101e <HAL_GPIO_WritePin>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40010800 	.word	0x40010800

080003b4 <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80003be:	2200      	movs	r2, #0
 80003c0:	2180      	movs	r1, #128	; 0x80
 80003c2:	4812      	ldr	r0, [pc, #72]	; (800040c <lcd_writeData+0x58>)
 80003c4:	f000 fe2b 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2140      	movs	r1, #64	; 0x40
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <lcd_writeData+0x58>)
 80003ce:	f000 fe26 	bl	800101e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2120      	movs	r1, #32
 80003d6:	480d      	ldr	r0, [pc, #52]	; (800040c <lcd_writeData+0x58>)
 80003d8:	f000 fe21 	bl	800101e <HAL_GPIO_WritePin>

	lcd_write(data);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff56 	bl	8000290 <lcd_write>
	HAL_Delay(1);
 80003e4:	2001      	movs	r0, #1
 80003e6:	f000 fb67 	bl	8000ab8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80003ea:	2201      	movs	r2, #1
 80003ec:	2180      	movs	r1, #128	; 0x80
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <lcd_writeData+0x58>)
 80003f0:	f000 fe15 	bl	800101e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80003f4:	2001      	movs	r0, #1
 80003f6:	f000 fb5f 	bl	8000ab8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	4803      	ldr	r0, [pc, #12]	; (800040c <lcd_writeData+0x58>)
 8000400:	f000 fe0d 	bl	800101e <HAL_GPIO_WritePin>
}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	40010800 	.word	0x40010800

08000410 <lcd_init>:

void lcd_init(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 8000414:	2038      	movs	r0, #56	; 0x38
 8000416:	f7ff ff9f 	bl	8000358 <lcd_writeCom>
	lcd_writeCom(0x0c);
 800041a:	200c      	movs	r0, #12
 800041c:	f7ff ff9c 	bl	8000358 <lcd_writeCom>
	lcd_writeCom(0x06);
 8000420:	2006      	movs	r0, #6
 8000422:	f7ff ff99 	bl	8000358 <lcd_writeCom>
	lcd_writeCom(0x01);
 8000426:	2001      	movs	r0, #1
 8000428:	f7ff ff96 	bl	8000358 <lcd_writeCom>
	lcd_writeCom(0X80);
 800042c:	2080      	movs	r0, #128	; 0x80
 800042e:	f7ff ff93 	bl	8000358 <lcd_writeCom>
}
 8000432:	bf00      	nop
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <lcd_show>:

void lcd_show(uint32_t result)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	lcd_writeData((result / 1000)+48);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a39      	ldr	r2, [pc, #228]	; (8000528 <lcd_show+0xf0>)
 8000444:	fba2 2303 	umull	r2, r3, r2, r3
 8000448:	099b      	lsrs	r3, r3, #6
 800044a:	b2db      	uxtb	r3, r3
 800044c:	3330      	adds	r3, #48	; 0x30
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ffaf 	bl	80003b4 <lcd_writeData>
	lcd_writeData('.');
 8000456:	202e      	movs	r0, #46	; 0x2e
 8000458:	f7ff ffac 	bl	80003b4 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	4b32      	ldr	r3, [pc, #200]	; (8000528 <lcd_show+0xf0>)
 8000460:	fba3 1302 	umull	r1, r3, r3, r2
 8000464:	099b      	lsrs	r3, r3, #6
 8000466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800046a:	fb01 f303 	mul.w	r3, r1, r3
 800046e:	1ad3      	subs	r3, r2, r3
 8000470:	4a2e      	ldr	r2, [pc, #184]	; (800052c <lcd_show+0xf4>)
 8000472:	fba2 2303 	umull	r2, r3, r2, r3
 8000476:	095b      	lsrs	r3, r3, #5
 8000478:	b2db      	uxtb	r3, r3
 800047a:	3330      	adds	r3, #48	; 0x30
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff ff98 	bl	80003b4 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	4b29      	ldr	r3, [pc, #164]	; (800052c <lcd_show+0xf4>)
 8000488:	fba3 1302 	umull	r1, r3, r3, r2
 800048c:	095b      	lsrs	r3, r3, #5
 800048e:	2164      	movs	r1, #100	; 0x64
 8000490:	fb01 f303 	mul.w	r3, r1, r3
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <lcd_show+0xf8>)
 8000498:	fba2 2303 	umull	r2, r3, r2, r3
 800049c:	08db      	lsrs	r3, r3, #3
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	3330      	adds	r3, #48	; 0x30
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff85 	bl	80003b4 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 80004aa:	6879      	ldr	r1, [r7, #4]
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <lcd_show+0xf8>)
 80004ae:	fba3 2301 	umull	r2, r3, r3, r1
 80004b2:	08da      	lsrs	r2, r3, #3
 80004b4:	4613      	mov	r3, r2
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	1aca      	subs	r2, r1, r3
 80004be:	b2d3      	uxtb	r3, r2
 80004c0:	3330      	adds	r3, #48	; 0x30
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff75 	bl	80003b4 <lcd_writeData>
	lcd_writeData('K');
 80004ca:	204b      	movs	r0, #75	; 0x4b
 80004cc:	f7ff ff72 	bl	80003b4 <lcd_writeData>
	lcd_writeData('G');
 80004d0:	2047      	movs	r0, #71	; 0x47
 80004d2:	f7ff ff6f 	bl	80003b4 <lcd_writeData>

	if((result>1800) && (result<10000))
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80004dc:	d920      	bls.n	8000520 <lcd_show+0xe8>
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d81b      	bhi.n	8000520 <lcd_show+0xe8>
	{
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004e8:	2100      	movs	r1, #0
 80004ea:	4812      	ldr	r0, [pc, #72]	; (8000534 <lcd_show+0xfc>)
 80004ec:	f001 fa5a 	bl	80019a4 <HAL_TIM_PWM_Start>

		lcd_writeCom(0x80|0x40);
 80004f0:	20c0      	movs	r0, #192	; 0xc0
 80004f2:	f7ff ff31 	bl	8000358 <lcd_writeCom>

		for(int i=0;i<strlen(string_overScale);i++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e009      	b.n	8000510 <lcd_show+0xd8>
		{
			lcd_writeData(string_overScale[i]);
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <lcd_show+0x100>)
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	4413      	add	r3, r2
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff55 	bl	80003b4 <lcd_writeData>
		for(int i=0;i<strlen(string_overScale);i++)
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	3301      	adds	r3, #1
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <lcd_show+0x100>)
 8000512:	f7ff fe1b 	bl	800014c <strlen>
 8000516:	4602      	mov	r2, r0
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	429a      	cmp	r2, r3
 800051c:	d8ee      	bhi.n	80004fc <lcd_show+0xc4>
		}
		while(1);
 800051e:	e7fe      	b.n	800051e <lcd_show+0xe6>
	}
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	10624dd3 	.word	0x10624dd3
 800052c:	51eb851f 	.word	0x51eb851f
 8000530:	cccccccd 	.word	0xcccccccd
 8000534:	2000004c 	.word	0x2000004c
 8000538:	20000004 	.word	0x20000004

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fa57 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f82f 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f8eb 	bl	8000724 <MX_GPIO_Init>
  MX_TIM2_Init();
 800054e:	f000 f871 	bl	8000634 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_EXTI_GetHandle(&exti1, EXTI_LINE_1);
 8000552:	4912      	ldr	r1, [pc, #72]	; (800059c <main+0x60>)
 8000554:	4812      	ldr	r0, [pc, #72]	; (80005a0 <main+0x64>)
 8000556:	f000 fbde 	bl	8000d16 <HAL_EXTI_GetHandle>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_init();
 800055a:	f7ff ff59 	bl	8000410 <lcd_init>

	  for(int i=0;i<strlen(string_WEIGHT);i++)
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e009      	b.n	8000578 <main+0x3c>
	  {
		  lcd_writeData(string_WEIGHT[i]);
 8000564:	4a0f      	ldr	r2, [pc, #60]	; (80005a4 <main+0x68>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff21 	bl	80003b4 <lcd_writeData>
	  for(int i=0;i<strlen(string_WEIGHT);i++)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	480a      	ldr	r0, [pc, #40]	; (80005a4 <main+0x68>)
 800057a:	f7ff fde7 	bl	800014c <strlen>
 800057e:	4602      	mov	r2, r0
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	429a      	cmp	r2, r3
 8000584:	d8ee      	bhi.n	8000564 <main+0x28>
	  }

	  lcd_show(convert());
 8000586:	f7ff fe71 	bl	800026c <convert>
 800058a:	4603      	mov	r3, r0
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ff53 	bl	8000438 <lcd_show>


	  HAL_Delay(500);
 8000592:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000596:	f000 fa8f 	bl	8000ab8 <HAL_Delay>
	  lcd_init();
 800059a:	e7de      	b.n	800055a <main+0x1e>
 800059c:	06000001 	.word	0x06000001
 80005a0:	20000044 	.word	0x20000044
 80005a4:	20000014 	.word	0x20000014

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	2228      	movs	r2, #40	; 0x28
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 ff32 	bl	8002420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ca:	2301      	movs	r3, #1
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005dc:	2302      	movs	r3, #2
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0318 	add.w	r3, r7, #24
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fd45 	bl	8001080 <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005fc:	f000 f918 	bl	8000830 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f000 ffb0 	bl	8001580 <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000626:	f000 f903 	bl	8000830 <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3740      	adds	r7, #64	; 0x40
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08e      	sub	sp, #56	; 0x38
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_TIM2_Init+0xec>)
 8000666:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800066a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <MX_TIM2_Init+0xec>)
 800066e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000672:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_TIM2_Init+0xec>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800067a:	4b29      	ldr	r3, [pc, #164]	; (8000720 <MX_TIM2_Init+0xec>)
 800067c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000680:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000682:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MX_TIM2_Init+0xec>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_TIM2_Init+0xec>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068e:	4824      	ldr	r0, [pc, #144]	; (8000720 <MX_TIM2_Init+0xec>)
 8000690:	f001 f8e0 	bl	8001854 <HAL_TIM_Base_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800069a:	f000 f8c9 	bl	8000830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a8:	4619      	mov	r1, r3
 80006aa:	481d      	ldr	r0, [pc, #116]	; (8000720 <MX_TIM2_Init+0xec>)
 80006ac:	f001 fada 	bl	8001c64 <HAL_TIM_ConfigClockSource>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006b6:	f000 f8bb 	bl	8000830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006ba:	4819      	ldr	r0, [pc, #100]	; (8000720 <MX_TIM2_Init+0xec>)
 80006bc:	f001 f919 	bl	80018f2 <HAL_TIM_PWM_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006c6:	f000 f8b3 	bl	8000830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ce:	2300      	movs	r3, #0
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006d2:	f107 0320 	add.w	r3, r7, #32
 80006d6:	4619      	mov	r1, r3
 80006d8:	4811      	ldr	r0, [pc, #68]	; (8000720 <MX_TIM2_Init+0xec>)
 80006da:	f001 fe1f 	bl	800231c <HAL_TIMEx_MasterConfigSynchronization>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006e4:	f000 f8a4 	bl	8000830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5000;
 80006ec:	f241 3388 	movw	r3, #5000	; 0x1388
 80006f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <MX_TIM2_Init+0xec>)
 8000702:	f001 f9f1 	bl	8001ae8 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800070c:	f000 f890 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000710:	4803      	ldr	r0, [pc, #12]	; (8000720 <MX_TIM2_Init+0xec>)
 8000712:	f000 f8e1 	bl	80008d8 <HAL_TIM_MspPostInit>

}
 8000716:	bf00      	nop
 8000718:	3738      	adds	r7, #56	; 0x38
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	2000004c 	.word	0x2000004c

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0310 	add.w	r3, r7, #16
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000738:	4b39      	ldr	r3, [pc, #228]	; (8000820 <MX_GPIO_Init+0xfc>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a38      	ldr	r2, [pc, #224]	; (8000820 <MX_GPIO_Init+0xfc>)
 800073e:	f043 0320 	orr.w	r3, r3, #32
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b36      	ldr	r3, [pc, #216]	; (8000820 <MX_GPIO_Init+0xfc>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0320 	and.w	r3, r3, #32
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b33      	ldr	r3, [pc, #204]	; (8000820 <MX_GPIO_Init+0xfc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a32      	ldr	r2, [pc, #200]	; (8000820 <MX_GPIO_Init+0xfc>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <MX_GPIO_Init+0xfc>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <MX_GPIO_Init+0xfc>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	4a2c      	ldr	r2, [pc, #176]	; (8000820 <MX_GPIO_Init+0xfc>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	6193      	str	r3, [r2, #24]
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <MX_GPIO_Init+0xfc>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HX711_ADDO_Pin|HX711_ADSK_Pin|LCD_WR_Pin|LCD_RD_Pin
 8000780:	2200      	movs	r2, #0
 8000782:	f248 01f8 	movw	r1, #33016	; 0x80f8
 8000786:	4827      	ldr	r0, [pc, #156]	; (8000824 <MX_GPIO_Init+0x100>)
 8000788:	f000 fc49 	bl	800101e <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 800078c:	2200      	movs	r2, #0
 800078e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000792:	4825      	ldr	r0, [pc, #148]	; (8000828 <MX_GPIO_Init+0x104>)
 8000794:	f000 fc43 	bl	800101e <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : calibration_Pin */
  GPIO_InitStruct.Pin = calibration_Pin;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_GPIO_Init+0x108>)
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(calibration_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4619      	mov	r1, r3
 80007aa:	481e      	ldr	r0, [pc, #120]	; (8000824 <MX_GPIO_Init+0x100>)
 80007ac:	f000 fac6 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_ADDO_Pin */
  GPIO_InitStruct.Pin = HX711_ADDO_Pin;
 80007b0:	2308      	movs	r3, #8
 80007b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007b4:	2311      	movs	r3, #17
 80007b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(HX711_ADDO_GPIO_Port, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_GPIO_Init+0x100>)
 80007c8:	f000 fab8 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : HX711_ADSK_Pin LCD_WR_Pin LCD_RD_Pin LCD_E_Pin
                           LCD_D0_Pin */
  GPIO_InitStruct.Pin = HX711_ADSK_Pin|LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin
 80007cc:	f248 03f0 	movw	r3, #33008	; 0x80f0
 80007d0:	613b      	str	r3, [r7, #16]
                          |LCD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2302      	movs	r3, #2
 80007dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 0310 	add.w	r3, r7, #16
 80007e2:	4619      	mov	r1, r3
 80007e4:	480f      	ldr	r0, [pc, #60]	; (8000824 <MX_GPIO_Init+0x100>)
 80007e6:	f000 faa9 	bl	8000d3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 80007ea:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80007ee:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f0:	2301      	movs	r3, #1
 80007f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2302      	movs	r3, #2
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fc:	f107 0310 	add.w	r3, r7, #16
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_GPIO_Init+0x104>)
 8000804:	f000 fa9a 	bl	8000d3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2007      	movs	r0, #7
 800080e:	f000 fa4c 	bl	8000caa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000812:	2007      	movs	r0, #7
 8000814:	f000 fa65 	bl	8000ce2 <HAL_NVIC_EnableIRQ>

}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40021000 	.word	0x40021000
 8000824:	40010800 	.word	0x40010800
 8000828:	40010c00 	.word	0x40010c00
 800082c:	10210000 	.word	0x10210000

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008b0:	d10b      	bne.n	80008ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_TIM_Base_MspInit+0x34>)
 80008b4:	69db      	ldr	r3, [r3, #28]
 80008b6:	4a07      	ldr	r2, [pc, #28]	; (80008d4 <HAL_TIM_Base_MspInit+0x34>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	61d3      	str	r3, [r2, #28]
 80008be:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <HAL_TIM_Base_MspInit+0x34>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	60fb      	str	r3, [r7, #12]
 80008c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008ca:	bf00      	nop
 80008cc:	3714      	adds	r7, #20
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008f6:	d117      	bne.n	8000928 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_TIM_MspPostInit+0x58>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ALERM_LIGHT_Pin;
 8000910:	2301      	movs	r3, #1
 8000912:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2302      	movs	r3, #2
 800091a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ALERM_LIGHT_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 0310 	add.w	r3, r7, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4804      	ldr	r0, [pc, #16]	; (8000934 <HAL_TIM_MspPostInit+0x5c>)
 8000924:	f000 fa0a 	bl	8000d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000928:	bf00      	nop
 800092a:	3720      	adds	r7, #32
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800

08000938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <HardFault_Handler+0x4>

0800094a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <MemManage_Handler+0x4>

08000950 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <BusFault_Handler+0x4>

08000956 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <UsageFault_Handler+0x4>

0800095c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000984:	f000 f87c 	bl	8000a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}

0800098c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000990:	2002      	movs	r0, #2
 8000992:	f000 fb5d 	bl	8001050 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
	...

080009a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009aa:	e003      	b.n	80009b4 <LoopCopyDataInit>

080009ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009b2:	3104      	adds	r1, #4

080009b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009b4:	480a      	ldr	r0, [pc, #40]	; (80009e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009b6:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009bc:	d3f6      	bcc.n	80009ac <CopyDataInit>
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009c0:	e002      	b.n	80009c8 <LoopFillZerobss>

080009c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009c4:	f842 3b04 	str.w	r3, [r2], #4

080009c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009c8:	4b08      	ldr	r3, [pc, #32]	; (80009ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009cc:	d3f9      	bcc.n	80009c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ce:	f7ff ffe4 	bl	800099a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009d2:	f001 fd01 	bl	80023d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d6:	f7ff fdb1 	bl	800053c <main>
  bx lr
 80009da:	4770      	bx	lr
  ldr r3, =_sidata
 80009dc:	08002474 	.word	0x08002474
  ldr r0, =_sdata
 80009e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009e4:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 80009e8:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 80009ec:	20000098 	.word	0x20000098

080009f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC1_2_IRQHandler>
	...

080009f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b08      	ldr	r3, [pc, #32]	; (8000a1c <HAL_Init+0x28>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <HAL_Init+0x28>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f945 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f000 f808 	bl	8000a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a10:	f7ff ff14 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40022000 	.word	0x40022000

08000a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <HAL_InitTick+0x54>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x58>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f95d 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e00e      	b.n	8000a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d80a      	bhi.n	8000a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a54:	2200      	movs	r2, #0
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	f000 f925 	bl	8000caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a60:	4a06      	ldr	r2, [pc, #24]	; (8000a7c <HAL_InitTick+0x5c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e000      	b.n	8000a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000001c 	.word	0x2000001c
 8000a78:	20000024 	.word	0x20000024
 8000a7c:	20000020 	.word	0x20000020

08000a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_IncTick+0x1c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4413      	add	r3, r2
 8000a90:	4a03      	ldr	r2, [pc, #12]	; (8000aa0 <HAL_IncTick+0x20>)
 8000a92:	6013      	str	r3, [r2, #0]
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	20000024 	.word	0x20000024
 8000aa0:	20000094 	.word	0x20000094

08000aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <HAL_GetTick+0x10>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000094 	.word	0x20000094

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff fff0 	bl	8000aa4 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_Delay+0x40>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffe0 	bl	8000aa4 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000024 	.word	0x20000024

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4906      	ldr	r1, [pc, #24]	; (8000b94 <__NVIC_EnableIRQ+0x34>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c60:	d301      	bcc.n	8000c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00f      	b.n	8000c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <SysTick_Config+0x40>)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6e:	210f      	movs	r1, #15
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f7ff ff90 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <SysTick_Config+0x40>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <SysTick_Config+0x40>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	e000e010 	.word	0xe000e010

08000c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f7ff ff2d 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b086      	sub	sp, #24
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cbc:	f7ff ff42 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc2:	687a      	ldr	r2, [r7, #4]
 8000cc4:	68b9      	ldr	r1, [r7, #8]
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	f7ff ff90 	bl	8000bec <NVIC_EncodePriority>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff ff5f 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff35 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffa2 	bl	8000c50 <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e003      	b.n	8000d32 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	683a      	ldr	r2, [r7, #0]
 8000d2e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000d30:	2300      	movs	r3, #0
  }
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr

08000d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4e:	e127      	b.n	8000fa0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d50:	2201      	movs	r2, #1
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	69fa      	ldr	r2, [r7, #28]
 8000d60:	4013      	ands	r3, r2
 8000d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	f040 8116 	bne.w	8000f9a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b12      	cmp	r3, #18
 8000d74:	d034      	beq.n	8000de0 <HAL_GPIO_Init+0xa4>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d80d      	bhi.n	8000d96 <HAL_GPIO_Init+0x5a>
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d02b      	beq.n	8000dd6 <HAL_GPIO_Init+0x9a>
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d804      	bhi.n	8000d8c <HAL_GPIO_Init+0x50>
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d031      	beq.n	8000dea <HAL_GPIO_Init+0xae>
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d01c      	beq.n	8000dc4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d8a:	e048      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d043      	beq.n	8000e18 <HAL_GPIO_Init+0xdc>
 8000d90:	2b11      	cmp	r3, #17
 8000d92:	d01b      	beq.n	8000dcc <HAL_GPIO_Init+0x90>
          break;
 8000d94:	e043      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d96:	4a89      	ldr	r2, [pc, #548]	; (8000fbc <HAL_GPIO_Init+0x280>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d026      	beq.n	8000dea <HAL_GPIO_Init+0xae>
 8000d9c:	4a87      	ldr	r2, [pc, #540]	; (8000fbc <HAL_GPIO_Init+0x280>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d806      	bhi.n	8000db0 <HAL_GPIO_Init+0x74>
 8000da2:	4a87      	ldr	r2, [pc, #540]	; (8000fc0 <HAL_GPIO_Init+0x284>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d020      	beq.n	8000dea <HAL_GPIO_Init+0xae>
 8000da8:	4a86      	ldr	r2, [pc, #536]	; (8000fc4 <HAL_GPIO_Init+0x288>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d01d      	beq.n	8000dea <HAL_GPIO_Init+0xae>
          break;
 8000dae:	e036      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000db0:	4a85      	ldr	r2, [pc, #532]	; (8000fc8 <HAL_GPIO_Init+0x28c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d019      	beq.n	8000dea <HAL_GPIO_Init+0xae>
 8000db6:	4a85      	ldr	r2, [pc, #532]	; (8000fcc <HAL_GPIO_Init+0x290>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d016      	beq.n	8000dea <HAL_GPIO_Init+0xae>
 8000dbc:	4a84      	ldr	r2, [pc, #528]	; (8000fd0 <HAL_GPIO_Init+0x294>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xae>
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e028      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e023      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01e      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e019      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e012      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e008      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e002      	b.n	8000e1e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2bff      	cmp	r3, #255	; 0xff
 8000e22:	d801      	bhi.n	8000e28 <HAL_GPIO_Init+0xec>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	e001      	b.n	8000e2c <HAL_GPIO_Init+0xf0>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3304      	adds	r3, #4
 8000e2c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	2bff      	cmp	r3, #255	; 0xff
 8000e32:	d802      	bhi.n	8000e3a <HAL_GPIO_Init+0xfe>
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	e002      	b.n	8000e40 <HAL_GPIO_Init+0x104>
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	3b08      	subs	r3, #8
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	210f      	movs	r1, #15
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	401a      	ands	r2, r3
 8000e52:	6a39      	ldr	r1, [r7, #32]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 8096 	beq.w	8000f9a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e6e:	4b59      	ldr	r3, [pc, #356]	; (8000fd4 <HAL_GPIO_Init+0x298>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a58      	ldr	r2, [pc, #352]	; (8000fd4 <HAL_GPIO_Init+0x298>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <HAL_GPIO_Init+0x298>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e86:	4a54      	ldr	r2, [pc, #336]	; (8000fd8 <HAL_GPIO_Init+0x29c>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	f003 0303 	and.w	r3, r3, #3
 8000e9a:	009b      	lsls	r3, r3, #2
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <HAL_GPIO_Init+0x2a0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x19e>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a4a      	ldr	r2, [pc, #296]	; (8000fe0 <HAL_GPIO_Init+0x2a4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x19a>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <HAL_GPIO_Init+0x2a8>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x196>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_GPIO_Init+0x2ac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x192>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x1a0>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1a0>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1a0>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1a0>
 8000eda:	2300      	movs	r3, #0
 8000edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ede:	f002 0203 	and.w	r2, r2, #3
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eec:	493a      	ldr	r1, [pc, #232]	; (8000fd8 <HAL_GPIO_Init+0x29c>)
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	4938      	ldr	r1, [pc, #224]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	600b      	str	r3, [r1, #0]
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f14:	4b35      	ldr	r3, [pc, #212]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4933      	ldr	r1, [pc, #204]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	492e      	ldr	r1, [pc, #184]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	604b      	str	r3, [r1, #4]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4929      	ldr	r1, [pc, #164]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f56:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	4924      	ldr	r1, [pc, #144]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	608b      	str	r3, [r1, #8]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	491f      	ldr	r1, [pc, #124]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f80:	68da      	ldr	r2, [r3, #12]
 8000f82:	491a      	ldr	r1, [pc, #104]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	60cb      	str	r3, [r1, #12]
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	4915      	ldr	r1, [pc, #84]	; (8000fec <HAL_GPIO_Init+0x2b0>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	fa22 f303 	lsr.w	r3, r2, r3
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f47f aed0 	bne.w	8000d50 <HAL_GPIO_Init+0x14>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	372c      	adds	r7, #44	; 0x2c
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	10210000 	.word	0x10210000
 8000fc0:	10110000 	.word	0x10110000
 8000fc4:	10120000 	.word	0x10120000
 8000fc8:	10310000 	.word	0x10310000
 8000fcc:	10320000 	.word	0x10320000
 8000fd0:	10220000 	.word	0x10220000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	40011000 	.word	0x40011000
 8000fe8:	40011400 	.word	0x40011400
 8000fec:	40010400 	.word	0x40010400

08000ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	4013      	ands	r3, r2
 8001004:	2b00      	cmp	r3, #0
 8001006:	d002      	beq.n	800100e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001008:	2301      	movs	r3, #1
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001012:	7bfb      	ldrb	r3, [r7, #15]
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr

0800101e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
 8001026:	460b      	mov	r3, r1
 8001028:	807b      	strh	r3, [r7, #2]
 800102a:	4613      	mov	r3, r2
 800102c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800102e:	787b      	ldrb	r3, [r7, #1]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001034:	887a      	ldrh	r2, [r7, #2]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800103a:	e003      	b.n	8001044 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800103c:	887b      	ldrh	r3, [r7, #2]
 800103e:	041a      	lsls	r2, r3, #16
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	611a      	str	r2, [r3, #16]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800105a:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800105c:	695a      	ldr	r2, [r3, #20]
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	4013      	ands	r3, r2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001068:	88fb      	ldrh	r3, [r7, #6]
 800106a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800106c:	88fb      	ldrh	r3, [r7, #6]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f874 	bl	800015c <HAL_GPIO_EXTI_Callback>
  }
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40010400 	.word	0x40010400

08001080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e26c      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8087 	beq.w	80011ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010a0:	4b92      	ldr	r3, [pc, #584]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d00c      	beq.n	80010c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010ac:	4b8f      	ldr	r3, [pc, #572]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 030c 	and.w	r3, r3, #12
 80010b4:	2b08      	cmp	r3, #8
 80010b6:	d112      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
 80010b8:	4b8c      	ldr	r3, [pc, #560]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d10b      	bne.n	80010de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c6:	4b89      	ldr	r3, [pc, #548]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d06c      	beq.n	80011ac <HAL_RCC_OscConfig+0x12c>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d168      	bne.n	80011ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e246      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e6:	d106      	bne.n	80010f6 <HAL_RCC_OscConfig+0x76>
 80010e8:	4b80      	ldr	r3, [pc, #512]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a7f      	ldr	r2, [pc, #508]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80010ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e02e      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d10c      	bne.n	8001118 <HAL_RCC_OscConfig+0x98>
 80010fe:	4b7b      	ldr	r3, [pc, #492]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a7a      	ldr	r2, [pc, #488]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	4b78      	ldr	r3, [pc, #480]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a77      	ldr	r2, [pc, #476]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	e01d      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0xbc>
 8001122:	4b72      	ldr	r3, [pc, #456]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a71      	ldr	r2, [pc, #452]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	4b6f      	ldr	r3, [pc, #444]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a6e      	ldr	r2, [pc, #440]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e00b      	b.n	8001154 <HAL_RCC_OscConfig+0xd4>
 800113c:	4b6b      	ldr	r3, [pc, #428]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a6a      	ldr	r2, [pc, #424]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	4b68      	ldr	r3, [pc, #416]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a67      	ldr	r2, [pc, #412]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 800114e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d013      	beq.n	8001184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115c:	f7ff fca2 	bl	8000aa4 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001164:	f7ff fc9e 	bl	8000aa4 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b64      	cmp	r3, #100	; 0x64
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e1fa      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b5d      	ldr	r3, [pc, #372]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0xe4>
 8001182:	e014      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001184:	f7ff fc8e 	bl	8000aa4 <HAL_GetTick>
 8001188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fc8a 	bl	8000aa4 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b64      	cmp	r3, #100	; 0x64
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e1e6      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800119e:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f0      	bne.n	800118c <HAL_RCC_OscConfig+0x10c>
 80011aa:	e000      	b.n	80011ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d063      	beq.n	8001282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011ba:	4b4c      	ldr	r3, [pc, #304]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 030c 	and.w	r3, r3, #12
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d00b      	beq.n	80011de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011c6:	4b49      	ldr	r3, [pc, #292]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 030c 	and.w	r3, r3, #12
 80011ce:	2b08      	cmp	r3, #8
 80011d0:	d11c      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
 80011d2:	4b46      	ldr	r3, [pc, #280]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d116      	bne.n	800120c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d005      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d001      	beq.n	80011f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e1ba      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4939      	ldr	r1, [pc, #228]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001206:	4313      	orrs	r3, r2
 8001208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800120a:	e03a      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d020      	beq.n	8001256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001214:	4b36      	ldr	r3, [pc, #216]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001216:	2201      	movs	r2, #1
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fc43 	bl	8000aa4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fc3f 	bl	8000aa4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e19b      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4927      	ldr	r1, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e015      	b.n	8001282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <HAL_RCC_OscConfig+0x270>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc22 	bl	8000aa4 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc1e 	bl	8000aa4 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e17a      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	2b00      	cmp	r3, #0
 800128c:	d03a      	beq.n	8001304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d019      	beq.n	80012ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 8001298:	2201      	movs	r2, #1
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fc02 	bl	8000aa4 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbfe 	bl	8000aa4 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e15a      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <HAL_RCC_OscConfig+0x26c>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0f0      	beq.n	80012a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012c2:	2001      	movs	r0, #1
 80012c4:	f000 faa8 	bl	8001818 <RCC_Delay>
 80012c8:	e01c      	b.n	8001304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <HAL_RCC_OscConfig+0x274>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d0:	f7ff fbe8 	bl	8000aa4 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d6:	e00f      	b.n	80012f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012d8:	f7ff fbe4 	bl	8000aa4 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d908      	bls.n	80012f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e140      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	42420000 	.word	0x42420000
 80012f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f8:	4b9e      	ldr	r3, [pc, #632]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1e9      	bne.n	80012d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	f000 80a6 	beq.w	800145e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001316:	4b97      	ldr	r3, [pc, #604]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d10d      	bne.n	800133e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b94      	ldr	r3, [pc, #592]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	69db      	ldr	r3, [r3, #28]
 8001326:	4a93      	ldr	r2, [pc, #588]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800132c:	61d3      	str	r3, [r2, #28]
 800132e:	4b91      	ldr	r3, [pc, #580]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800133a:	2301      	movs	r3, #1
 800133c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133e:	4b8e      	ldr	r3, [pc, #568]	; (8001578 <HAL_RCC_OscConfig+0x4f8>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800134a:	4b8b      	ldr	r3, [pc, #556]	; (8001578 <HAL_RCC_OscConfig+0x4f8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a8a      	ldr	r2, [pc, #552]	; (8001578 <HAL_RCC_OscConfig+0x4f8>)
 8001350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff fba5 	bl	8000aa4 <HAL_GetTick>
 800135a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff fba1 	bl	8000aa4 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b64      	cmp	r3, #100	; 0x64
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0fd      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001370:	4b81      	ldr	r3, [pc, #516]	; (8001578 <HAL_RCC_OscConfig+0x4f8>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d106      	bne.n	8001392 <HAL_RCC_OscConfig+0x312>
 8001384:	4b7b      	ldr	r3, [pc, #492]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a7a      	ldr	r2, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	e02d      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x334>
 800139a:	4b76      	ldr	r3, [pc, #472]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 800139c:	6a1b      	ldr	r3, [r3, #32]
 800139e:	4a75      	ldr	r2, [pc, #468]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6213      	str	r3, [r2, #32]
 80013a6:	4b73      	ldr	r3, [pc, #460]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a72      	ldr	r2, [pc, #456]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013ac:	f023 0304 	bic.w	r3, r3, #4
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	e01c      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b05      	cmp	r3, #5
 80013ba:	d10c      	bne.n	80013d6 <HAL_RCC_OscConfig+0x356>
 80013bc:	4b6d      	ldr	r3, [pc, #436]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a6c      	ldr	r2, [pc, #432]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6213      	str	r3, [r2, #32]
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	4a69      	ldr	r2, [pc, #420]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6213      	str	r3, [r2, #32]
 80013d4:	e00b      	b.n	80013ee <HAL_RCC_OscConfig+0x36e>
 80013d6:	4b67      	ldr	r3, [pc, #412]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a66      	ldr	r2, [pc, #408]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d015      	beq.n	8001422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f6:	f7ff fb55 	bl	8000aa4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013fc:	e00a      	b.n	8001414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013fe:	f7ff fb51 	bl	8000aa4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	f241 3288 	movw	r2, #5000	; 0x1388
 800140c:	4293      	cmp	r3, r2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0ab      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001414:	4b57      	ldr	r3, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0ee      	beq.n	80013fe <HAL_RCC_OscConfig+0x37e>
 8001420:	e014      	b.n	800144c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001422:	f7ff fb3f 	bl	8000aa4 <HAL_GetTick>
 8001426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001428:	e00a      	b.n	8001440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800142a:	f7ff fb3b 	bl	8000aa4 <HAL_GetTick>
 800142e:	4602      	mov	r2, r0
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	f241 3288 	movw	r2, #5000	; 0x1388
 8001438:	4293      	cmp	r3, r2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e095      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001440:	4b4c      	ldr	r3, [pc, #304]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1ee      	bne.n	800142a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d105      	bne.n	800145e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001452:	4b48      	ldr	r3, [pc, #288]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a47      	ldr	r2, [pc, #284]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800145c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 8081 	beq.w	800156a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001468:	4b42      	ldr	r3, [pc, #264]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d061      	beq.n	8001538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d146      	bne.n	800150a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147c:	4b3f      	ldr	r3, [pc, #252]	; (800157c <HAL_RCC_OscConfig+0x4fc>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001482:	f7ff fb0f 	bl	8000aa4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148a:	f7ff fb0b 	bl	8000aa4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e067      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149c:	4b35      	ldr	r3, [pc, #212]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1f0      	bne.n	800148a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b0:	d108      	bne.n	80014c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	492d      	ldr	r1, [pc, #180]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a19      	ldr	r1, [r3, #32]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d4:	430b      	orrs	r3, r1
 80014d6:	4927      	ldr	r1, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014dc:	4b27      	ldr	r3, [pc, #156]	; (800157c <HAL_RCC_OscConfig+0x4fc>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fadf 	bl	8000aa4 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ea:	f7ff fadb 	bl	8000aa4 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e037      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014fc:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x46a>
 8001508:	e02f      	b.n	800156a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <HAL_RCC_OscConfig+0x4fc>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fac8 	bl	8000aa4 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fac4 	bl	8000aa4 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e020      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x498>
 8001536:	e018      	b.n	800156a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e013      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001544:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <HAL_RCC_OscConfig+0x4f4>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	429a      	cmp	r2, r3
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001562:	429a      	cmp	r2, r3
 8001564:	d001      	beq.n	800156a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	40021000 	.word	0x40021000
 8001578:	40007000 	.word	0x40007000
 800157c:	42420060 	.word	0x42420060

08001580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d101      	bne.n	8001594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e0d0      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001594:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d910      	bls.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 0207 	bic.w	r2, r3, #7
 80015aa:	4965      	ldr	r1, [pc, #404]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	4313      	orrs	r3, r2
 80015b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b2:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0307 	and.w	r3, r3, #7
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d001      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e0b8      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d005      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015dc:	4b59      	ldr	r3, [pc, #356]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	4a58      	ldr	r2, [pc, #352]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0308 	and.w	r3, r3, #8
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a52      	ldr	r2, [pc, #328]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001600:	4b50      	ldr	r3, [pc, #320]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	494d      	ldr	r1, [pc, #308]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	d040      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d107      	bne.n	8001636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d115      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e07f      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d107      	bne.n	800164e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d109      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e073      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e06b      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165e:	4b39      	ldr	r3, [pc, #228]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f023 0203 	bic.w	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4936      	ldr	r1, [pc, #216]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa18 	bl	8000aa4 <HAL_GetTick>
 8001674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff fa14 	bl	8000aa4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e053      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168e:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 020c 	and.w	r2, r3, #12
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d1eb      	bne.n	8001678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0307 	and.w	r3, r3, #7
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d210      	bcs.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 0207 	bic.w	r2, r3, #7
 80016b6:	4922      	ldr	r1, [pc, #136]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_RCC_ClockConfig+0x1c0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d001      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e032      	b.n	8001736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0304 	and.w	r3, r3, #4
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d008      	beq.n	80016ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	4916      	ldr	r1, [pc, #88]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d009      	beq.n	800170e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	490e      	ldr	r1, [pc, #56]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800170e:	f000 f821 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 8001712:	4601      	mov	r1, r0
 8001714:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_ClockConfig+0x1c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	fa21 f303 	lsr.w	r3, r1, r3
 8001726:	4a09      	ldr	r2, [pc, #36]	; (800174c <HAL_RCC_ClockConfig+0x1cc>)
 8001728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_ClockConfig+0x1d0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff f976 	bl	8000a20 <HAL_InitTick>

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40022000 	.word	0x40022000
 8001744:	40021000 	.word	0x40021000
 8001748:	0800245c 	.word	0x0800245c
 800174c:	2000001c 	.word	0x2000001c
 8001750:	20000020 	.word	0x20000020

08001754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	b490      	push	{r4, r7}
 8001756:	b08a      	sub	sp, #40	; 0x28
 8001758:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_RCC_GetSysClockFreq+0xb0>)
 800175c:	1d3c      	adds	r4, r7, #4
 800175e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001764:	4b28      	ldr	r3, [pc, #160]	; (8001808 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b04      	cmp	r3, #4
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x40>
 800178e:	2b08      	cmp	r3, #8
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x46>
 8001792:	e02d      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001794:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001796:	623b      	str	r3, [r7, #32]
      break;
 8001798:	e02d      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	0c9b      	lsrs	r3, r3, #18
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017a6:	4413      	add	r3, r2
 80017a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017ac:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d013      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_RCC_GetSysClockFreq+0xb8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	0c5b      	lsrs	r3, r3, #17
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017c6:	4413      	add	r3, r2
 80017c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d2:	fb02 f203 	mul.w	r2, r2, r3
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	e004      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017e4:	fb02 f303 	mul.w	r3, r2, r3
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	623b      	str	r3, [r7, #32]
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017f2:	623b      	str	r3, [r7, #32]
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	6a3b      	ldr	r3, [r7, #32]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3728      	adds	r7, #40	; 0x28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc90      	pop	{r4, r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	08002448 	.word	0x08002448
 8001808:	08002458 	.word	0x08002458
 800180c:	40021000 	.word	0x40021000
 8001810:	007a1200 	.word	0x007a1200
 8001814:	003d0900 	.word	0x003d0900

08001818 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <RCC_Delay+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <RCC_Delay+0x38>)
 8001826:	fba2 2303 	umull	r2, r3, r2, r3
 800182a:	0a5b      	lsrs	r3, r3, #9
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001834:	bf00      	nop
  }
  while (Delay --);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1e5a      	subs	r2, r3, #1
 800183a:	60fa      	str	r2, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f9      	bne.n	8001834 <RCC_Delay+0x1c>
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000001c 	.word	0x2000001c
 8001850:	10624dd3 	.word	0x10624dd3

08001854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff f810 	bl	80008a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 fa9e 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d101      	bne.n	8001904 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e041      	b.n	8001988 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d106      	bne.n	800191e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f000 f839 	bl	8001990 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2202      	movs	r2, #2
 8001922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	3304      	adds	r3, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4610      	mov	r0, r2
 8001932:	f000 fa4f 	bl	8001dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d109      	bne.n	80019c8 <HAL_TIM_PWM_Start+0x24>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b01      	cmp	r3, #1
 80019be:	bf14      	ite	ne
 80019c0:	2301      	movne	r3, #1
 80019c2:	2300      	moveq	r3, #0
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	e022      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	d109      	bne.n	80019e2 <HAL_TIM_PWM_Start+0x3e>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	bf14      	ite	ne
 80019da:	2301      	movne	r3, #1
 80019dc:	2300      	moveq	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	e015      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d109      	bne.n	80019fc <HAL_TIM_PWM_Start+0x58>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	bf14      	ite	ne
 80019f4:	2301      	movne	r3, #1
 80019f6:	2300      	moveq	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e008      	b.n	8001a0e <HAL_TIM_PWM_Start+0x6a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	bf14      	ite	ne
 8001a08:	2301      	movne	r3, #1
 8001a0a:	2300      	moveq	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e05e      	b.n	8001ad4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d104      	bne.n	8001a26 <HAL_TIM_PWM_Start+0x82>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a24:	e013      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d104      	bne.n	8001a36 <HAL_TIM_PWM_Start+0x92>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a34:	e00b      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d104      	bne.n	8001a46 <HAL_TIM_PWM_Start+0xa2>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a44:	e003      	b.n	8001a4e <HAL_TIM_PWM_Start+0xaa>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2202      	movs	r2, #2
 8001a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2201      	movs	r2, #1
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fc3c 	bl	80022d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_TIM_PWM_Start+0x138>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d107      	bne.n	8001a76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_TIM_PWM_Start+0x138>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00e      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a88:	d009      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_TIM_PWM_Start+0x13c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d004      	beq.n	8001a9e <HAL_TIM_PWM_Start+0xfa>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_TIM_PWM_Start+0x140>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d111      	bne.n	8001ac2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b06      	cmp	r3, #6
 8001aae:	d010      	beq.n	8001ad2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac0:	e007      	b.n	8001ad2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0201 	orr.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40012c00 	.word	0x40012c00
 8001ae0:	40000400 	.word	0x40000400
 8001ae4:	40000800 	.word	0x40000800

08001ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0ac      	b.n	8001c5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	f200 809f 	bhi.w	8001c50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001c51 	.word	0x08001c51
 8001b20:	08001c51 	.word	0x08001c51
 8001b24:	08001c51 	.word	0x08001c51
 8001b28:	08001b8d 	.word	0x08001b8d
 8001b2c:	08001c51 	.word	0x08001c51
 8001b30:	08001c51 	.word	0x08001c51
 8001b34:	08001c51 	.word	0x08001c51
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001c51 	.word	0x08001c51
 8001b40:	08001c51 	.word	0x08001c51
 8001b44:	08001c51 	.word	0x08001c51
 8001b48:	08001c0f 	.word	0x08001c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f9a0 	bl	8001e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6999      	ldr	r1, [r3, #24]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	619a      	str	r2, [r3, #24]
      break;
 8001b8a:	e062      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 f9e6 	bl	8001f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6999      	ldr	r1, [r3, #24]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	021a      	lsls	r2, r3, #8
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
      break;
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fa2f 	bl	8002038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0208 	orr.w	r2, r2, #8
 8001be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
      break;
 8001c0c:	e021      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fa79 	bl	800210c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69d9      	ldr	r1, [r3, #28]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
      break;
 8001c4e:	e000      	b.n	8001c52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001c50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_TIM_ConfigClockSource+0x18>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0a6      	b.n	8001dca <HAL_TIM_ConfigClockSource+0x166>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001c9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ca2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2b40      	cmp	r3, #64	; 0x40
 8001cb2:	d067      	beq.n	8001d84 <HAL_TIM_ConfigClockSource+0x120>
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d80b      	bhi.n	8001cd0 <HAL_TIM_ConfigClockSource+0x6c>
 8001cb8:	2b10      	cmp	r3, #16
 8001cba:	d073      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d802      	bhi.n	8001cc6 <HAL_TIM_ConfigClockSource+0x62>
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d06f      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001cc4:	e078      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d06c      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
 8001cca:	2b30      	cmp	r3, #48	; 0x30
 8001ccc:	d06a      	beq.n	8001da4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8001cce:	e073      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001cd0:	2b70      	cmp	r3, #112	; 0x70
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_TIM_ConfigClockSource+0x8c>
 8001cd4:	2b70      	cmp	r3, #112	; 0x70
 8001cd6:	d804      	bhi.n	8001ce2 <HAL_TIM_ConfigClockSource+0x7e>
 8001cd8:	2b50      	cmp	r3, #80	; 0x50
 8001cda:	d033      	beq.n	8001d44 <HAL_TIM_ConfigClockSource+0xe0>
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d041      	beq.n	8001d64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8001ce0:	e06a      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	d066      	beq.n	8001db6 <HAL_TIM_ConfigClockSource+0x152>
 8001ce8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cec:	d017      	beq.n	8001d1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8001cee:	e063      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	f000 fac9 	bl	8002296 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	609a      	str	r2, [r3, #8]
      break;
 8001d1c:	e04c      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6899      	ldr	r1, [r3, #8]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	f000 fab2 	bl	8002296 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d40:	609a      	str	r2, [r3, #8]
      break;
 8001d42:	e039      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6818      	ldr	r0, [r3, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	461a      	mov	r2, r3
 8001d52:	f000 fa29 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2150      	movs	r1, #80	; 0x50
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fa80 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d62:	e029      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	6859      	ldr	r1, [r3, #4]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	461a      	mov	r2, r3
 8001d72:	f000 fa47 	bl	8002204 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2160      	movs	r1, #96	; 0x60
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f000 fa70 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001d82:	e019      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	461a      	mov	r2, r3
 8001d92:	f000 fa09 	bl	80021a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f000 fa60 	bl	8002262 <TIM_ITRx_SetConfig>
      break;
 8001da2:	e009      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4619      	mov	r1, r3
 8001dae:	4610      	mov	r0, r2
 8001db0:	f000 fa57 	bl	8002262 <TIM_ITRx_SetConfig>
        break;
 8001db4:	e000      	b.n	8001db8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8001db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a29      	ldr	r2, [pc, #164]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d00b      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d007      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <TIM_Base_SetConfig+0xbc>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d003      	beq.n	8001e04 <TIM_Base_SetConfig+0x30>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a25      	ldr	r2, [pc, #148]	; (8001e94 <TIM_Base_SetConfig+0xc0>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d108      	bne.n	8001e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a1c      	ldr	r2, [pc, #112]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00b      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e24:	d007      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <TIM_Base_SetConfig+0xbc>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d003      	beq.n	8001e36 <TIM_Base_SetConfig+0x62>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <TIM_Base_SetConfig+0xc0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d108      	bne.n	8001e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <TIM_Base_SetConfig+0xb8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d103      	bne.n	8001e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	615a      	str	r2, [r3, #20]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f023 0201 	bic.w	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	697a      	ldr	r2, [r7, #20]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a1c      	ldr	r2, [pc, #112]	; (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d10c      	bne.n	8001f0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f023 0308 	bic.w	r3, r3, #8
 8001efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <TIM_OC1_SetConfig+0xc8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d111      	bne.n	8001f3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	621a      	str	r2, [r3, #32]
}
 8001f54:	bf00      	nop
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40012c00 	.word	0x40012c00

08001f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	f023 0210 	bic.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f023 0320 	bic.w	r3, r3, #32
 8001fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a1d      	ldr	r2, [pc, #116]	; (8002034 <TIM_OC2_SetConfig+0xd0>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d10d      	bne.n	8001fe0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a14      	ldr	r2, [pc, #80]	; (8002034 <TIM_OC2_SetConfig+0xd0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d113      	bne.n	8002010 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001fee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4313      	orrs	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	697a      	ldr	r2, [r7, #20]
 8002028:	621a      	str	r2, [r3, #32]
}
 800202a:	bf00      	nop
 800202c:	371c      	adds	r7, #28
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	40012c00 	.word	0x40012c00

08002038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002038:	b480      	push	{r7}
 800203a:	b087      	sub	sp, #28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	4313      	orrs	r3, r2
 800208c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1d      	ldr	r2, [pc, #116]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10d      	bne.n	80020b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800209c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a14      	ldr	r2, [pc, #80]	; (8002108 <TIM_OC3_SetConfig+0xd0>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d113      	bne.n	80020e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	011b      	lsls	r3, r3, #4
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	621a      	str	r2, [r3, #32]
}
 80020fc:	bf00      	nop
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00

0800210c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800213a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4313      	orrs	r3, r2
 800214e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <TIM_OC4_SetConfig+0x98>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d109      	bne.n	8002180 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002172:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	621a      	str	r2, [r3, #32]
}
 800219a:	bf00      	nop
 800219c:	371c      	adds	r7, #28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	40012c00 	.word	0x40012c00

080021a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	f023 0201 	bic.w	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f023 030a 	bic.w	r3, r3, #10
 80021e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	621a      	str	r2, [r3, #32]
}
 80021fa:	bf00      	nop
 80021fc:	371c      	adds	r7, #28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f023 0210 	bic.w	r2, r3, #16
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800222e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	031b      	lsls	r3, r3, #12
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002240:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	011b      	lsls	r3, r3, #4
 8002246:	693a      	ldr	r2, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	621a      	str	r2, [r3, #32]
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002296:	b480      	push	{r7}
 8002298:	b087      	sub	sp, #28
 800229a:	af00      	add	r7, sp, #0
 800229c:	60f8      	str	r0, [r7, #12]
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	021a      	lsls	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	431a      	orrs	r2, r3
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	609a      	str	r2, [r3, #8]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	2201      	movs	r2, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	431a      	orrs	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	621a      	str	r2, [r3, #32]
}
 8002312:	bf00      	nop
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e046      	b.n	80023c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00e      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002380:	d009      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d004      	beq.n	8002396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a10      	ldr	r2, [pc, #64]	; (80023d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10c      	bne.n	80023b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800239c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68ba      	ldr	r2, [r7, #8]
 80023ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3714      	adds	r7, #20
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40012c00 	.word	0x40012c00
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800

080023d8 <__libc_init_array>:
 80023d8:	b570      	push	{r4, r5, r6, lr}
 80023da:	2500      	movs	r5, #0
 80023dc:	4e0c      	ldr	r6, [pc, #48]	; (8002410 <__libc_init_array+0x38>)
 80023de:	4c0d      	ldr	r4, [pc, #52]	; (8002414 <__libc_init_array+0x3c>)
 80023e0:	1ba4      	subs	r4, r4, r6
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	42a5      	cmp	r5, r4
 80023e6:	d109      	bne.n	80023fc <__libc_init_array+0x24>
 80023e8:	f000 f822 	bl	8002430 <_init>
 80023ec:	2500      	movs	r5, #0
 80023ee:	4e0a      	ldr	r6, [pc, #40]	; (8002418 <__libc_init_array+0x40>)
 80023f0:	4c0a      	ldr	r4, [pc, #40]	; (800241c <__libc_init_array+0x44>)
 80023f2:	1ba4      	subs	r4, r4, r6
 80023f4:	10a4      	asrs	r4, r4, #2
 80023f6:	42a5      	cmp	r5, r4
 80023f8:	d105      	bne.n	8002406 <__libc_init_array+0x2e>
 80023fa:	bd70      	pop	{r4, r5, r6, pc}
 80023fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002400:	4798      	blx	r3
 8002402:	3501      	adds	r5, #1
 8002404:	e7ee      	b.n	80023e4 <__libc_init_array+0xc>
 8002406:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800240a:	4798      	blx	r3
 800240c:	3501      	adds	r5, #1
 800240e:	e7f2      	b.n	80023f6 <__libc_init_array+0x1e>
 8002410:	0800246c 	.word	0x0800246c
 8002414:	0800246c 	.word	0x0800246c
 8002418:	0800246c 	.word	0x0800246c
 800241c:	08002470 	.word	0x08002470

08002420 <memset>:
 8002420:	4603      	mov	r3, r0
 8002422:	4402      	add	r2, r0
 8002424:	4293      	cmp	r3, r2
 8002426:	d100      	bne.n	800242a <memset+0xa>
 8002428:	4770      	bx	lr
 800242a:	f803 1b01 	strb.w	r1, [r3], #1
 800242e:	e7f9      	b.n	8002424 <memset+0x4>

08002430 <_init>:
 8002430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002432:	bf00      	nop
 8002434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002436:	bc08      	pop	{r3}
 8002438:	469e      	mov	lr, r3
 800243a:	4770      	bx	lr

0800243c <_fini>:
 800243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243e:	bf00      	nop
 8002440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002442:	bc08      	pop	{r3}
 8002444:	469e      	mov	lr, r3
 8002446:	4770      	bx	lr
