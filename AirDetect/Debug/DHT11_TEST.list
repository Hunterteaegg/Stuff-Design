
DHT11_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08003bd8  08003bd8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bd8  08003bd8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bdc  08003bdc  00013bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08003be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000018  08003bf8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08003bf8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e10  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002274  00000000  00000000  00030e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  000330c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e20  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018472  00000000  00000000  00034df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ceef  00000000  00000000  0004d26a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b79c  00000000  00000000  0005a159  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e58f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f10  00000000  00000000  000e5970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b94 	.word	0x08003b94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08003b94 	.word	0x08003b94

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fae0 	bl	8000714 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f828 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f910 	bl	800037c <MX_GPIO_Init>
  MX_I2C2_Init();
 800015c:	f000 f86a 	bl	8000234 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000160:	f000 f896 	bl	8000290 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8e0 	bl	8000328 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8000168:	f003 fbca 	bl	8003900 <lcd_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  lcd_writeCom(0x80);
 800016c:	2080      	movs	r0, #128	; 0x80
 800016e:	f003 fb6b 	bl	8003848 <lcd_writeCom>

	  DHT11_read();
 8000172:	f003 fa77 	bl	8003664 <DHT11_read>
	  lcd_show_dht11(dht11_data);
 8000176:	480a      	ldr	r0, [pc, #40]	; (80001a0 <main+0x54>)
 8000178:	f003 fbd6 	bl	8003928 <lcd_show_dht11>

	  lcd_writeCom(0x80|0x40);
 800017c:	20c0      	movs	r0, #192	; 0xc0
 800017e:	f003 fb63 	bl	8003848 <lcd_writeCom>

	  GY30_read();
 8000182:	f003 facf 	bl	8003724 <GY30_read>
	  lcd_show_gy30(gy30_data);
 8000186:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <main+0x58>)
 8000188:	881b      	ldrh	r3, [r3, #0]
 800018a:	4618      	mov	r0, r3
 800018c:	f003 fc5c 	bl	8003a48 <lcd_show_gy30>

	  bluetooth_transmit();
 8000190:	f003 f9f2 	bl	8003578 <bluetooth_transmit>

	  HAL_Delay(1000);
 8000194:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000198:	f000 fb1e 	bl	80007d8 <HAL_Delay>
	  lcd_writeCom(0x80);
 800019c:	e7e6      	b.n	800016c <main+0x20>
 800019e:	bf00      	nop
 80001a0:	20000034 	.word	0x20000034
 80001a4:	2000003a 	.word	0x2000003a

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	; 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	; 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f003 fce4 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 fddd 	bl	8001db0 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001fc:	f000 f930 	bl	8000460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f002 f848 	bl	80022b0 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000226:	f000 f91b 	bl	8000460 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	; 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000238:	4b12      	ldr	r3, [pc, #72]	; (8000284 <MX_I2C2_Init+0x50>)
 800023a:	4a13      	ldr	r2, [pc, #76]	; (8000288 <MX_I2C2_Init+0x54>)
 800023c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800023e:	4b11      	ldr	r3, [pc, #68]	; (8000284 <MX_I2C2_Init+0x50>)
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <MX_I2C2_Init+0x58>)
 8000242:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000244:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <MX_I2C2_Init+0x50>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800024a:	4b0e      	ldr	r3, [pc, #56]	; (8000284 <MX_I2C2_Init+0x50>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000250:	4b0c      	ldr	r3, [pc, #48]	; (8000284 <MX_I2C2_Init+0x50>)
 8000252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000256:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <MX_I2C2_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <MX_I2C2_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <MX_I2C2_Init+0x50>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <MX_I2C2_Init+0x50>)
 800026c:	2200      	movs	r2, #0
 800026e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <MX_I2C2_Init+0x50>)
 8000272:	f000 fde1 	bl	8000e38 <HAL_I2C_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800027c:	f000 f8f0 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	2000003c 	.word	0x2000003c
 8000288:	40005800 	.word	0x40005800
 800028c:	000186a0 	.word	0x000186a0

08000290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000296:	f107 0308 	add.w	r3, r7, #8
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ac:	4b1d      	ldr	r3, [pc, #116]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002b4:	4b1b      	ldr	r3, [pc, #108]	; (8000324 <MX_TIM2_Init+0x94>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002ba:	4b1a      	ldr	r3, [pc, #104]	; (8000324 <MX_TIM2_Init+0x94>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80002c0:	4b18      	ldr	r3, [pc, #96]	; (8000324 <MX_TIM2_Init+0x94>)
 80002c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002c8:	4b16      	ldr	r3, [pc, #88]	; (8000324 <MX_TIM2_Init+0x94>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002d4:	4813      	ldr	r0, [pc, #76]	; (8000324 <MX_TIM2_Init+0x94>)
 80002d6:	f002 f987 	bl	80025e8 <HAL_TIM_Base_Init>
 80002da:	4603      	mov	r3, r0
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d001      	beq.n	80002e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002e0:	f000 f8be 	bl	8000460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	4619      	mov	r1, r3
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <MX_TIM2_Init+0x94>)
 80002f2:	f002 fad0 	bl	8002896 <HAL_TIM_ConfigClockSource>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002fc:	f000 f8b0 	bl	8000460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000300:	2300      	movs	r3, #0
 8000302:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000304:	2300      	movs	r3, #0
 8000306:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000308:	463b      	mov	r3, r7
 800030a:	4619      	mov	r1, r3
 800030c:	4805      	ldr	r0, [pc, #20]	; (8000324 <MX_TIM2_Init+0x94>)
 800030e:	f002 fc9f 	bl	8002c50 <HAL_TIMEx_MasterConfigSynchronization>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d001      	beq.n	800031c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000318:	f000 f8a2 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800031c:	bf00      	nop
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	200000d0 	.word	0x200000d0

08000328 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	; (8000378 <MX_USART1_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000334:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000338:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_USART1_UART_Init+0x4c>)
 8000360:	f002 fce6 	bl	8002d30 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f879 	bl	8000460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000090 	.word	0x20000090
 8000378:	40013800 	.word	0x40013800

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000390:	4b30      	ldr	r3, [pc, #192]	; (8000454 <MX_GPIO_Init+0xd8>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a2f      	ldr	r2, [pc, #188]	; (8000454 <MX_GPIO_Init+0xd8>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b2d      	ldr	r3, [pc, #180]	; (8000454 <MX_GPIO_Init+0xd8>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0320 	and.w	r3, r3, #32
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b2a      	ldr	r3, [pc, #168]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a29      	ldr	r2, [pc, #164]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b27      	ldr	r3, [pc, #156]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c0:	4b24      	ldr	r3, [pc, #144]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a23      	ldr	r2, [pc, #140]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b21      	ldr	r3, [pc, #132]	; (8000454 <MX_GPIO_Init+0xd8>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0308 	and.w	r3, r3, #8
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|DHT11_DOUT_Pin
 80003d8:	2200      	movs	r2, #0
 80003da:	f648 01e0 	movw	r1, #35040	; 0x88e0
 80003de:	481e      	ldr	r0, [pc, #120]	; (8000458 <MX_GPIO_Init+0xdc>)
 80003e0:	f000 fd11 	bl	8000e06 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 80003e4:	2200      	movs	r2, #0
 80003e6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80003ea:	481c      	ldr	r0, [pc, #112]	; (800045c <MX_GPIO_Init+0xe0>)
 80003ec:	f000 fd0b 	bl	8000e06 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_WR_Pin LCD_RD_Pin LCD_E_Pin LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin;
 80003f0:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2301      	movs	r3, #1
 80003f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fa:	2300      	movs	r3, #0
 80003fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fe:	2302      	movs	r3, #2
 8000400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	4619      	mov	r1, r3
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <MX_GPIO_Init+0xdc>)
 800040a:	f000 fb8b 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DOUT_Pin */
  GPIO_InitStruct.Pin = DHT11_DOUT_Pin;
 800040e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000414:	2311      	movs	r3, #17
 8000416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041c:	2302      	movs	r3, #2
 800041e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_DOUT_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0310 	add.w	r3, r7, #16
 8000424:	4619      	mov	r1, r3
 8000426:	480c      	ldr	r0, [pc, #48]	; (8000458 <MX_GPIO_Init+0xdc>)
 8000428:	f000 fb7c 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 800042c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000430:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000432:	2301      	movs	r3, #1
 8000434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000436:	2300      	movs	r3, #0
 8000438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800043a:	2302      	movs	r3, #2
 800043c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043e:	f107 0310 	add.w	r3, r7, #16
 8000442:	4619      	mov	r1, r3
 8000444:	4805      	ldr	r0, [pc, #20]	; (800045c <MX_GPIO_Init+0xe0>)
 8000446:	f000 fb6d 	bl	8000b24 <HAL_GPIO_Init>

}
 800044a:	bf00      	nop
 800044c:	3720      	adds	r7, #32
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40021000 	.word	0x40021000
 8000458:	40010800 	.word	0x40010800
 800045c:	40010c00 	.word	0x40010c00

08000460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800046c:	b480      	push	{r7}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <HAL_MspInit+0x5c>)
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <HAL_MspInit+0x5c>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6193      	str	r3, [r2, #24]
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <HAL_MspInit+0x5c>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800048a:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_MspInit+0x5c>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a0e      	ldr	r2, [pc, #56]	; (80004c8 <HAL_MspInit+0x5c>)
 8000490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <HAL_MspInit+0x5c>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004a2:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <HAL_MspInit+0x60>)
 80004a4:	685b      	ldr	r3, [r3, #4]
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ae:	60fb      	str	r3, [r7, #12]
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_MspInit+0x60>)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004be:	bf00      	nop
 80004c0:	3714      	adds	r7, #20
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40010000 	.word	0x40010000

080004d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b088      	sub	sp, #32
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
 80004e2:	609a      	str	r2, [r3, #8]
 80004e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <HAL_I2C_MspInit+0x74>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d124      	bne.n	800053a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_I2C_MspInit+0x78>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_I2C_MspInit+0x78>)
 80004f6:	f043 0308 	orr.w	r3, r3, #8
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_I2C_MspInit+0x78>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0308 	and.w	r3, r3, #8
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000508:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800050c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050e:	2312      	movs	r3, #18
 8000510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0310 	add.w	r3, r7, #16
 800051a:	4619      	mov	r1, r3
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <HAL_I2C_MspInit+0x7c>)
 800051e:	f000 fb01 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_I2C_MspInit+0x78>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_I2C_MspInit+0x78>)
 8000528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_I2C_MspInit+0x78>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800053a:	bf00      	nop
 800053c:	3720      	adds	r7, #32
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40005800 	.word	0x40005800
 8000548:	40021000 	.word	0x40021000
 800054c:	40010c00 	.word	0x40010c00

08000550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000560:	d113      	bne.n	800058a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <HAL_TIM_Base_MspInit+0x44>)
 8000564:	69db      	ldr	r3, [r3, #28]
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <HAL_TIM_Base_MspInit+0x44>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	61d3      	str	r3, [r2, #28]
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <HAL_TIM_Base_MspInit+0x44>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	201c      	movs	r0, #28
 8000580:	f000 fa23 	bl	80009ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000584:	201c      	movs	r0, #28
 8000586:	f000 fa3c 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800058a:	bf00      	nop
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40021000 	.word	0x40021000

08000598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b088      	sub	sp, #32
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a20      	ldr	r2, [pc, #128]	; (8000634 <HAL_UART_MspInit+0x9c>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d139      	bne.n	800062c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d0:	4b19      	ldr	r3, [pc, #100]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a18      	ldr	r2, [pc, #96]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b16      	ldr	r3, [pc, #88]	; (8000638 <HAL_UART_MspInit+0xa0>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0304 	and.w	r3, r3, #4
 80005e4:	60bb      	str	r3, [r7, #8]
 80005e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f2:	2303      	movs	r3, #3
 80005f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <HAL_UART_MspInit+0xa4>)
 80005fe:	f000 fa91 	bl	8000b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000606:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4809      	ldr	r0, [pc, #36]	; (800063c <HAL_UART_MspInit+0xa4>)
 8000618:	f000 fa84 	bl	8000b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2025      	movs	r0, #37	; 0x25
 8000622:	f000 f9d2 	bl	80009ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000626:	2025      	movs	r0, #37	; 0x25
 8000628:	f000 f9eb 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40013800 	.word	0x40013800
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800

08000640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	bc80      	pop	{r7}
 800064a:	4770      	bx	lr

0800064c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <HardFault_Handler+0x4>

08000652 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <MemManage_Handler+0x4>

08000658 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <BusFault_Handler+0x4>

0800065e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <UsageFault_Handler+0x4>

08000664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	bc80      	pop	{r7}
 800066e:	4770      	bx	lr

08000670 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068c:	f000 f888 	bl	80007a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}

08000694 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM2_IRQHandler+0x10>)
 800069a:	f001 fff4 	bl	8002686 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	200000d0 	.word	0x200000d0

080006a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <USART1_IRQHandler+0x10>)
 80006ae:	f002 fc1f 	bl	8002ef0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000090 	.word	0x20000090

080006bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006ca:	e003      	b.n	80006d4 <LoopCopyDataInit>

080006cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006cc:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80006ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006d2:	3104      	adds	r1, #4

080006d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80006d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006dc:	d3f6      	bcc.n	80006cc <CopyDataInit>
  ldr r2, =_sbss
 80006de:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006e0:	e002      	b.n	80006e8 <LoopFillZerobss>

080006e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006e4:	f842 3b04 	str.w	r3, [r2], #4

080006e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ec:	d3f9      	bcc.n	80006e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ee:	f7ff ffe5 	bl	80006bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f2:	f003 fa23 	bl	8003b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006f6:	f7ff fd29 	bl	800014c <main>
  bx lr
 80006fa:	4770      	bx	lr
  ldr r3, =_sidata
 80006fc:	08003be0 	.word	0x08003be0
  ldr r0, =_sdata
 8000700:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000704:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000708:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 800070c:	2000011c 	.word	0x2000011c

08000710 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000710:	e7fe      	b.n	8000710 <ADC1_2_IRQHandler>
	...

08000714 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_Init+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a07      	ldr	r2, [pc, #28]	; (800073c <HAL_Init+0x28>)
 800071e:	f043 0310 	orr.w	r3, r3, #16
 8000722:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000724:	2003      	movs	r0, #3
 8000726:	f000 f945 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f000 f808 	bl	8000740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fe9c 	bl	800046c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40022000 	.word	0x40022000

08000740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_InitTick+0x54>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_InitTick+0x58>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f95d 	bl	8000a1e <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e00e      	b.n	800078c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	2b0f      	cmp	r3, #15
 8000772:	d80a      	bhi.n	800078a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000774:	2200      	movs	r2, #0
 8000776:	6879      	ldr	r1, [r7, #4]
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f000 f925 	bl	80009ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000780:	4a06      	ldr	r2, [pc, #24]	; (800079c <HAL_InitTick+0x5c>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000786:	2300      	movs	r3, #0
 8000788:	e000      	b.n	800078c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	20000008 	.word	0x20000008
 800079c:	20000004 	.word	0x20000004

080007a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <HAL_IncTick+0x1c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <HAL_IncTick+0x20>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4413      	add	r3, r2
 80007b0:	4a03      	ldr	r2, [pc, #12]	; (80007c0 <HAL_IncTick+0x20>)
 80007b2:	6013      	str	r3, [r2, #0]
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000118 	.word	0x20000118

080007c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  return uwTick;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_GetTick+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000118 	.word	0x20000118

080007d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007e0:	f7ff fff0 	bl	80007c4 <HAL_GetTick>
 80007e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007f0:	d005      	beq.n	80007fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_Delay+0x40>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	461a      	mov	r2, r3
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007fe:	bf00      	nop
 8000800:	f7ff ffe0 	bl	80007c4 <HAL_GetTick>
 8000804:	4602      	mov	r2, r0
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	1ad3      	subs	r3, r2, r3
 800080a:	68fa      	ldr	r2, [r7, #12]
 800080c:	429a      	cmp	r2, r3
 800080e:	d8f7      	bhi.n	8000800 <HAL_Delay+0x28>
  {
  }
}
 8000810:	bf00      	nop
 8000812:	3710      	adds	r7, #16
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000008 	.word	0x20000008

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4906      	ldr	r1, [pc, #24]	; (80008b4 <__NVIC_EnableIRQ+0x34>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	db0a      	blt.n	80008e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	490c      	ldr	r1, [pc, #48]	; (8000904 <__NVIC_SetPriority+0x4c>)
 80008d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d6:	0112      	lsls	r2, r2, #4
 80008d8:	b2d2      	uxtb	r2, r2
 80008da:	440b      	add	r3, r1
 80008dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e0:	e00a      	b.n	80008f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4908      	ldr	r1, [pc, #32]	; (8000908 <__NVIC_SetPriority+0x50>)
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	f003 030f 	and.w	r3, r3, #15
 80008ee:	3b04      	subs	r3, #4
 80008f0:	0112      	lsls	r2, r2, #4
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	440b      	add	r3, r1
 80008f6:	761a      	strb	r2, [r3, #24]
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000e100 	.word	0xe000e100
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800090c:	b480      	push	{r7}
 800090e:	b089      	sub	sp, #36	; 0x24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f1c3 0307 	rsb	r3, r3, #7
 8000926:	2b04      	cmp	r3, #4
 8000928:	bf28      	it	cs
 800092a:	2304      	movcs	r3, #4
 800092c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	2b06      	cmp	r3, #6
 8000934:	d902      	bls.n	800093c <NVIC_EncodePriority+0x30>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	3b03      	subs	r3, #3
 800093a:	e000      	b.n	800093e <NVIC_EncodePriority+0x32>
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	f04f 32ff 	mov.w	r2, #4294967295
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43da      	mvns	r2, r3
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	401a      	ands	r2, r3
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	fa01 f303 	lsl.w	r3, r1, r3
 800095e:	43d9      	mvns	r1, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000964:	4313      	orrs	r3, r2
         );
}
 8000966:	4618      	mov	r0, r3
 8000968:	3724      	adds	r7, #36	; 0x24
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000980:	d301      	bcc.n	8000986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000982:	2301      	movs	r3, #1
 8000984:	e00f      	b.n	80009a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SysTick_Config+0x40>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3b01      	subs	r3, #1
 800098c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800098e:	210f      	movs	r1, #15
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	f7ff ff90 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <SysTick_Config+0x40>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <SysTick_Config+0x40>)
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	e000e010 	.word	0xe000e010

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff2d 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff42 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ff90 	bl	800090c <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff5f 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff35 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b082      	sub	sp, #8
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ffa2 	bl	8000970 <SysTick_Config>
 8000a2c:	4603      	mov	r3, r0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d005      	beq.n	8000a5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2204      	movs	r2, #4
 8000a52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e051      	b.n	8000afe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f022 020e 	bic.w	r2, r2, #14
 8000a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f022 0201 	bic.w	r2, r2, #1
 8000a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_DMA_Abort_IT+0xd0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d029      	beq.n	8000ad8 <HAL_DMA_Abort_IT+0xa0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a20      	ldr	r2, [pc, #128]	; (8000b0c <HAL_DMA_Abort_IT+0xd4>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d022      	beq.n	8000ad4 <HAL_DMA_Abort_IT+0x9c>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1f      	ldr	r2, [pc, #124]	; (8000b10 <HAL_DMA_Abort_IT+0xd8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d01a      	beq.n	8000ace <HAL_DMA_Abort_IT+0x96>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a1d      	ldr	r2, [pc, #116]	; (8000b14 <HAL_DMA_Abort_IT+0xdc>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d012      	beq.n	8000ac8 <HAL_DMA_Abort_IT+0x90>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1c      	ldr	r2, [pc, #112]	; (8000b18 <HAL_DMA_Abort_IT+0xe0>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d00a      	beq.n	8000ac2 <HAL_DMA_Abort_IT+0x8a>
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a1a      	ldr	r2, [pc, #104]	; (8000b1c <HAL_DMA_Abort_IT+0xe4>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d102      	bne.n	8000abc <HAL_DMA_Abort_IT+0x84>
 8000ab6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aba:	e00e      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ac0:	e00b      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ac6:	e008      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000acc:	e005      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad2:	e002      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	e000      	b.n	8000ada <HAL_DMA_Abort_IT+0xa2>
 8000ad8:	2301      	movs	r3, #1
 8000ada:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <HAL_DMA_Abort_IT+0xe8>)
 8000adc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	4798      	blx	r3
    } 
  }
  return status;
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40020008 	.word	0x40020008
 8000b0c:	4002001c 	.word	0x4002001c
 8000b10:	40020030 	.word	0x40020030
 8000b14:	40020044 	.word	0x40020044
 8000b18:	40020058 	.word	0x40020058
 8000b1c:	4002006c 	.word	0x4002006c
 8000b20:	40020000 	.word	0x40020000

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b08b      	sub	sp, #44	; 0x2c
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b36:	e127      	b.n	8000d88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b38:	2201      	movs	r2, #1
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	f040 8116 	bne.w	8000d82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b12      	cmp	r3, #18
 8000b5c:	d034      	beq.n	8000bc8 <HAL_GPIO_Init+0xa4>
 8000b5e:	2b12      	cmp	r3, #18
 8000b60:	d80d      	bhi.n	8000b7e <HAL_GPIO_Init+0x5a>
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	d02b      	beq.n	8000bbe <HAL_GPIO_Init+0x9a>
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d804      	bhi.n	8000b74 <HAL_GPIO_Init+0x50>
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d031      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d01c      	beq.n	8000bac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b72:	e048      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	d043      	beq.n	8000c00 <HAL_GPIO_Init+0xdc>
 8000b78:	2b11      	cmp	r3, #17
 8000b7a:	d01b      	beq.n	8000bb4 <HAL_GPIO_Init+0x90>
          break;
 8000b7c:	e043      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b7e:	4a89      	ldr	r2, [pc, #548]	; (8000da4 <HAL_GPIO_Init+0x280>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d026      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
 8000b84:	4a87      	ldr	r2, [pc, #540]	; (8000da4 <HAL_GPIO_Init+0x280>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d806      	bhi.n	8000b98 <HAL_GPIO_Init+0x74>
 8000b8a:	4a87      	ldr	r2, [pc, #540]	; (8000da8 <HAL_GPIO_Init+0x284>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d020      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
 8000b90:	4a86      	ldr	r2, [pc, #536]	; (8000dac <HAL_GPIO_Init+0x288>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d01d      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
          break;
 8000b96:	e036      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b98:	4a85      	ldr	r2, [pc, #532]	; (8000db0 <HAL_GPIO_Init+0x28c>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d019      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
 8000b9e:	4a85      	ldr	r2, [pc, #532]	; (8000db4 <HAL_GPIO_Init+0x290>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d016      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
 8000ba4:	4a84      	ldr	r2, [pc, #528]	; (8000db8 <HAL_GPIO_Init+0x294>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d013      	beq.n	8000bd2 <HAL_GPIO_Init+0xae>
          break;
 8000baa:	e02c      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	623b      	str	r3, [r7, #32]
          break;
 8000bb2:	e028      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	623b      	str	r3, [r7, #32]
          break;
 8000bbc:	e023      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	3308      	adds	r3, #8
 8000bc4:	623b      	str	r3, [r7, #32]
          break;
 8000bc6:	e01e      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	330c      	adds	r3, #12
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e019      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	689b      	ldr	r3, [r3, #8]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d102      	bne.n	8000be0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e012      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d105      	bne.n	8000bf4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000be8:	2308      	movs	r3, #8
 8000bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	611a      	str	r2, [r3, #16]
          break;
 8000bf2:	e008      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69fa      	ldr	r2, [r7, #28]
 8000bfc:	615a      	str	r2, [r3, #20]
          break;
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c06:	69bb      	ldr	r3, [r7, #24]
 8000c08:	2bff      	cmp	r3, #255	; 0xff
 8000c0a:	d801      	bhi.n	8000c10 <HAL_GPIO_Init+0xec>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	e001      	b.n	8000c14 <HAL_GPIO_Init+0xf0>
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3304      	adds	r3, #4
 8000c14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d802      	bhi.n	8000c22 <HAL_GPIO_Init+0xfe>
 8000c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_Init+0x104>
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	3b08      	subs	r3, #8
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	210f      	movs	r1, #15
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	401a      	ands	r2, r3
 8000c3a:	6a39      	ldr	r1, [r7, #32]
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	431a      	orrs	r2, r3
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 8096 	beq.w	8000d82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c56:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <HAL_GPIO_Init+0x298>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a58      	ldr	r2, [pc, #352]	; (8000dbc <HAL_GPIO_Init+0x298>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b56      	ldr	r3, [pc, #344]	; (8000dbc <HAL_GPIO_Init+0x298>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c6e:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <HAL_GPIO_Init+0x29c>)
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	089b      	lsrs	r3, r3, #2
 8000c74:	3302      	adds	r3, #2
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	220f      	movs	r2, #15
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a4b      	ldr	r2, [pc, #300]	; (8000dc4 <HAL_GPIO_Init+0x2a0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d013      	beq.n	8000cc2 <HAL_GPIO_Init+0x19e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a4a      	ldr	r2, [pc, #296]	; (8000dc8 <HAL_GPIO_Init+0x2a4>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d00d      	beq.n	8000cbe <HAL_GPIO_Init+0x19a>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a49      	ldr	r2, [pc, #292]	; (8000dcc <HAL_GPIO_Init+0x2a8>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d007      	beq.n	8000cba <HAL_GPIO_Init+0x196>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a48      	ldr	r2, [pc, #288]	; (8000dd0 <HAL_GPIO_Init+0x2ac>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d101      	bne.n	8000cb6 <HAL_GPIO_Init+0x192>
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e006      	b.n	8000cc4 <HAL_GPIO_Init+0x1a0>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	e004      	b.n	8000cc4 <HAL_GPIO_Init+0x1a0>
 8000cba:	2302      	movs	r3, #2
 8000cbc:	e002      	b.n	8000cc4 <HAL_GPIO_Init+0x1a0>
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e000      	b.n	8000cc4 <HAL_GPIO_Init+0x1a0>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc6:	f002 0203 	and.w	r2, r2, #3
 8000cca:	0092      	lsls	r2, r2, #2
 8000ccc:	4093      	lsls	r3, r2
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cd4:	493a      	ldr	r1, [pc, #232]	; (8000dc0 <HAL_GPIO_Init+0x29c>)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	089b      	lsrs	r3, r3, #2
 8000cda:	3302      	adds	r3, #2
 8000cdc:	68fa      	ldr	r2, [r7, #12]
 8000cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cee:	4b39      	ldr	r3, [pc, #228]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4938      	ldr	r1, [pc, #224]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
 8000cfa:	e006      	b.n	8000d0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000cfc:	4b35      	ldr	r3, [pc, #212]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	43db      	mvns	r3, r3
 8000d04:	4933      	ldr	r1, [pc, #204]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d06:	4013      	ands	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	492e      	ldr	r1, [pc, #184]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	604b      	str	r3, [r1, #4]
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d24:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4929      	ldr	r1, [pc, #164]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d3e:	4b25      	ldr	r3, [pc, #148]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	4924      	ldr	r1, [pc, #144]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	608b      	str	r3, [r1, #8]
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d4c:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d4e:	689a      	ldr	r2, [r3, #8]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	491f      	ldr	r1, [pc, #124]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d66:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d68:	68da      	ldr	r2, [r3, #12]
 8000d6a:	491a      	ldr	r1, [pc, #104]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	60cb      	str	r3, [r1, #12]
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d74:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d76:	68da      	ldr	r2, [r3, #12]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	4915      	ldr	r1, [pc, #84]	; (8000dd4 <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	3301      	adds	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f47f aed0 	bne.w	8000b38 <HAL_GPIO_Init+0x14>
  }
}
 8000d98:	bf00      	nop
 8000d9a:	372c      	adds	r7, #44	; 0x2c
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	10210000 	.word	0x10210000
 8000da8:	10110000 	.word	0x10110000
 8000dac:	10120000 	.word	0x10120000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10320000 	.word	0x10320000
 8000db8:	10220000 	.word	0x10220000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40011400 	.word	0x40011400
 8000dd4:	40010400 	.word	0x40010400

08000dd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689a      	ldr	r2, [r3, #8]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	4013      	ands	r3, r2
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d002      	beq.n	8000df6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
 8000df4:	e001      	b.n	8000dfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr

08000e06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
 8000e0e:	460b      	mov	r3, r1
 8000e10:	807b      	strh	r3, [r7, #2]
 8000e12:	4613      	mov	r3, r2
 8000e14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e16:	787b      	ldrb	r3, [r7, #1]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e1c:	887a      	ldrh	r2, [r7, #2]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e22:	e003      	b.n	8000e2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	041a      	lsls	r2, r3, #16
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	611a      	str	r2, [r3, #16]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e11f      	b.n	800108a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fb36 	bl	80004d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	; 0x24
 8000e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000e8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e9c:	f001 fb5e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8000ea0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a7b      	ldr	r2, [pc, #492]	; (8001094 <HAL_I2C_Init+0x25c>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d807      	bhi.n	8000ebc <HAL_I2C_Init+0x84>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a7a      	ldr	r2, [pc, #488]	; (8001098 <HAL_I2C_Init+0x260>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	bf94      	ite	ls
 8000eb4:	2301      	movls	r3, #1
 8000eb6:	2300      	movhi	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	e006      	b.n	8000eca <HAL_I2C_Init+0x92>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4a77      	ldr	r2, [pc, #476]	; (800109c <HAL_I2C_Init+0x264>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	bf94      	ite	ls
 8000ec4:	2301      	movls	r3, #1
 8000ec6:	2300      	movhi	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e0db      	b.n	800108a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4a72      	ldr	r2, [pc, #456]	; (80010a0 <HAL_I2C_Init+0x268>)
 8000ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	430a      	orrs	r2, r1
 8000ef0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	6a1b      	ldr	r3, [r3, #32]
 8000ef8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	4a64      	ldr	r2, [pc, #400]	; (8001094 <HAL_I2C_Init+0x25c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d802      	bhi.n	8000f0c <HAL_I2C_Init+0xd4>
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	e009      	b.n	8000f20 <HAL_I2C_Init+0xe8>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	4a63      	ldr	r2, [pc, #396]	; (80010a4 <HAL_I2C_Init+0x26c>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	099b      	lsrs	r3, r3, #6
 8000f1e:	3301      	adds	r3, #1
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	6812      	ldr	r2, [r2, #0]
 8000f24:	430b      	orrs	r3, r1
 8000f26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000f32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4956      	ldr	r1, [pc, #344]	; (8001094 <HAL_I2C_Init+0x25c>)
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d80d      	bhi.n	8000f5c <HAL_I2C_Init+0x124>
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	1e59      	subs	r1, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	bf38      	it	cc
 8000f58:	2304      	movcc	r3, #4
 8000f5a:	e04f      	b.n	8000ffc <HAL_I2C_Init+0x1c4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d111      	bne.n	8000f88 <HAL_I2C_Init+0x150>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1e58      	subs	r0, r3, #1
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6859      	ldr	r1, [r3, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	440b      	add	r3, r1
 8000f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	e012      	b.n	8000fae <HAL_I2C_Init+0x176>
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	1e58      	subs	r0, r3, #1
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6859      	ldr	r1, [r3, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	440b      	add	r3, r1
 8000f96:	0099      	lsls	r1, r3, #2
 8000f98:	440b      	add	r3, r1
 8000f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	bf0c      	ite	eq
 8000fa8:	2301      	moveq	r3, #1
 8000faa:	2300      	movne	r3, #0
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <HAL_I2C_Init+0x17e>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e022      	b.n	8000ffc <HAL_I2C_Init+0x1c4>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10e      	bne.n	8000fdc <HAL_I2C_Init+0x1a4>
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	1e58      	subs	r0, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6859      	ldr	r1, [r3, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	440b      	add	r3, r1
 8000fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fda:	e00f      	b.n	8000ffc <HAL_I2C_Init+0x1c4>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1e58      	subs	r0, r3, #1
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	440b      	add	r3, r1
 8000fea:	0099      	lsls	r1, r3, #2
 8000fec:	440b      	add	r3, r1
 8000fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	6809      	ldr	r1, [r1, #0]
 8001000:	4313      	orrs	r3, r2
 8001002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69da      	ldr	r2, [r3, #28]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800102a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	6911      	ldr	r1, [r2, #16]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68d2      	ldr	r2, [r2, #12]
 8001036:	4311      	orrs	r1, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	430b      	orrs	r3, r1
 800103e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68db      	ldr	r3, [r3, #12]
 8001046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	695a      	ldr	r2, [r3, #20]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 0201 	orr.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2220      	movs	r2, #32
 8001076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	000186a0 	.word	0x000186a0
 8001098:	001e847f 	.word	0x001e847f
 800109c:	003d08ff 	.word	0x003d08ff
 80010a0:	431bde83 	.word	0x431bde83
 80010a4:	10624dd3 	.word	0x10624dd3

080010a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af02      	add	r7, sp, #8
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	461a      	mov	r2, r3
 80010b4:	460b      	mov	r3, r1
 80010b6:	817b      	strh	r3, [r7, #10]
 80010b8:	4613      	mov	r3, r2
 80010ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff fb82 	bl	80007c4 <HAL_GetTick>
 80010c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b20      	cmp	r3, #32
 80010cc:	f040 80e0 	bne.w	8001290 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2319      	movs	r3, #25
 80010d6:	2201      	movs	r2, #1
 80010d8:	4970      	ldr	r1, [pc, #448]	; (800129c <HAL_I2C_Master_Transmit+0x1f4>)
 80010da:	68f8      	ldr	r0, [r7, #12]
 80010dc:	f000 fc8c 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80010e6:	2302      	movs	r3, #2
 80010e8:	e0d3      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_I2C_Master_Transmit+0x50>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e0cc      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b01      	cmp	r3, #1
 800110c:	d007      	beq.n	800111e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800112c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2221      	movs	r2, #33	; 0x21
 8001132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2210      	movs	r2, #16
 800113a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2200      	movs	r2, #0
 8001142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	893a      	ldrh	r2, [r7, #8]
 800114e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001154:	b29a      	uxth	r2, r3
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800115e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	6a3a      	ldr	r2, [r7, #32]
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f000 faf6 	bl	8001758 <I2C_MasterRequestWrite>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e08d      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	695b      	ldr	r3, [r3, #20]
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800118c:	e066      	b.n	800125c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	6a39      	ldr	r1, [r7, #32]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f000 fd06 	bl	8001ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00d      	beq.n	80011ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	d107      	bne.n	80011b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e06b      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	3b01      	subs	r3, #1
 80011d8:	b29a      	uxth	r2, r3
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f003 0304 	and.w	r3, r3, #4
 80011f4:	2b04      	cmp	r3, #4
 80011f6:	d11b      	bne.n	8001230 <HAL_I2C_Master_Transmit+0x188>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d017      	beq.n	8001230 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121a:	b29b      	uxth	r3, r3
 800121c:	3b01      	subs	r3, #1
 800121e:	b29a      	uxth	r2, r3
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001228:	3b01      	subs	r3, #1
 800122a:	b29a      	uxth	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	6a39      	ldr	r1, [r7, #32]
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f000 fcf6 	bl	8001c26 <I2C_WaitOnBTFFlagUntilTimeout>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d00d      	beq.n	800125c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2b04      	cmp	r3, #4
 8001246:	d107      	bne.n	8001258 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001256:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e01a      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001260:	2b00      	cmp	r3, #0
 8001262:	d194      	bne.n	800118e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2220      	movs	r2, #32
 8001278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2200      	movs	r2, #0
 8001280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	e000      	b.n	8001292 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001290:	2302      	movs	r3, #2
  }
}
 8001292:	4618      	mov	r0, r3
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	00100002 	.word	0x00100002
 80012a0:	ffff0000 	.word	0xffff0000

080012a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	461a      	mov	r2, r3
 80012b0:	460b      	mov	r3, r1
 80012b2:	817b      	strh	r3, [r7, #10]
 80012b4:	4613      	mov	r3, r2
 80012b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff fa82 	bl	80007c4 <HAL_GetTick>
 80012c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b20      	cmp	r3, #32
 80012cc:	f040 8238 	bne.w	8001740 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	2319      	movs	r3, #25
 80012d6:	2201      	movs	r2, #1
 80012d8:	497e      	ldr	r1, [pc, #504]	; (80014d4 <HAL_I2C_Master_Receive+0x230>)
 80012da:	68f8      	ldr	r0, [r7, #12]
 80012dc:	f000 fb8c 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80012e6:	2302      	movs	r3, #2
 80012e8:	e22b      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d101      	bne.n	80012f8 <HAL_I2C_Master_Receive+0x54>
 80012f4:	2302      	movs	r3, #2
 80012f6:	e224      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2201      	movs	r2, #1
 80012fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d007      	beq.n	800131e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0201 	orr.w	r2, r2, #1
 800131c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800132c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2222      	movs	r2, #34	; 0x22
 8001332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2210      	movs	r2, #16
 800133a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	893a      	ldrh	r2, [r7, #8]
 800134e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001354:	b29a      	uxth	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4a5e      	ldr	r2, [pc, #376]	; (80014d8 <HAL_I2C_Master_Receive+0x234>)
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 fa78 	bl	800185c <I2C_MasterRequestRead>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e1e5      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800137a:	2b00      	cmp	r3, #0
 800137c:	d113      	bne.n	80013a6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	61fb      	str	r3, [r7, #28]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	e1b9      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d11d      	bne.n	80013ea <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013bc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013e6:	b662      	cpsie	i
 80013e8:	e197      	b.n	800171a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d11d      	bne.n	800142e <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001400:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001428:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800142a:	b662      	cpsie	i
 800142c:	e175      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800143c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001454:	e161      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800145a:	2b03      	cmp	r3, #3
 800145c:	f200 811a 	bhi.w	8001694 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001464:	2b01      	cmp	r3, #1
 8001466:	d123      	bne.n	80014b0 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800146a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 fc1b 	bl	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e162      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	b2d2      	uxtb	r2, r2
 8001488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001498:	3b01      	subs	r3, #1
 800149a:	b29a      	uxth	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014ae:	e134      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d150      	bne.n	800155a <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014be:	2200      	movs	r2, #0
 80014c0:	4906      	ldr	r1, [pc, #24]	; (80014dc <HAL_I2C_Master_Receive+0x238>)
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f000 fa98 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e137      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
 80014d2:	bf00      	nop
 80014d4:	00100002 	.word	0x00100002
 80014d8:	ffff0000 	.word	0xffff0000
 80014dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014f0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800150e:	3b01      	subs	r3, #1
 8001510:	b29a      	uxth	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800151a:	b29b      	uxth	r3, r3
 800151c:	3b01      	subs	r3, #1
 800151e:	b29a      	uxth	r2, r3
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001524:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001542:	3b01      	subs	r3, #1
 8001544:	b29a      	uxth	r2, r3
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001558:	e0df      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001560:	2200      	movs	r2, #0
 8001562:	497a      	ldr	r1, [pc, #488]	; (800174c <HAL_I2C_Master_Receive+0x4a8>)
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 fa47 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0e6      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001582:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	691a      	ldr	r2, [r3, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001598:	1c5a      	adds	r2, r3, #1
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	3b01      	subs	r3, #1
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	3b01      	subs	r3, #1
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <HAL_I2C_Master_Receive+0x4ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_I2C_Master_Receive+0x4b0>)
 80015c0:	fba2 2303 	umull	r2, r3, r2, r3
 80015c4:	0a1a      	lsrs	r2, r3, #8
 80015c6:	4613      	mov	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	00da      	lsls	r2, r3, #3
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d117      	bne.n	800160e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2220      	movs	r2, #32
 80015e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0220 	orr.w	r2, r3, #32
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001600:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e099      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	695b      	ldr	r3, [r3, #20]
 8001614:	f003 0304 	and.w	r3, r3, #4
 8001618:	2b04      	cmp	r3, #4
 800161a:	d1da      	bne.n	80015d2 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800162a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691a      	ldr	r2, [r3, #16]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	1c5a      	adds	r2, r3, #1
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001648:	3b01      	subs	r3, #1
 800164a:	b29a      	uxth	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001654:	b29b      	uxth	r3, r3
 8001656:	3b01      	subs	r3, #1
 8001658:	b29a      	uxth	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800165e:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	691a      	ldr	r2, [r3, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167c:	3b01      	subs	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001688:	b29b      	uxth	r3, r3
 800168a:	3b01      	subs	r3, #1
 800168c:	b29a      	uxth	r2, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001692:	e042      	b.n	800171a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001696:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 fb05 	bl	8001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e04c      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c4:	3b01      	subs	r3, #1
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d118      	bne.n	800171a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691a      	ldr	r2, [r3, #16]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fa:	1c5a      	adds	r2, r3, #1
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	3b01      	subs	r3, #1
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f ae99 	bne.w	8001456 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800173c:	2300      	movs	r3, #0
 800173e:	e000      	b.n	8001742 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8001740:	2302      	movs	r3, #2
  }
}
 8001742:	4618      	mov	r0, r3
 8001744:	3728      	adds	r7, #40	; 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	00010004 	.word	0x00010004
 8001750:	20000000 	.word	0x20000000
 8001754:	14f8b589 	.word	0x14f8b589

08001758 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	460b      	mov	r3, r1
 8001766:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b08      	cmp	r3, #8
 8001772:	d006      	beq.n	8001782 <I2C_MasterRequestWrite+0x2a>
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d003      	beq.n	8001782 <I2C_MasterRequestWrite+0x2a>
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001780:	d108      	bne.n	8001794 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	e00b      	b.n	80017ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	2b12      	cmp	r3, #18
 800179a:	d107      	bne.n	80017ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f91d 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00d      	beq.n	80017e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017d2:	d103      	bne.n	80017dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e035      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017e8:	d108      	bne.n	80017fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80017f8:	611a      	str	r2, [r3, #16]
 80017fa:	e01b      	b.n	8001834 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80017fc:	897b      	ldrh	r3, [r7, #10]
 80017fe:	11db      	asrs	r3, r3, #7
 8001800:	b2db      	uxtb	r3, r3
 8001802:	f003 0306 	and.w	r3, r3, #6
 8001806:	b2db      	uxtb	r3, r3
 8001808:	f063 030f 	orn	r3, r3, #15
 800180c:	b2da      	uxtb	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <I2C_MasterRequestWrite+0xfc>)
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f943 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e010      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800182a:	897b      	ldrh	r3, [r7, #10]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	4907      	ldr	r1, [pc, #28]	; (8001858 <I2C_MasterRequestWrite+0x100>)
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f933 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	00010008 	.word	0x00010008
 8001858:	00010002 	.word	0x00010002

0800185c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	460b      	mov	r3, r1
 800186a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001880:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b08      	cmp	r3, #8
 8001886:	d006      	beq.n	8001896 <I2C_MasterRequestRead+0x3a>
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d003      	beq.n	8001896 <I2C_MasterRequestRead+0x3a>
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001894:	d108      	bne.n	80018a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	e00b      	b.n	80018c0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d107      	bne.n	80018c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 f893 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00d      	beq.n	80018f4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018e6:	d103      	bne.n	80018f0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e079      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018fc:	d108      	bne.n	8001910 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80018fe:	897b      	ldrh	r3, [r7, #10]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	611a      	str	r2, [r3, #16]
 800190e:	e05f      	b.n	80019d0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001910:	897b      	ldrh	r3, [r7, #10]
 8001912:	11db      	asrs	r3, r3, #7
 8001914:	b2db      	uxtb	r3, r3
 8001916:	f003 0306 	and.w	r3, r3, #6
 800191a:	b2db      	uxtb	r3, r3
 800191c:	f063 030f 	orn	r3, r3, #15
 8001920:	b2da      	uxtb	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4930      	ldr	r1, [pc, #192]	; (80019f0 <I2C_MasterRequestRead+0x194>)
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f8b9 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e054      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800193e:	897b      	ldrh	r3, [r7, #10]
 8001940:	b2da      	uxtb	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4929      	ldr	r1, [pc, #164]	; (80019f4 <I2C_MasterRequestRead+0x198>)
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f8a9 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e044      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001982:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f000 f831 	bl	80019f8 <I2C_WaitOnFlagUntilTimeout>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00d      	beq.n	80019b8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019aa:	d103      	bne.n	80019b4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019b2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e017      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	11db      	asrs	r3, r3, #7
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f003 0306 	and.w	r3, r3, #6
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f063 030e 	orn	r3, r3, #14
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <I2C_MasterRequestRead+0x198>)
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f000 f865 	bl	8001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	00010008 	.word	0x00010008
 80019f4:	00010002 	.word	0x00010002

080019f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	4613      	mov	r3, r2
 8001a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a08:	e025      	b.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a10:	d021      	beq.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a12:	f7fe fed7 	bl	80007c4 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d302      	bcc.n	8001a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d116      	bne.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2220      	movs	r2, #32
 8001a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f043 0220 	orr.w	r2, r3, #32
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e023      	b.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	0c1b      	lsrs	r3, r3, #16
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	461a      	mov	r2, r3
 8001a7a:	e00c      	b.n	8001a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	4013      	ands	r3, r2
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf0c      	ite	eq
 8001a8e:	2301      	moveq	r3, #1
 8001a90:	2300      	movne	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d0b6      	beq.n	8001a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ab4:	e051      	b.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ac4:	d123      	bne.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f043 0204 	orr.w	r2, r3, #4
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e046      	b.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d021      	beq.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b16:	f7fe fe55 	bl	80007c4 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d302      	bcc.n	8001b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d116      	bne.n	8001b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	f043 0220 	orr.w	r2, r3, #32
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e020      	b.n	8001b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	0c1b      	lsrs	r3, r3, #16
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10c      	bne.n	8001b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	43da      	mvns	r2, r3
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	bf14      	ite	ne
 8001b76:	2301      	movne	r3, #1
 8001b78:	2300      	moveq	r3, #0
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	e00b      	b.n	8001b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d18d      	bne.n	8001ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb0:	e02d      	b.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f8ce 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e02d      	b.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bc8:	d021      	beq.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bca:	f7fe fdfb 	bl	80007c4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d302      	bcc.n	8001be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d116      	bne.n	8001c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e007      	b.n	8001c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	695b      	ldr	r3, [r3, #20]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d1ca      	bne.n	8001bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b084      	sub	sp, #16
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c32:	e02d      	b.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f88d 	bl	8001d54 <I2C_IsAcknowledgeFailed>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e02d      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d021      	beq.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c4c:	f7fe fdba 	bl	80007c4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d302      	bcc.n	8001c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d116      	bne.n	8001c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	f043 0220 	orr.w	r2, r3, #32
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e007      	b.n	8001ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	f003 0304 	and.w	r3, r3, #4
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d1ca      	bne.n	8001c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb4:	e042      	b.n	8001d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f003 0310 	and.w	r3, r3, #16
 8001cc0:	2b10      	cmp	r3, #16
 8001cc2:	d119      	bne.n	8001cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f06f 0210 	mvn.w	r2, #16
 8001ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e029      	b.n	8001d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cf8:	f7fe fd64 	bl	80007c4 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d302      	bcc.n	8001d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d116      	bne.n	8001d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e007      	b.n	8001d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d46:	2b40      	cmp	r3, #64	; 0x40
 8001d48:	d1b5      	bne.n	8001cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6a:	d11b      	bne.n	8001da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f043 0204 	orr.w	r2, r3, #4
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e26c      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8087 	beq.w	8001ede <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dd0:	4b92      	ldr	r3, [pc, #584]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d00c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ddc:	4b8f      	ldr	r3, [pc, #572]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d112      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
 8001de8:	4b8c      	ldr	r3, [pc, #560]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df4:	d10b      	bne.n	8001e0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df6:	4b89      	ldr	r3, [pc, #548]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d06c      	beq.n	8001edc <HAL_RCC_OscConfig+0x12c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d168      	bne.n	8001edc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e246      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x76>
 8001e18:	4b80      	ldr	r3, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a7f      	ldr	r2, [pc, #508]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	e02e      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x98>
 8001e2e:	4b7b      	ldr	r3, [pc, #492]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7a      	ldr	r2, [pc, #488]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	4b78      	ldr	r3, [pc, #480]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a77      	ldr	r2, [pc, #476]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e01d      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0xbc>
 8001e52:	4b72      	ldr	r3, [pc, #456]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a71      	ldr	r2, [pc, #452]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b6f      	ldr	r3, [pc, #444]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a6e      	ldr	r2, [pc, #440]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e00b      	b.n	8001e84 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	4b6b      	ldr	r3, [pc, #428]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a6a      	ldr	r2, [pc, #424]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b68      	ldr	r3, [pc, #416]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a67      	ldr	r2, [pc, #412]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7fe fc9a 	bl	80007c4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7fe fc96 	bl	80007c4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e1fa      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ea6:	4b5d      	ldr	r3, [pc, #372]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0xe4>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb4:	f7fe fc86 	bl	80007c4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fc82 	bl	80007c4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e1e6      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ece:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x10c>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00b      	beq.n	8001f0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef6:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b08      	cmp	r3, #8
 8001f00:	d11c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d116      	bne.n	8001f3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0e:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d005      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	691b      	ldr	r3, [r3, #16]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d001      	beq.n	8001f26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e1ba      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f26:	4b3d      	ldr	r3, [pc, #244]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4939      	ldr	r1, [pc, #228]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f3a:	e03a      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d020      	beq.n	8001f86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f44:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe fc3b 	bl	80007c4 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f52:	f7fe fc37 	bl	80007c4 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e19b      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4927      	ldr	r1, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <HAL_RCC_OscConfig+0x270>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fc1a 	bl	80007c4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7fe fc16 	bl	80007c4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e17a      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d03a      	beq.n	8002034 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d019      	beq.n	8001ffa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fcc:	f7fe fbfa 	bl	80007c4 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fbf6 	bl	80007c4 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e15a      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ff2:	2001      	movs	r0, #1
 8001ff4:	f000 fada 	bl	80025ac <RCC_Delay>
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_RCC_OscConfig+0x274>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002000:	f7fe fbe0 	bl	80007c4 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002006:	e00f      	b.n	8002028 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7fe fbdc 	bl	80007c4 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d908      	bls.n	8002028 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e140      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
 800201a:	bf00      	nop
 800201c:	40021000 	.word	0x40021000
 8002020:	42420000 	.word	0x42420000
 8002024:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002028:	4b9e      	ldr	r3, [pc, #632]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e9      	bne.n	8002008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a6 	beq.w	800218e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002042:	2300      	movs	r3, #0
 8002044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002046:	4b97      	ldr	r3, [pc, #604]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10d      	bne.n	800206e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002052:	4b94      	ldr	r3, [pc, #592]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4a93      	ldr	r2, [pc, #588]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	61d3      	str	r3, [r2, #28]
 800205e:	4b91      	ldr	r3, [pc, #580]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206a:	2301      	movs	r3, #1
 800206c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206e:	4b8e      	ldr	r3, [pc, #568]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d118      	bne.n	80020ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207a:	4b8b      	ldr	r3, [pc, #556]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a8a      	ldr	r2, [pc, #552]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002084:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002086:	f7fe fb9d 	bl	80007c4 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208e:	f7fe fb99 	bl	80007c4 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0fd      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b81      	ldr	r3, [pc, #516]	; (80022a8 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d106      	bne.n	80020c2 <HAL_RCC_OscConfig+0x312>
 80020b4:	4b7b      	ldr	r3, [pc, #492]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a7a      	ldr	r2, [pc, #488]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	e02d      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x334>
 80020ca:	4b76      	ldr	r3, [pc, #472]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	4a75      	ldr	r2, [pc, #468]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	f023 0301 	bic.w	r3, r3, #1
 80020d4:	6213      	str	r3, [r2, #32]
 80020d6:	4b73      	ldr	r3, [pc, #460]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a72      	ldr	r2, [pc, #456]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 0304 	bic.w	r3, r3, #4
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	e01c      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x356>
 80020ec:	4b6d      	ldr	r3, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a6c      	ldr	r2, [pc, #432]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6213      	str	r3, [r2, #32]
 80020f8:	4b6a      	ldr	r3, [pc, #424]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a69      	ldr	r2, [pc, #420]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	e00b      	b.n	800211e <HAL_RCC_OscConfig+0x36e>
 8002106:	4b67      	ldr	r3, [pc, #412]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a66      	ldr	r2, [pc, #408]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b64      	ldr	r3, [pc, #400]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a63      	ldr	r2, [pc, #396]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d015      	beq.n	8002152 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002126:	f7fe fb4d 	bl	80007c4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fb49 	bl	80007c4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0ab      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002144:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d0ee      	beq.n	800212e <HAL_RCC_OscConfig+0x37e>
 8002150:	e014      	b.n	800217c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002152:	f7fe fb37 	bl	80007c4 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002158:	e00a      	b.n	8002170 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215a:	f7fe fb33 	bl	80007c4 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	f241 3288 	movw	r2, #5000	; 0x1388
 8002168:	4293      	cmp	r3, r2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e095      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002170:	4b4c      	ldr	r3, [pc, #304]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1ee      	bne.n	800215a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d105      	bne.n	800218e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002182:	4b48      	ldr	r3, [pc, #288]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a47      	ldr	r2, [pc, #284]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	f000 8081 	beq.w	800229a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	4b42      	ldr	r3, [pc, #264]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d061      	beq.n	8002268 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d146      	bne.n	800223a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fb07 	bl	80007c4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fb03 	bl	80007c4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e067      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021cc:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021e0:	d108      	bne.n	80021f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	492d      	ldr	r1, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a19      	ldr	r1, [r3, #32]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	430b      	orrs	r3, r1
 8002206:	4927      	ldr	r1, [pc, #156]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 800220e:	2201      	movs	r2, #1
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7fe fad7 	bl	80007c4 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe fad3 	bl	80007c4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e037      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x46a>
 8002238:	e02f      	b.n	800229a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223a:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCC_OscConfig+0x4fc>)
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002240:	f7fe fac0 	bl	80007c4 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7fe fabc 	bl	80007c4 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e020      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f0      	bne.n	8002248 <HAL_RCC_OscConfig+0x498>
 8002266:	e018      	b.n	800229a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e013      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40007000 	.word	0x40007000
 80022ac:	42420060 	.word	0x42420060

080022b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0d0      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b6a      	ldr	r3, [pc, #424]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b67      	ldr	r3, [pc, #412]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	4965      	ldr	r1, [pc, #404]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002312:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002316:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800232e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d040      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d115      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d107      	bne.n	800237e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	4b41      	ldr	r3, [pc, #260]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e073      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b3d      	ldr	r3, [pc, #244]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06b      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f023 0203 	bic.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	4936      	ldr	r1, [pc, #216]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a0:	f7fe fa10 	bl	80007c4 <HAL_GetTick>
 80023a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	e00a      	b.n	80023be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a8:	f7fe fa0c 	bl	80007c4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e053      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 020c 	and.w	r2, r3, #12
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d1eb      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d210      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 0207 	bic.w	r2, r3, #7
 80023e6:	4922      	ldr	r1, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 800243a:	4313      	orrs	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800243e:	f000 f821 	bl	8002484 <HAL_RCC_GetSysClockFreq>
 8002442:	4601      	mov	r1, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	fa21 f303 	lsr.w	r3, r1, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1cc>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1d0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f96e 	bl	8000740 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40022000 	.word	0x40022000
 8002474:	40021000 	.word	0x40021000
 8002478:	08003bc0 	.word	0x08003bc0
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002484:	b490      	push	{r4, r7}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_RCC_GetSysClockFreq+0xb0>)
 800248c:	1d3c      	adds	r4, r7, #4
 800248e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002490:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002494:	4b28      	ldr	r3, [pc, #160]	; (8002538 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	2300      	movs	r3, #0
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	2300      	movs	r3, #0
 80024a4:	627b      	str	r3, [r7, #36]	; 0x24
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b23      	ldr	r3, [pc, #140]	; (800253c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x40>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x46>
 80024c2:	e02d      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024c6:	623b      	str	r3, [r7, #32]
      break;
 80024c8:	e02d      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024d6:	4413      	add	r3, r2
 80024d8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024dc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e8:	4b14      	ldr	r3, [pc, #80]	; (800253c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0c5b      	lsrs	r3, r3, #17
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80024f6:	4413      	add	r3, r2
 80024f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80024fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002502:	fb02 f203 	mul.w	r2, r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	fbb2 f3f3 	udiv	r3, r2, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e004      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	623b      	str	r3, [r7, #32]
      break;
 800251e:	e002      	b.n	8002526 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002520:	4b07      	ldr	r3, [pc, #28]	; (8002540 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002522:	623b      	str	r3, [r7, #32]
      break;
 8002524:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002526:	6a3b      	ldr	r3, [r7, #32]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bc90      	pop	{r4, r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	08003bac 	.word	0x08003bac
 8002538:	08003bbc 	.word	0x08003bbc
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	003d0900 	.word	0x003d0900

08002548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800254c:	4b02      	ldr	r3, [pc, #8]	; (8002558 <HAL_RCC_GetHCLKFreq+0x10>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002560:	f7ff fff2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 8002564:	4601      	mov	r1, r0
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4a03      	ldr	r2, [pc, #12]	; (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002578:	4618      	mov	r0, r3
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	08003bd0 	.word	0x08003bd0

08002584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002588:	f7ff ffde 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 800258c:	4601      	mov	r1, r0
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4a03      	ldr	r2, [pc, #12]	; (80025a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800259a:	5cd3      	ldrb	r3, [r2, r3]
 800259c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40021000 	.word	0x40021000
 80025a8:	08003bd0 	.word	0x08003bd0

080025ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025b4:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <RCC_Delay+0x34>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0a      	ldr	r2, [pc, #40]	; (80025e4 <RCC_Delay+0x38>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0a5b      	lsrs	r3, r3, #9
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	fb02 f303 	mul.w	r3, r2, r3
 80025c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025c8:	bf00      	nop
  }
  while (Delay --);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1e5a      	subs	r2, r3, #1
 80025ce:	60fa      	str	r2, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f9      	bne.n	80025c8 <RCC_Delay+0x1c>
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bc80      	pop	{r7}
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000000 	.word	0x20000000
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e041      	b.n	800267e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d106      	bne.n	8002614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f7fd ff9e 	bl	8000550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	3304      	adds	r3, #4
 8002624:	4619      	mov	r1, r3
 8002626:	4610      	mov	r0, r2
 8002628:	f000 fa1a 	bl	8002a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b02      	cmp	r3, #2
 800269a:	d122      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d11b      	bne.n	80026e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f06f 0202 	mvn.w	r2, #2
 80026b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f9ad 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80026ce:	e005      	b.n	80026dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f9a0 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9af 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d122      	bne.n	8002736 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b04      	cmp	r3, #4
 80026fc:	d11b      	bne.n	8002736 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f06f 0204 	mvn.w	r2, #4
 8002706:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2202      	movs	r2, #2
 800270c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f983 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002722:	e005      	b.n	8002730 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f976 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f985 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b08      	cmp	r3, #8
 8002742:	d122      	bne.n	800278a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b08      	cmp	r3, #8
 8002750:	d11b      	bne.n	800278a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f06f 0208 	mvn.w	r2, #8
 800275a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f959 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 8002776:	e005      	b.n	8002784 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f94c 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f95b 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0310 	and.w	r3, r3, #16
 8002794:	2b10      	cmp	r3, #16
 8002796:	d122      	bne.n	80027de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b10      	cmp	r3, #16
 80027a4:	d11b      	bne.n	80027de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0210 	mvn.w	r2, #16
 80027ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2208      	movs	r2, #8
 80027b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69db      	ldr	r3, [r3, #28]
 80027bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d003      	beq.n	80027cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f92f 	bl	8002a28 <HAL_TIM_IC_CaptureCallback>
 80027ca:	e005      	b.n	80027d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f922 	bl	8002a16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f931 	bl	8002a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d10e      	bne.n	800280a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f06f 0201 	mvn.w	r2, #1
 8002802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8fd 	bl	8002a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d10e      	bne.n	8002836 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b80      	cmp	r3, #128	; 0x80
 8002824:	d107      	bne.n	8002836 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800282e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fa74 	bl	8002d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d10e      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284e:	2b40      	cmp	r3, #64	; 0x40
 8002850:	d107      	bne.n	8002862 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800285a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f8f5 	bl	8002a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d10e      	bne.n	800288e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 0320 	and.w	r3, r3, #32
 800287a:	2b20      	cmp	r3, #32
 800287c:	d107      	bne.n	800288e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f06f 0220 	mvn.w	r2, #32
 8002886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fa3f 	bl	8002d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	b084      	sub	sp, #16
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
 800289e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_ConfigClockSource+0x18>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e0a6      	b.n	80029fc <HAL_TIM_ConfigClockSource+0x166>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b40      	cmp	r3, #64	; 0x40
 80028e4:	d067      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x120>
 80028e6:	2b40      	cmp	r3, #64	; 0x40
 80028e8:	d80b      	bhi.n	8002902 <HAL_TIM_ConfigClockSource+0x6c>
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d073      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x140>
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d802      	bhi.n	80028f8 <HAL_TIM_ConfigClockSource+0x62>
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d06f      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028f6:	e078      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d06c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x140>
 80028fc:	2b30      	cmp	r3, #48	; 0x30
 80028fe:	d06a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002900:	e073      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002902:	2b70      	cmp	r3, #112	; 0x70
 8002904:	d00d      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0x8c>
 8002906:	2b70      	cmp	r3, #112	; 0x70
 8002908:	d804      	bhi.n	8002914 <HAL_TIM_ConfigClockSource+0x7e>
 800290a:	2b50      	cmp	r3, #80	; 0x50
 800290c:	d033      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xe0>
 800290e:	2b60      	cmp	r3, #96	; 0x60
 8002910:	d041      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002912:	e06a      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002918:	d066      	beq.n	80029e8 <HAL_TIM_ConfigClockSource+0x152>
 800291a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291e:	d017      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002920:	e063      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f000 f96e 	bl	8002c12 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002944:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	609a      	str	r2, [r3, #8]
      break;
 800294e:	e04c      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f000 f957 	bl	8002c12 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e039      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f8ce 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2150      	movs	r1, #80	; 0x50
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f925 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 8002994:	e029      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 f8ec 	bl	8002b80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2160      	movs	r1, #96	; 0x60
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f915 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 80029b4:	e019      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 f8ae 	bl	8002b24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	; 0x40
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f905 	bl	8002bde <TIM_ITRx_SetConfig>
      break;
 80029d4:	e009      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 f8fc 	bl	8002bde <TIM_ITRx_SetConfig>
        break;
 80029e6:	e000      	b.n	80029ea <HAL_TIM_ConfigClockSource+0x154>
      break;
 80029e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b083      	sub	sp, #12
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bc80      	pop	{r7}
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
	...

08002a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <TIM_Base_SetConfig+0xb8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00b      	beq.n	8002a90 <TIM_Base_SetConfig+0x30>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7e:	d007      	beq.n	8002a90 <TIM_Base_SetConfig+0x30>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a26      	ldr	r2, [pc, #152]	; (8002b1c <TIM_Base_SetConfig+0xbc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_Base_SetConfig+0x30>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <TIM_Base_SetConfig+0xc0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d108      	bne.n	8002aa2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a1c      	ldr	r2, [pc, #112]	; (8002b18 <TIM_Base_SetConfig+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_Base_SetConfig+0x62>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab0:	d007      	beq.n	8002ac2 <TIM_Base_SetConfig+0x62>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a19      	ldr	r2, [pc, #100]	; (8002b1c <TIM_Base_SetConfig+0xbc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0x62>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a18      	ldr	r2, [pc, #96]	; (8002b20 <TIM_Base_SetConfig+0xc0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <TIM_Base_SetConfig+0xb8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d103      	bne.n	8002b08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	691a      	ldr	r2, [r3, #16]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	615a      	str	r2, [r3, #20]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr
 8002b18:	40012c00 	.word	0x40012c00
 8002b1c:	40000400 	.word	0x40000400
 8002b20:	40000800 	.word	0x40000800

08002b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	f023 0201 	bic.w	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 030a 	bic.w	r3, r3, #10
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	621a      	str	r2, [r3, #32]
}
 8002b76:	bf00      	nop
 8002b78:	371c      	adds	r7, #28
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f023 0210 	bic.w	r2, r3, #16
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002baa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bbc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	621a      	str	r2, [r3, #32]
}
 8002bd4:	bf00      	nop
 8002bd6:	371c      	adds	r7, #28
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b085      	sub	sp, #20
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f043 0307 	orr.w	r3, r3, #7
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]
}
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
 8002c1e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	609a      	str	r2, [r3, #8]
}
 8002c46:	bf00      	nop
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bc80      	pop	{r7}
 8002c4e:	4770      	bx	lr

08002c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d101      	bne.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c64:	2302      	movs	r3, #2
 8002c66:	e046      	b.n	8002cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d00e      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb4:	d009      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d004      	beq.n	8002cca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800

08002d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e03f      	b.n	8002dc2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d106      	bne.n	8002d5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7fd fc1e 	bl	8000598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fb39 	bl	80033ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695a      	ldr	r2, [r3, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002da8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b08a      	sub	sp, #40	; 0x28
 8002dce:	af02      	add	r7, sp, #8
 8002dd0:	60f8      	str	r0, [r7, #12]
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	d17c      	bne.n	8002ee4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_UART_Transmit+0x2c>
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e075      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_UART_Transmit+0x3e>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e06e      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	; 0x21
 8002e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e1e:	f7fd fcd1 	bl	80007c4 <HAL_GetTick>
 8002e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	88fa      	ldrh	r2, [r7, #6]
 8002e28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d108      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d104      	bne.n	8002e4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e42:	2300      	movs	r3, #0
 8002e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	61bb      	str	r3, [r7, #24]
 8002e4a:	e003      	b.n	8002e54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e5c:	e02a      	b.n	8002eb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2200      	movs	r2, #0
 8002e66:	2180      	movs	r1, #128	; 0x80
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f95c 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e036      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	3302      	adds	r3, #2
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	e007      	b.n	8002ea6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	3b01      	subs	r3, #1
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1cf      	bne.n	8002e5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2140      	movs	r1, #64	; 0x40
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f92c 	bl	8003126 <UART_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e006      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	e000      	b.n	8002ee6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ee4:	2302      	movs	r3, #2
  }
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3720      	adds	r7, #32
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0320 	and.w	r3, r3, #32
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x52>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9d5 	bl	80032ea <UART_Receive_IT>
      return;
 8002f40:	e0d1      	b.n	80030e6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 80b0 	beq.w	80030aa <HAL_UART_IRQHandler+0x1ba>
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d105      	bne.n	8002f60 <HAL_UART_IRQHandler+0x70>
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 80a5 	beq.w	80030aa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_UART_IRQHandler+0x90>
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xb0>
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d005      	beq.n	8002fa0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	f043 0202 	orr.w	r2, r3, #2
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xd0>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	f043 0204 	orr.w	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0308 	and.w	r3, r3, #8
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00f      	beq.n	8002fea <HAL_UART_IRQHandler+0xfa>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d104      	bne.n	8002fde <HAL_UART_IRQHandler+0xee>
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d078      	beq.n	80030e4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	f003 0320 	and.w	r3, r3, #32
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f96f 	bl	80032ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <HAL_UART_IRQHandler+0x144>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d031      	beq.n	8003098 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8c0 	bl	80031ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003044:	2b00      	cmp	r3, #0
 8003046:	d023      	beq.n	8003090 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003056:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	4a21      	ldr	r2, [pc, #132]	; (80030ec <HAL_UART_IRQHandler+0x1fc>)
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800306c:	4618      	mov	r0, r3
 800306e:	f7fd fce3 	bl	8000a38 <HAL_DMA_Abort_IT>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d016      	beq.n	80030a6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003082:	4610      	mov	r0, r2
 8003084:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003086:	e00e      	b.n	80030a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f843 	bl	8003114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308e:	e00a      	b.n	80030a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f83f 	bl	8003114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003096:	e006      	b.n	80030a6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f000 f83b 	bl	8003114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80030a4:	e01e      	b.n	80030e4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a6:	bf00      	nop
    return;
 80030a8:	e01c      	b.n	80030e4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1d6>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8ac 	bl	800321c <UART_Transmit_IT>
    return;
 80030c4:	e00f      	b.n	80030e6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1f6>
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d005      	beq.n	80030e6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f8ed 	bl	80032ba <UART_EndTransmit_IT>
    return;
 80030e0:	bf00      	nop
 80030e2:	e000      	b.n	80030e6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80030e4:	bf00      	nop
  }
}
 80030e6:	3720      	adds	r7, #32
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	080031f5 	.word	0x080031f5

080030f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	bc80      	pop	{r7}
 8003124:	4770      	bx	lr

08003126 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	60f8      	str	r0, [r7, #12]
 800312e:	60b9      	str	r1, [r7, #8]
 8003130:	603b      	str	r3, [r7, #0]
 8003132:	4613      	mov	r3, r2
 8003134:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003136:	e02c      	b.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800313e:	d028      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <UART_WaitOnFlagUntilTimeout+0x30>
 8003146:	f7fd fb3d 	bl	80007c4 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	429a      	cmp	r2, r3
 8003154:	d21d      	bcs.n	8003192 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003164:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695a      	ldr	r2, [r3, #20]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e00f      	b.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d0c3      	beq.n	8003138 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80031d0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2220      	movs	r2, #32
 80031e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f7ff ff80 	bl	8003114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b21      	cmp	r3, #33	; 0x21
 800322e:	d13e      	bne.n	80032ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003238:	d114      	bne.n	8003264 <UART_Transmit_IT+0x48>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d110      	bne.n	8003264 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	461a      	mov	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003256:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	1c9a      	adds	r2, r3, #2
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	621a      	str	r2, [r3, #32]
 8003262:	e008      	b.n	8003276 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	1c59      	adds	r1, r3, #1
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	6211      	str	r1, [r2, #32]
 800326e:	781a      	ldrb	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29b      	uxth	r3, r3
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	4619      	mov	r1, r3
 8003284:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10f      	bne.n	80032aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68da      	ldr	r2, [r3, #12]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003298:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032aa:	2300      	movs	r3, #0
 80032ac:	e000      	b.n	80032b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
  }
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr

080032ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f7ff ff08 	bl	80030f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b084      	sub	sp, #16
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b22      	cmp	r3, #34	; 0x22
 80032fc:	d170      	bne.n	80033e0 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003306:	d117      	bne.n	8003338 <UART_Receive_IT+0x4e>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d113      	bne.n	8003338 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003318:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b29b      	uxth	r3, r3
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	b29a      	uxth	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	629a      	str	r2, [r3, #40]	; 0x28
 8003336:	e026      	b.n	8003386 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334a:	d007      	beq.n	800335c <UART_Receive_IT+0x72>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <UART_Receive_IT+0x80>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d106      	bne.n	800336a <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e008      	b.n	800337c <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003376:	b2da      	uxtb	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800338a:	b29b      	uxth	r3, r3
 800338c:	3b01      	subs	r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4619      	mov	r1, r3
 8003394:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003396:	2b00      	cmp	r3, #0
 8003398:	d120      	bne.n	80033dc <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0220 	bic.w	r2, r2, #32
 80033a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fe95 	bl	8003102 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80033d8:	2300      	movs	r3, #0
 80033da:	e002      	b.n	80033e2 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	431a      	orrs	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4313      	orrs	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003426:	f023 030c 	bic.w	r3, r3, #12
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	430b      	orrs	r3, r1
 8003432:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699a      	ldr	r2, [r3, #24]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2c      	ldr	r2, [pc, #176]	; (8003500 <UART_SetConfig+0x114>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7ff f896 	bl	8002584 <HAL_RCC_GetPCLK2Freq>
 8003458:	60f8      	str	r0, [r7, #12]
 800345a:	e002      	b.n	8003462 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff f87e 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8003460:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009a      	lsls	r2, r3, #2
 800346c:	441a      	add	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	4a22      	ldr	r2, [pc, #136]	; (8003504 <UART_SetConfig+0x118>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	0119      	lsls	r1, r3, #4
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009a      	lsls	r2, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	fbb2 f2f3 	udiv	r2, r2, r3
 8003498:	4b1a      	ldr	r3, [pc, #104]	; (8003504 <UART_SetConfig+0x118>)
 800349a:	fba3 0302 	umull	r0, r3, r3, r2
 800349e:	095b      	lsrs	r3, r3, #5
 80034a0:	2064      	movs	r0, #100	; 0x64
 80034a2:	fb00 f303 	mul.w	r3, r0, r3
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	3332      	adds	r3, #50	; 0x32
 80034ac:	4a15      	ldr	r2, [pc, #84]	; (8003504 <UART_SetConfig+0x118>)
 80034ae:	fba2 2303 	umull	r2, r3, r2, r3
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b8:	4419      	add	r1, r3
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <UART_SetConfig+0x118>)
 80034d2:	fba3 0302 	umull	r0, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2064      	movs	r0, #100	; 0x64
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a07      	ldr	r2, [pc, #28]	; (8003504 <UART_SetConfig+0x118>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 020f 	and.w	r2, r3, #15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	440a      	add	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40013800 	.word	0x40013800
 8003504:	51eb851f 	.word	0x51eb851f

08003508 <bluetooth_transmit_humi>:
uint8_t string_humidity[]="humidity:";

uint8_t space='\n';

void bluetooth_transmit_humi(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
	uint8_t temp[2]={
 800350e:	2300      	movs	r3, #0
 8003510:	713b      	strb	r3, [r7, #4]
 8003512:	2300      	movs	r3, #0
 8003514:	717b      	strb	r3, [r7, #5]
			0,0,
	};

	HAL_UART_Transmit(&huart1,string_humidity , sizeof(string_humidity),0xFF);
 8003516:	23ff      	movs	r3, #255	; 0xff
 8003518:	220a      	movs	r2, #10
 800351a:	4913      	ldr	r1, [pc, #76]	; (8003568 <bluetooth_transmit_humi+0x60>)
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <bluetooth_transmit_humi+0x64>)
 800351e:	f7ff fc54 	bl	8002dca <HAL_UART_Transmit>
	temp[0]=(dht11_data[0] / 10)+48;
 8003522:	4b13      	ldr	r3, [pc, #76]	; (8003570 <bluetooth_transmit_humi+0x68>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <bluetooth_transmit_humi+0x6c>)
 8003528:	fba2 2303 	umull	r2, r3, r2, r3
 800352c:	08db      	lsrs	r3, r3, #3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3330      	adds	r3, #48	; 0x30
 8003532:	b2db      	uxtb	r3, r3
 8003534:	713b      	strb	r3, [r7, #4]
	temp[1]=(dht11_data[0] % 10)+48;
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <bluetooth_transmit_humi+0x68>)
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <bluetooth_transmit_humi+0x6c>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	08d9      	lsrs	r1, r3, #3
 8003542:	460b      	mov	r3, r1
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b2db      	uxtb	r3, r3
 800354e:	3330      	adds	r3, #48	; 0x30
 8003550:	b2db      	uxtb	r3, r3
 8003552:	717b      	strb	r3, [r7, #5]

	HAL_UART_Transmit(&huart1, temp, sizeof(temp), 0xFF);
 8003554:	1d39      	adds	r1, r7, #4
 8003556:	23ff      	movs	r3, #255	; 0xff
 8003558:	2202      	movs	r2, #2
 800355a:	4804      	ldr	r0, [pc, #16]	; (800356c <bluetooth_transmit_humi+0x64>)
 800355c:	f7ff fc35 	bl	8002dca <HAL_UART_Transmit>
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	2000000c 	.word	0x2000000c
 800356c:	20000090 	.word	0x20000090
 8003570:	20000034 	.word	0x20000034
 8003574:	cccccccd 	.word	0xcccccccd

08003578 <bluetooth_transmit>:

void bluetooth_transmit(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	bluetooth_transmit_humi();
 800357c:	f7ff ffc4 	bl	8003508 <bluetooth_transmit_humi>
	HAL_UART_Transmit(&huart1, &space, sizeof(space), 0xFF);
 8003580:	23ff      	movs	r3, #255	; 0xff
 8003582:	2201      	movs	r2, #1
 8003584:	4902      	ldr	r1, [pc, #8]	; (8003590 <bluetooth_transmit+0x18>)
 8003586:	4803      	ldr	r0, [pc, #12]	; (8003594 <bluetooth_transmit+0x1c>)
 8003588:	f7ff fc1f 	bl	8002dca <HAL_UART_Transmit>
}
 800358c:	bf00      	nop
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000016 	.word	0x20000016
 8003594:	20000090 	.word	0x20000090

08003598 <delay_us>:
		0,0,0,0,0,
};
uint8_t count=1;

void delay_us(uint32_t time)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 4000000 * time);
 80035a0:	f7fe ffd2 	bl	8002548 <HAL_RCC_GetHCLKFreq>
 80035a4:	4602      	mov	r2, r0
 80035a6:	4b09      	ldr	r3, [pc, #36]	; (80035cc <delay_us+0x34>)
 80035a8:	fba3 2302 	umull	r2, r3, r3, r2
 80035ac:	0d1a      	lsrs	r2, r3, #20
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	fb02 f303 	mul.w	r3, r2, r3
 80035b4:	60fb      	str	r3, [r7, #12]
	while(delay--);
 80035b6:	bf00      	nop
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	60fa      	str	r2, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1fa      	bne.n	80035b8 <delay_us+0x20>
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	431bde83 	.word	0x431bde83

080035d0 <DHT11_readByte>:

uint8_t DHT11_readByte(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
	uint8_t data_read=0;
 80035d6:	2300      	movs	r3, #0
 80035d8:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 80035da:	2300      	movs	r3, #0
 80035dc:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0;i<8;i++)
 80035de:	2300      	movs	r3, #0
 80035e0:	717b      	strb	r3, [r7, #5]
 80035e2:	e034      	b.n	800364e <DHT11_readByte+0x7e>
	{
		count=1;
 80035e4:	2301      	movs	r3, #1
 80035e6:	71bb      	strb	r3, [r7, #6]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 80035e8:	bf00      	nop
 80035ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80035ee:	481c      	ldr	r0, [pc, #112]	; (8003660 <DHT11_readByte+0x90>)
 80035f0:	f7fd fbf2 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <DHT11_readByte+0x34>
 80035fa:	79bb      	ldrb	r3, [r7, #6]
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	71ba      	strb	r2, [r7, #6]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f2      	bne.n	80035ea <DHT11_readByte+0x1a>

		delay_us(28);
 8003604:	201c      	movs	r0, #28
 8003606:	f7ff ffc7 	bl	8003598 <delay_us>

		data_read<<=1;
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	71fb      	strb	r3, [r7, #7]

		if(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 8003610:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003614:	4812      	ldr	r0, [pc, #72]	; (8003660 <DHT11_readByte+0x90>)
 8003616:	f7fd fbdf 	bl	8000dd8 <HAL_GPIO_ReadPin>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d003      	beq.n	8003628 <DHT11_readByte+0x58>
		{
			data_read |= 1;
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	71fb      	strb	r3, [r7, #7]
		}

		count=1;
 8003628:	2301      	movs	r3, #1
 800362a:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 800362c:	bf00      	nop
 800362e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003632:	480b      	ldr	r0, [pc, #44]	; (8003660 <DHT11_readByte+0x90>)
 8003634:	f7fd fbd0 	bl	8000dd8 <HAL_GPIO_ReadPin>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <DHT11_readByte+0x78>
 800363e:	79bb      	ldrb	r3, [r7, #6]
 8003640:	1c5a      	adds	r2, r3, #1
 8003642:	71ba      	strb	r2, [r7, #6]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f2      	bne.n	800362e <DHT11_readByte+0x5e>
	for(uint8_t i=0;i<8;i++)
 8003648:	797b      	ldrb	r3, [r7, #5]
 800364a:	3301      	adds	r3, #1
 800364c:	717b      	strb	r3, [r7, #5]
 800364e:	797b      	ldrb	r3, [r7, #5]
 8003650:	2b07      	cmp	r3, #7
 8003652:	d9c7      	bls.n	80035e4 <DHT11_readByte+0x14>
	}

	return data_read;
 8003654:	79fb      	ldrb	r3, [r7, #7]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40010800 	.word	0x40010800

08003664 <DHT11_read>:

void DHT11_read(void)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 800366a:	2201      	movs	r2, #1
 800366c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003670:	4829      	ldr	r0, [pc, #164]	; (8003718 <DHT11_read+0xb4>)
 8003672:	f7fd fbc8 	bl	8000e06 <HAL_GPIO_WritePin>
	delay_us(20);
 8003676:	2014      	movs	r0, #20
 8003678:	f7ff ff8e 	bl	8003598 <delay_us>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_RESET);
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003682:	4825      	ldr	r0, [pc, #148]	; (8003718 <DHT11_read+0xb4>)
 8003684:	f7fd fbbf 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8003688:	2014      	movs	r0, #20
 800368a:	f7fd f8a5 	bl	80007d8 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003694:	4820      	ldr	r0, [pc, #128]	; (8003718 <DHT11_read+0xb4>)
 8003696:	f7fd fbb6 	bl	8000e06 <HAL_GPIO_WritePin>
	delay_us(20);
 800369a:	2014      	movs	r0, #20
 800369c:	f7ff ff7c 	bl	8003598 <delay_us>

	if(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 80036a0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036a4:	481c      	ldr	r0, [pc, #112]	; (8003718 <DHT11_read+0xb4>)
 80036a6:	f7fd fb97 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d12f      	bne.n	8003710 <DHT11_read+0xac>
	{
		count=1;
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <DHT11_read+0xb8>)
 80036b2:	2201      	movs	r2, #1
 80036b4:	701a      	strb	r2, [r3, #0]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 80036b6:	bf00      	nop
 80036b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036bc:	4816      	ldr	r0, [pc, #88]	; (8003718 <DHT11_read+0xb4>)
 80036be:	f7fd fb8b 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d107      	bne.n	80036d8 <DHT11_read+0x74>
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <DHT11_read+0xb8>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	b2d1      	uxtb	r1, r2
 80036d0:	4a12      	ldr	r2, [pc, #72]	; (800371c <DHT11_read+0xb8>)
 80036d2:	7011      	strb	r1, [r2, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1ef      	bne.n	80036b8 <DHT11_read+0x54>

		count=1;
 80036d8:	4b10      	ldr	r3, [pc, #64]	; (800371c <DHT11_read+0xb8>)
 80036da:	2201      	movs	r2, #1
 80036dc:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin));
 80036de:	bf00      	nop
 80036e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036e4:	480c      	ldr	r0, [pc, #48]	; (8003718 <DHT11_read+0xb4>)
 80036e6:	f7fd fb77 	bl	8000dd8 <HAL_GPIO_ReadPin>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1f7      	bne.n	80036e0 <DHT11_read+0x7c>

		for(uint8_t i=0;i<5;i++)
 80036f0:	2300      	movs	r3, #0
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	e009      	b.n	800370a <DHT11_read+0xa6>
		{
			dht11_data[i]=DHT11_readByte();
 80036f6:	79fc      	ldrb	r4, [r7, #7]
 80036f8:	f7ff ff6a 	bl	80035d0 <DHT11_readByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	4b07      	ldr	r3, [pc, #28]	; (8003720 <DHT11_read+0xbc>)
 8003702:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=0;i<5;i++)
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	3301      	adds	r3, #1
 8003708:	71fb      	strb	r3, [r7, #7]
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d9f2      	bls.n	80036f6 <DHT11_read+0x92>
		}
	}

}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	bd90      	pop	{r4, r7, pc}
 8003718:	40010800 	.word	0x40010800
 800371c:	20000017 	.word	0x20000017
 8003720:	20000034 	.word	0x20000034

08003724 <GY30_read>:

extern I2C_HandleTypeDef hi2c2;
uint16_t gy30_data=0;

void GY30_read(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af02      	add	r7, sp, #8
	uint8_t temp[2]={
 800372a:	2300      	movs	r3, #0
 800372c:	713b      	strb	r3, [r7, #4]
 800372e:	2300      	movs	r3, #0
 8003730:	717b      	strb	r3, [r7, #5]
			0,0,
	};
	uint8_t GY30_readCom=0x10;
 8003732:	2310      	movs	r3, #16
 8003734:	70fb      	strb	r3, [r7, #3]

	HAL_I2C_Master_Transmit(&hi2c2, GY30_WRITE_ADDR, &GY30_readCom, sizeof(GY30_readCom), 0xFF);
 8003736:	1cfa      	adds	r2, r7, #3
 8003738:	23ff      	movs	r3, #255	; 0xff
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	2301      	movs	r3, #1
 800373e:	2146      	movs	r1, #70	; 0x46
 8003740:	480d      	ldr	r0, [pc, #52]	; (8003778 <GY30_read+0x54>)
 8003742:	f7fd fcb1 	bl	80010a8 <HAL_I2C_Master_Transmit>
	HAL_Delay(200);
 8003746:	20c8      	movs	r0, #200	; 0xc8
 8003748:	f7fd f846 	bl	80007d8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, GY30_READ_ADDR, temp, sizeof(temp), 0xFF);
 800374c:	1d3a      	adds	r2, r7, #4
 800374e:	23ff      	movs	r3, #255	; 0xff
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	2302      	movs	r3, #2
 8003754:	2147      	movs	r1, #71	; 0x47
 8003756:	4808      	ldr	r0, [pc, #32]	; (8003778 <GY30_read+0x54>)
 8003758:	f7fd fda4 	bl	80012a4 <HAL_I2C_Master_Receive>

	gy30_data = (uint16_t)temp[0]<<8 | (uint16_t)temp[1];
 800375c:	793b      	ldrb	r3, [r7, #4]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	b21a      	sxth	r2, r3
 8003762:	797b      	ldrb	r3, [r7, #5]
 8003764:	b21b      	sxth	r3, r3
 8003766:	4313      	orrs	r3, r2
 8003768:	b21b      	sxth	r3, r3
 800376a:	b29a      	uxth	r2, r3
 800376c:	4b03      	ldr	r3, [pc, #12]	; (800377c <GY30_read+0x58>)
 800376e:	801a      	strh	r2, [r3, #0]
}
 8003770:	bf00      	nop
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000003c 	.word	0x2000003c
 800377c:	2000003a 	.word	0x2000003a

08003780 <lcd_write>:

extern uint8_t receiveBuffer;
extern UART_HandleTypeDef huart1;

void lcd_write(uint8_t dat)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800378a:	79fb      	ldrb	r3, [r7, #7]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003798:	4829      	ldr	r0, [pc, #164]	; (8003840 <lcd_write+0xc0>)
 800379a:	f7fd fb34 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	2108      	movs	r1, #8
 80037ae:	4825      	ldr	r0, [pc, #148]	; (8003844 <lcd_write+0xc4>)
 80037b0:	f7fd fb29 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	089b      	lsrs	r3, r3, #2
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	2110      	movs	r1, #16
 80037c4:	481f      	ldr	r0, [pc, #124]	; (8003844 <lcd_write+0xc4>)
 80037c6:	f7fd fb1e 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	08db      	lsrs	r3, r3, #3
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	2120      	movs	r1, #32
 80037da:	481a      	ldr	r0, [pc, #104]	; (8003844 <lcd_write+0xc4>)
 80037dc:	f7fd fb13 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037e0:	79fb      	ldrb	r3, [r7, #7]
 80037e2:	091b      	lsrs	r3, r3, #4
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	2140      	movs	r1, #64	; 0x40
 80037f0:	4814      	ldr	r0, [pc, #80]	; (8003844 <lcd_write+0xc4>)
 80037f2:	f7fd fb08 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	480f      	ldr	r0, [pc, #60]	; (8003844 <lcd_write+0xc4>)
 8003808:	f7fd fafd 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	099b      	lsrs	r3, r3, #6
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800381e:	4809      	ldr	r0, [pc, #36]	; (8003844 <lcd_write+0xc4>)
 8003820:	f7fd faf1 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	09db      	lsrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003830:	4804      	ldr	r0, [pc, #16]	; (8003844 <lcd_write+0xc4>)
 8003832:	f7fd fae8 	bl	8000e06 <HAL_GPIO_WritePin>
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	40010800 	.word	0x40010800
 8003844:	40010c00 	.word	0x40010c00

08003848 <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8003852:	2200      	movs	r2, #0
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	4812      	ldr	r0, [pc, #72]	; (80038a0 <lcd_writeCom+0x58>)
 8003858:	f7fd fad5 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 800385c:	2200      	movs	r2, #0
 800385e:	2140      	movs	r1, #64	; 0x40
 8003860:	480f      	ldr	r0, [pc, #60]	; (80038a0 <lcd_writeCom+0x58>)
 8003862:	f7fd fad0 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8003866:	2200      	movs	r2, #0
 8003868:	2120      	movs	r1, #32
 800386a:	480d      	ldr	r0, [pc, #52]	; (80038a0 <lcd_writeCom+0x58>)
 800386c:	f7fd facb 	bl	8000e06 <HAL_GPIO_WritePin>

	lcd_write(com);
 8003870:	79fb      	ldrb	r3, [r7, #7]
 8003872:	4618      	mov	r0, r3
 8003874:	f7ff ff84 	bl	8003780 <lcd_write>
	HAL_Delay(1);
 8003878:	2001      	movs	r0, #1
 800387a:	f7fc ffad 	bl	80007d8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 800387e:	2201      	movs	r2, #1
 8003880:	2180      	movs	r1, #128	; 0x80
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <lcd_writeCom+0x58>)
 8003884:	f7fd fabf 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8003888:	2001      	movs	r0, #1
 800388a:	f7fc ffa5 	bl	80007d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 800388e:	2200      	movs	r2, #0
 8003890:	2180      	movs	r1, #128	; 0x80
 8003892:	4803      	ldr	r0, [pc, #12]	; (80038a0 <lcd_writeCom+0x58>)
 8003894:	f7fd fab7 	bl	8000e06 <HAL_GPIO_WritePin>
}
 8003898:	bf00      	nop
 800389a:	3708      	adds	r7, #8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010800 	.word	0x40010800

080038a4 <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	4603      	mov	r3, r0
 80038ac:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80038ae:	2200      	movs	r2, #0
 80038b0:	2180      	movs	r1, #128	; 0x80
 80038b2:	4812      	ldr	r0, [pc, #72]	; (80038fc <lcd_writeData+0x58>)
 80038b4:	f7fd faa7 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 80038b8:	2201      	movs	r2, #1
 80038ba:	2140      	movs	r1, #64	; 0x40
 80038bc:	480f      	ldr	r0, [pc, #60]	; (80038fc <lcd_writeData+0x58>)
 80038be:	f7fd faa2 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80038c2:	2200      	movs	r2, #0
 80038c4:	2120      	movs	r1, #32
 80038c6:	480d      	ldr	r0, [pc, #52]	; (80038fc <lcd_writeData+0x58>)
 80038c8:	f7fd fa9d 	bl	8000e06 <HAL_GPIO_WritePin>

	lcd_write(data);
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff56 	bl	8003780 <lcd_write>
	HAL_Delay(1);
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7fc ff7f 	bl	80007d8 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80038da:	2201      	movs	r2, #1
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	4807      	ldr	r0, [pc, #28]	; (80038fc <lcd_writeData+0x58>)
 80038e0:	f7fd fa91 	bl	8000e06 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80038e4:	2001      	movs	r0, #1
 80038e6:	f7fc ff77 	bl	80007d8 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2180      	movs	r1, #128	; 0x80
 80038ee:	4803      	ldr	r0, [pc, #12]	; (80038fc <lcd_writeData+0x58>)
 80038f0:	f7fd fa89 	bl	8000e06 <HAL_GPIO_WritePin>
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010800 	.word	0x40010800

08003900 <lcd_init>:

void lcd_init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 8003904:	2038      	movs	r0, #56	; 0x38
 8003906:	f7ff ff9f 	bl	8003848 <lcd_writeCom>
	lcd_writeCom(0x0c);
 800390a:	200c      	movs	r0, #12
 800390c:	f7ff ff9c 	bl	8003848 <lcd_writeCom>
	lcd_writeCom(0x06);
 8003910:	2006      	movs	r0, #6
 8003912:	f7ff ff99 	bl	8003848 <lcd_writeCom>
	lcd_writeCom(0x01);
 8003916:	2001      	movs	r0, #1
 8003918:	f7ff ff96 	bl	8003848 <lcd_writeCom>
	lcd_writeCom(0X80);
 800391c:	2080      	movs	r0, #128	; 0x80
 800391e:	f7ff ff93 	bl	8003848 <lcd_writeCom>
}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <lcd_show_dht11>:

void lcd_show_dht11(uint8_t *result)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	lcd_writeData((result[0] / 10)+48);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <lcd_show_dht11+0x118>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	b2db      	uxtb	r3, r3
 800393e:	3330      	adds	r3, #48	; 0x30
 8003940:	b2db      	uxtb	r3, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ffae 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result[0] % 10)+48);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	4b3c      	ldr	r3, [pc, #240]	; (8003a40 <lcd_show_dht11+0x118>)
 800394e:	fba3 1302 	umull	r1, r3, r3, r2
 8003952:	08d9      	lsrs	r1, r3, #3
 8003954:	460b      	mov	r3, r1
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	b2db      	uxtb	r3, r3
 8003960:	3330      	adds	r3, #48	; 0x30
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff ff9d 	bl	80038a4 <lcd_writeData>
	lcd_writeData('%');
 800396a:	2025      	movs	r0, #37	; 0x25
 800396c:	f7ff ff9a 	bl	80038a4 <lcd_writeData>
	lcd_writeData(' ');
 8003970:	2020      	movs	r0, #32
 8003972:	f7ff ff97 	bl	80038a4 <lcd_writeData>

	lcd_writeData((result[2] / 10)+48);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3302      	adds	r3, #2
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <lcd_show_dht11+0x118>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	08db      	lsrs	r3, r3, #3
 8003984:	b2db      	uxtb	r3, r3
 8003986:	3330      	adds	r3, #48	; 0x30
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff8a 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result[2] % 10)+48);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3302      	adds	r3, #2
 8003994:	781a      	ldrb	r2, [r3, #0]
 8003996:	4b2a      	ldr	r3, [pc, #168]	; (8003a40 <lcd_show_dht11+0x118>)
 8003998:	fba3 1302 	umull	r1, r3, r3, r2
 800399c:	08d9      	lsrs	r1, r3, #3
 800399e:	460b      	mov	r3, r1
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	3330      	adds	r3, #48	; 0x30
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff78 	bl	80038a4 <lcd_writeData>
	lcd_writeData('.');
 80039b4:	202e      	movs	r0, #46	; 0x2e
 80039b6:	f7ff ff75 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result[3] / 100)+48);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3303      	adds	r3, #3
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <lcd_show_dht11+0x11c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3330      	adds	r3, #48	; 0x30
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ff68 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result[3] % 100 / 10)+48);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3303      	adds	r3, #3
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	4a1a      	ldr	r2, [pc, #104]	; (8003a44 <lcd_show_dht11+0x11c>)
 80039dc:	fba2 1203 	umull	r1, r2, r2, r3
 80039e0:	0952      	lsrs	r2, r2, #5
 80039e2:	2164      	movs	r1, #100	; 0x64
 80039e4:	fb01 f202 	mul.w	r2, r1, r2
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4a14      	ldr	r2, [pc, #80]	; (8003a40 <lcd_show_dht11+0x118>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	08db      	lsrs	r3, r3, #3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	3330      	adds	r3, #48	; 0x30
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff52 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result[3] % 10)+48);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3303      	adds	r3, #3
 8003a04:	781a      	ldrb	r2, [r3, #0]
 8003a06:	4b0e      	ldr	r3, [pc, #56]	; (8003a40 <lcd_show_dht11+0x118>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	08d9      	lsrs	r1, r3, #3
 8003a0e:	460b      	mov	r3, r1
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3330      	adds	r3, #48	; 0x30
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ff40 	bl	80038a4 <lcd_writeData>
	lcd_writeData(0xEB);
 8003a24:	20eb      	movs	r0, #235	; 0xeb
 8003a26:	f7ff ff3d 	bl	80038a4 <lcd_writeData>
	lcd_writeData('C');
 8003a2a:	2043      	movs	r0, #67	; 0x43
 8003a2c:	f7ff ff3a 	bl	80038a4 <lcd_writeData>

	HAL_Delay(1000);
 8003a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a34:	f7fc fed0 	bl	80007d8 <HAL_Delay>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	cccccccd 	.word	0xcccccccd
 8003a44:	51eb851f 	.word	0x51eb851f

08003a48 <lcd_show_gy30>:

void lcd_show_gy30(uint16_t result)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	80fb      	strh	r3, [r7, #6]
	lcd_writeData((result / 10000)+48);
 8003a52:	88fb      	ldrh	r3, [r7, #6]
 8003a54:	4a35      	ldr	r2, [pc, #212]	; (8003b2c <lcd_show_gy30+0xe4>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0b5b      	lsrs	r3, r3, #13
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	3330      	adds	r3, #48	; 0x30
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff ff1d 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result % 10000 /1000)+48);
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	4a2f      	ldr	r2, [pc, #188]	; (8003b2c <lcd_show_gy30+0xe4>)
 8003a6e:	fba2 1203 	umull	r1, r2, r2, r3
 8003a72:	0b52      	lsrs	r2, r2, #13
 8003a74:	f242 7110 	movw	r1, #10000	; 0x2710
 8003a78:	fb01 f202 	mul.w	r2, r1, r2
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	4a2b      	ldr	r2, [pc, #172]	; (8003b30 <lcd_show_gy30+0xe8>)
 8003a82:	fba2 2303 	umull	r2, r3, r2, r3
 8003a86:	099b      	lsrs	r3, r3, #6
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3330      	adds	r3, #48	; 0x30
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4618      	mov	r0, r3
 8003a92:	f7ff ff07 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	4a25      	ldr	r2, [pc, #148]	; (8003b30 <lcd_show_gy30+0xe8>)
 8003a9a:	fba2 1203 	umull	r1, r2, r2, r3
 8003a9e:	0992      	lsrs	r2, r2, #6
 8003aa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003aa4:	fb01 f202 	mul.w	r2, r1, r2
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4a21      	ldr	r2, [pc, #132]	; (8003b34 <lcd_show_gy30+0xec>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	3330      	adds	r3, #48	; 0x30
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff fef1 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	4a1b      	ldr	r2, [pc, #108]	; (8003b34 <lcd_show_gy30+0xec>)
 8003ac6:	fba2 1203 	umull	r1, r2, r2, r3
 8003aca:	0952      	lsrs	r2, r2, #5
 8003acc:	2164      	movs	r1, #100	; 0x64
 8003ace:	fb01 f202 	mul.w	r2, r1, r2
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <lcd_show_gy30+0xf0>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	08db      	lsrs	r3, r3, #3
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	3330      	adds	r3, #48	; 0x30
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff fedc 	bl	80038a4 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8003aec:	88fa      	ldrh	r2, [r7, #6]
 8003aee:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <lcd_show_gy30+0xf0>)
 8003af0:	fba3 1302 	umull	r1, r3, r3, r2
 8003af4:	08d9      	lsrs	r1, r3, #3
 8003af6:	460b      	mov	r3, r1
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	3330      	adds	r3, #48	; 0x30
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fecb 	bl	80038a4 <lcd_writeData>
	lcd_writeData('L');
 8003b0e:	204c      	movs	r0, #76	; 0x4c
 8003b10:	f7ff fec8 	bl	80038a4 <lcd_writeData>
	lcd_writeData('x');
 8003b14:	2078      	movs	r0, #120	; 0x78
 8003b16:	f7ff fec5 	bl	80038a4 <lcd_writeData>

	HAL_Delay(1000);
 8003b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b1e:	f7fc fe5b 	bl	80007d8 <HAL_Delay>
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	d1b71759 	.word	0xd1b71759
 8003b30:	10624dd3 	.word	0x10624dd3
 8003b34:	51eb851f 	.word	0x51eb851f
 8003b38:	cccccccd 	.word	0xcccccccd

08003b3c <__libc_init_array>:
 8003b3c:	b570      	push	{r4, r5, r6, lr}
 8003b3e:	2500      	movs	r5, #0
 8003b40:	4e0c      	ldr	r6, [pc, #48]	; (8003b74 <__libc_init_array+0x38>)
 8003b42:	4c0d      	ldr	r4, [pc, #52]	; (8003b78 <__libc_init_array+0x3c>)
 8003b44:	1ba4      	subs	r4, r4, r6
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	42a5      	cmp	r5, r4
 8003b4a:	d109      	bne.n	8003b60 <__libc_init_array+0x24>
 8003b4c:	f000 f822 	bl	8003b94 <_init>
 8003b50:	2500      	movs	r5, #0
 8003b52:	4e0a      	ldr	r6, [pc, #40]	; (8003b7c <__libc_init_array+0x40>)
 8003b54:	4c0a      	ldr	r4, [pc, #40]	; (8003b80 <__libc_init_array+0x44>)
 8003b56:	1ba4      	subs	r4, r4, r6
 8003b58:	10a4      	asrs	r4, r4, #2
 8003b5a:	42a5      	cmp	r5, r4
 8003b5c:	d105      	bne.n	8003b6a <__libc_init_array+0x2e>
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b64:	4798      	blx	r3
 8003b66:	3501      	adds	r5, #1
 8003b68:	e7ee      	b.n	8003b48 <__libc_init_array+0xc>
 8003b6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003b6e:	4798      	blx	r3
 8003b70:	3501      	adds	r5, #1
 8003b72:	e7f2      	b.n	8003b5a <__libc_init_array+0x1e>
 8003b74:	08003bd8 	.word	0x08003bd8
 8003b78:	08003bd8 	.word	0x08003bd8
 8003b7c:	08003bd8 	.word	0x08003bd8
 8003b80:	08003bdc 	.word	0x08003bdc

08003b84 <memset>:
 8003b84:	4603      	mov	r3, r0
 8003b86:	4402      	add	r2, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
