
AirDetect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fe4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005140  08005140  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  08005140  08005140  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005140  08005140  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005144  08005144  00015144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  08005148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000004c  08005194  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005194  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f06  00000000  00000000  00020075  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000257c  00000000  00000000  00033f7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f90  00000000  00000000  000364f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  00037488  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a31  00000000  00000000  00038318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d962  00000000  00000000  00050d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008bfe2  00000000  00000000  0005e6ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004118  00000000  00000000  000ea708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000004c 	.word	0x2000004c
 8000128:	00000000 	.word	0x00000000
 800012c:	080050d8 	.word	0x080050d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000050 	.word	0x20000050
 8000148:	080050d8 	.word	0x080050d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b087      	sub	sp, #28
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fb17 	bl	8000794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f85f 	bl	8000228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f947 	bl	80003fc <MX_GPIO_Init>
  MX_I2C2_Init();
 800016e:	f000 f8a1 	bl	80002b4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000172:	f000 f8cd 	bl	8000310 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000176:	f000 f917 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BMP280_SETTINGS bmp280={
 800017a:	4a27      	ldr	r2, [pc, #156]	; (8000218 <main+0xbc>)
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000182:	6018      	str	r0, [r3, #0]
 8000184:	3304      	adds	r3, #4
 8000186:	8019      	strh	r1, [r3, #0]
  		.standy_time=STANDBY_TIME_005,
  		.filter_coefficient=FILTER_MODE_4,
  		.spi3w=SPI3W_DISABLE,
  };

  lcd_init();
 8000188:	f004 fdd0 	bl	8004d2c <lcd_init>
  BMP280_init(bmp280);
 800018c:	1d3b      	adds	r3, r7, #4
 800018e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000192:	f004 f8c9 	bl	8004328 <BMP280_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  lcd_writeCom(0x80);
 8000196:	2080      	movs	r0, #128	; 0x80
 8000198:	f004 fd6c 	bl	8004c74 <lcd_writeCom>

	  getDig_T();
 800019c:	f004 f934 	bl	8004408 <getDig_T>
	  getDig_P();
 80001a0:	f004 fa18 	bl	80045d4 <getDig_P>

	  int32_t temp=bmp280_compensate_T_int32(BMP280_temp_read());
 80001a4:	f004 f902 	bl	80043ac <BMP280_temp_read>
 80001a8:	4603      	mov	r3, r0
 80001aa:	4618      	mov	r0, r3
 80001ac:	f004 f9a4 	bl	80044f8 <bmp280_compensate_T_int32>
 80001b0:	6138      	str	r0, [r7, #16]
	  lcd_show_bmp280_temp(temp);
 80001b2:	693b      	ldr	r3, [r7, #16]
 80001b4:	4618      	mov	r0, r3
 80001b6:	f004 fe79 	bl	8004eac <lcd_show_bmp280_temp>

	  DHT11_read();
 80001ba:	f004 fc69 	bl	8004a90 <DHT11_read>
	  lcd_show_dht11(dht11_data);
 80001be:	4817      	ldr	r0, [pc, #92]	; (800021c <main+0xc0>)
 80001c0:	f004 fdc8 	bl	8004d54 <lcd_show_dht11>

	  for(uint8_t i=0;i<strlen(string_LUX);i++)
 80001c4:	2300      	movs	r3, #0
 80001c6:	75fb      	strb	r3, [r7, #23]
 80001c8:	e008      	b.n	80001dc <main+0x80>
	  {
		  lcd_writeData(string_LUX[i]);
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	4a14      	ldr	r2, [pc, #80]	; (8000220 <main+0xc4>)
 80001ce:	5cd3      	ldrb	r3, [r2, r3]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f004 fd7d 	bl	8004cd0 <lcd_writeData>
	  for(uint8_t i=0;i<strlen(string_LUX);i++)
 80001d6:	7dfb      	ldrb	r3, [r7, #23]
 80001d8:	3301      	adds	r3, #1
 80001da:	75fb      	strb	r3, [r7, #23]
 80001dc:	7dfc      	ldrb	r4, [r7, #23]
 80001de:	4810      	ldr	r0, [pc, #64]	; (8000220 <main+0xc4>)
 80001e0:	f7ff ffb4 	bl	800014c <strlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	429c      	cmp	r4, r3
 80001e8:	d3ef      	bcc.n	80001ca <main+0x6e>
	  }
	  lcd_writeCom(0x80|0x40);
 80001ea:	20c0      	movs	r0, #192	; 0xc0
 80001ec:	f004 fd42 	bl	8004c74 <lcd_writeCom>

	  uint32_t press=bmp280_compensate_P_int32(BMP280_press_read());
 80001f0:	f004 f9c2 	bl	8004578 <BMP280_press_read>
 80001f4:	4603      	mov	r3, r0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f004 fb36 	bl	8004868 <bmp280_compensate_P_int32>
 80001fc:	60f8      	str	r0, [r7, #12]
	  lcd_show_bmp280_press(press);
 80001fe:	68f8      	ldr	r0, [r7, #12]
 8000200:	f004 feb0 	bl	8004f64 <lcd_show_bmp280_press>

	  GY30_read();
 8000204:	f004 fca4 	bl	8004b50 <GY30_read>
	  lcd_show_gy30(gy30_data);
 8000208:	4b06      	ldr	r3, [pc, #24]	; (8000224 <main+0xc8>)
 800020a:	881b      	ldrh	r3, [r3, #0]
 800020c:	4618      	mov	r0, r3
 800020e:	f004 fdd3 	bl	8004db8 <lcd_show_gy30>

	  bluetooth_transmit();
 8000212:	f004 f859 	bl	80042c8 <bluetooth_transmit>
  {
 8000216:	e7be      	b.n	8000196 <main+0x3a>
 8000218:	080050f0 	.word	0x080050f0
 800021c:	20000068 	.word	0x20000068
 8000220:	20000000 	.word	0x20000000
 8000224:	2000006e 	.word	0x2000006e

08000228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b090      	sub	sp, #64	; 0x40
 800022c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800022e:	f107 0318 	add.w	r3, r7, #24
 8000232:	2228      	movs	r2, #40	; 0x28
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f004 ff46 	bl	80050c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2200      	movs	r2, #0
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	605a      	str	r2, [r3, #4]
 8000244:	609a      	str	r2, [r3, #8]
 8000246:	60da      	str	r2, [r3, #12]
 8000248:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024a:	2301      	movs	r3, #1
 800024c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800024e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000252:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000258:	2301      	movs	r3, #1
 800025a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025c:	2302      	movs	r3, #2
 800025e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000260:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000264:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000266:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026c:	f107 0318 	add.w	r3, r7, #24
 8000270:	4618      	mov	r0, r3
 8000272:	f002 fab7 	bl	80027e4 <HAL_RCC_OscConfig>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027c:	f000 f930 	bl	80004e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000280:	230f      	movs	r3, #15
 8000282:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000284:	2302      	movs	r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000290:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2102      	movs	r1, #2
 800029a:	4618      	mov	r0, r3
 800029c:	f002 fd22 	bl	8002ce4 <HAL_RCC_ClockConfig>
 80002a0:	4603      	mov	r3, r0
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d001      	beq.n	80002aa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a6:	f000 f91b 	bl	80004e0 <Error_Handler>
  }
}
 80002aa:	bf00      	nop
 80002ac:	3740      	adds	r7, #64	; 0x40
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}
	...

080002b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002b8:	4b12      	ldr	r3, [pc, #72]	; (8000304 <MX_I2C2_Init+0x50>)
 80002ba:	4a13      	ldr	r2, [pc, #76]	; (8000308 <MX_I2C2_Init+0x54>)
 80002bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002be:	4b11      	ldr	r3, [pc, #68]	; (8000304 <MX_I2C2_Init+0x50>)
 80002c0:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_I2C2_Init+0x58>)
 80002c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c4:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <MX_I2C2_Init+0x50>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_I2C2_Init+0x50>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002d0:	4b0c      	ldr	r3, [pc, #48]	; (8000304 <MX_I2C2_Init+0x50>)
 80002d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <MX_I2C2_Init+0x50>)
 80002da:	2200      	movs	r2, #0
 80002dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002de:	4b09      	ldr	r3, [pc, #36]	; (8000304 <MX_I2C2_Init+0x50>)
 80002e0:	2200      	movs	r2, #0
 80002e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <MX_I2C2_Init+0x50>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <MX_I2C2_Init+0x50>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80002f0:	4804      	ldr	r0, [pc, #16]	; (8000304 <MX_I2C2_Init+0x50>)
 80002f2:	f000 fde1 	bl	8000eb8 <HAL_I2C_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80002fc:	f000 f8f0 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000074 	.word	0x20000074
 8000308:	40005800 	.word	0x40005800
 800030c:	000186a0 	.word	0x000186a0

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_TIM2_Init+0x94>)
 800032e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000336:	2200      	movs	r2, #0
 8000338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <MX_TIM2_Init+0x94>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000340:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM2_Init+0x94>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000356:	f002 fe61 	bl	800301c <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000360:	f000 f8be 	bl	80004e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000372:	f002 ffaa 	bl	80032ca <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800037c:	f000 f8b0 	bl	80004e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	2300      	movs	r3, #0
 8000382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_TIM2_Init+0x94>)
 800038e:	f003 f979 	bl	8003684 <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000398:	f000 f8a2 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000120 	.word	0x20000120

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	; (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f003 f9c0 	bl	8003764 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ea:	f000 f879 	bl	80004e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	200000d8 	.word	0x200000d8
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b088      	sub	sp, #32
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0310 	add.w	r3, r7, #16
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000410:	4b30      	ldr	r3, [pc, #192]	; (80004d4 <MX_GPIO_Init+0xd8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a2f      	ldr	r2, [pc, #188]	; (80004d4 <MX_GPIO_Init+0xd8>)
 8000416:	f043 0320 	orr.w	r3, r3, #32
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b2d      	ldr	r3, [pc, #180]	; (80004d4 <MX_GPIO_Init+0xd8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0320 	and.w	r3, r3, #32
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b2a      	ldr	r3, [pc, #168]	; (80004d4 <MX_GPIO_Init+0xd8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a29      	ldr	r2, [pc, #164]	; (80004d4 <MX_GPIO_Init+0xd8>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b27      	ldr	r3, [pc, #156]	; (80004d4 <MX_GPIO_Init+0xd8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000440:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <MX_GPIO_Init+0xd8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	4a23      	ldr	r2, [pc, #140]	; (80004d4 <MX_GPIO_Init+0xd8>)
 8000446:	f043 0308 	orr.w	r3, r3, #8
 800044a:	6193      	str	r3, [r2, #24]
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <MX_GPIO_Init+0xd8>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	f003 0308 	and.w	r3, r3, #8
 8000454:	607b      	str	r3, [r7, #4]
 8000456:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|DHT11_DOUT_Pin
 8000458:	2200      	movs	r2, #0
 800045a:	f648 01e0 	movw	r1, #35040	; 0x88e0
 800045e:	481e      	ldr	r0, [pc, #120]	; (80004d8 <MX_GPIO_Init+0xdc>)
 8000460:	f000 fd11 	bl	8000e86 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800046a:	481c      	ldr	r0, [pc, #112]	; (80004dc <MX_GPIO_Init+0xe0>)
 800046c:	f000 fd0b 	bl	8000e86 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_WR_Pin LCD_RD_Pin LCD_E_Pin LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin;
 8000470:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4813      	ldr	r0, [pc, #76]	; (80004d8 <MX_GPIO_Init+0xdc>)
 800048a:	f000 fb8b 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DOUT_Pin */
  GPIO_InitStruct.Pin = DHT11_DOUT_Pin;
 800048e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000492:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000494:	2311      	movs	r3, #17
 8000496:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000498:	2300      	movs	r3, #0
 800049a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2302      	movs	r3, #2
 800049e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_DOUT_GPIO_Port, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	480c      	ldr	r0, [pc, #48]	; (80004d8 <MX_GPIO_Init+0xdc>)
 80004a8:	f000 fb7c 	bl	8000ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 80004ac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80004b0:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b2:	2301      	movs	r3, #1
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	2300      	movs	r3, #0
 80004b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4805      	ldr	r0, [pc, #20]	; (80004dc <MX_GPIO_Init+0xe0>)
 80004c6:	f000 fb6d 	bl	8000ba4 <HAL_GPIO_Init>

}
 80004ca:	bf00      	nop
 80004cc:	3720      	adds	r7, #32
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40010800 	.word	0x40010800
 80004dc:	40010c00 	.word	0x40010c00

080004e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr

080004ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004f2:	4b15      	ldr	r3, [pc, #84]	; (8000548 <HAL_MspInit+0x5c>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a14      	ldr	r2, [pc, #80]	; (8000548 <HAL_MspInit+0x5c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6193      	str	r3, [r2, #24]
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <HAL_MspInit+0x5c>)
 8000500:	699b      	ldr	r3, [r3, #24]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x5c>)
 800050c:	69db      	ldr	r3, [r3, #28]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x5c>)
 8000510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000514:	61d3      	str	r3, [r2, #28]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x5c>)
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000522:	4b0a      	ldr	r3, [pc, #40]	; (800054c <HAL_MspInit+0x60>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <HAL_MspInit+0x60>)
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr
 8000548:	40021000 	.word	0x40021000
 800054c:	40010000 	.word	0x40010000

08000550 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0310 	add.w	r3, r7, #16
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a16      	ldr	r2, [pc, #88]	; (80005c4 <HAL_I2C_MspInit+0x74>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d124      	bne.n	80005ba <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	4b15      	ldr	r3, [pc, #84]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 8000576:	f043 0308 	orr.w	r3, r3, #8
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0308 	and.w	r3, r3, #8
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800058c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800058e:	2312      	movs	r3, #18
 8000590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000592:	2303      	movs	r3, #3
 8000594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <HAL_I2C_MspInit+0x7c>)
 800059e:	f000 fb01 	bl	8000ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 80005a4:	69db      	ldr	r3, [r3, #28]
 80005a6:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 80005a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005ac:	61d3      	str	r3, [r2, #28]
 80005ae:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_I2C_MspInit+0x78>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80005ba:	bf00      	nop
 80005bc:	3720      	adds	r7, #32
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40005800 	.word	0x40005800
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00

080005d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005e0:	d113      	bne.n	800060a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <HAL_TIM_Base_MspInit+0x44>)
 80005e4:	69db      	ldr	r3, [r3, #28]
 80005e6:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <HAL_TIM_Base_MspInit+0x44>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	61d3      	str	r3, [r2, #28]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <HAL_TIM_Base_MspInit+0x44>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	f003 0301 	and.w	r3, r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	201c      	movs	r0, #28
 8000600:	f000 fa23 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000604:	201c      	movs	r0, #28
 8000606:	f000 fa3c 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800060a:	bf00      	nop
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40021000 	.word	0x40021000

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a20      	ldr	r2, [pc, #128]	; (80006b4 <HAL_UART_MspInit+0x9c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d139      	bne.n	80006ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000638:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a1e      	ldr	r2, [pc, #120]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a18      	ldr	r2, [pc, #96]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <HAL_UART_MspInit+0xa0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	4619      	mov	r1, r3
 800067c:	480f      	ldr	r0, [pc, #60]	; (80006bc <HAL_UART_MspInit+0xa4>)
 800067e:	f000 fa91 	bl	8000ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0310 	add.w	r3, r7, #16
 8000694:	4619      	mov	r1, r3
 8000696:	4809      	ldr	r0, [pc, #36]	; (80006bc <HAL_UART_MspInit+0xa4>)
 8000698:	f000 fa84 	bl	8000ba4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2100      	movs	r1, #0
 80006a0:	2025      	movs	r0, #37	; 0x25
 80006a2:	f000 f9d2 	bl	8000a4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a6:	2025      	movs	r0, #37	; 0x25
 80006a8:	f000 f9eb 	bl	8000a82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80006ac:	bf00      	nop
 80006ae:	3720      	adds	r7, #32
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40013800 	.word	0x40013800
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40010800 	.word	0x40010800

080006c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <HardFault_Handler+0x4>

080006d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <MemManage_Handler+0x4>

080006d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <BusFault_Handler+0x4>

080006de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <UsageFault_Handler+0x4>

080006e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr

080006f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr

080006fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr

08000708 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800070c:	f000 f888 	bl	8000820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000718:	4802      	ldr	r0, [pc, #8]	; (8000724 <TIM2_IRQHandler+0x10>)
 800071a:	f002 fcce 	bl	80030ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000120 	.word	0x20000120

08000728 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800072c:	4802      	ldr	r0, [pc, #8]	; (8000738 <USART1_IRQHandler+0x10>)
 800072e:	f003 f8f9 	bl	8003924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	200000d8 	.word	0x200000d8

0800073c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000740:	bf00      	nop
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000748:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800074a:	e003      	b.n	8000754 <LoopCopyDataInit>

0800074c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800074e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000750:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000752:	3104      	adds	r1, #4

08000754 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000754:	480a      	ldr	r0, [pc, #40]	; (8000780 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000758:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800075a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800075c:	d3f6      	bcc.n	800074c <CopyDataInit>
  ldr r2, =_sbss
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000760:	e002      	b.n	8000768 <LoopFillZerobss>

08000762 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000764:	f842 3b04 	str.w	r3, [r2], #4

08000768 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000768:	4b08      	ldr	r3, [pc, #32]	; (800078c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800076a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800076c:	d3f9      	bcc.n	8000762 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800076e:	f7ff ffe5 	bl	800073c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000772:	f004 fc85 	bl	8005080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000776:	f7ff fcf1 	bl	800015c <main>
  bx lr
 800077a:	4770      	bx	lr
  ldr r3, =_sidata
 800077c:	08005148 	.word	0x08005148
  ldr r0, =_sdata
 8000780:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000784:	2000004c 	.word	0x2000004c
  ldr r2, =_sbss
 8000788:	2000004c 	.word	0x2000004c
  ldr r3, = _ebss
 800078c:	20000178 	.word	0x20000178

08000790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000790:	e7fe      	b.n	8000790 <ADC1_2_IRQHandler>
	...

08000794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_Init+0x28>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a07      	ldr	r2, [pc, #28]	; (80007bc <HAL_Init+0x28>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007a4:	2003      	movs	r0, #3
 80007a6:	f000 f945 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f808 	bl	80007c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007b0:	f7ff fe9c 	bl	80004ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_InitTick+0x54>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <HAL_InitTick+0x58>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4619      	mov	r1, r3
 80007d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007da:	fbb2 f3f3 	udiv	r3, r2, r3
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f95d 	bl	8000a9e <HAL_SYSTICK_Config>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00e      	b.n	800080c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b0f      	cmp	r3, #15
 80007f2:	d80a      	bhi.n	800080a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007f4:	2200      	movs	r2, #0
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f000 f925 	bl	8000a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000800:	4a06      	ldr	r2, [pc, #24]	; (800081c <HAL_InitTick+0x5c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000806:	2300      	movs	r3, #0
 8000808:	e000      	b.n	800080c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
}
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000008 	.word	0x20000008
 8000818:	20000010 	.word	0x20000010
 800081c:	2000000c 	.word	0x2000000c

08000820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <HAL_IncTick+0x1c>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	461a      	mov	r2, r3
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_IncTick+0x20>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4413      	add	r3, r2
 8000830:	4a03      	ldr	r2, [pc, #12]	; (8000840 <HAL_IncTick+0x20>)
 8000832:	6013      	str	r3, [r2, #0]
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	20000010 	.word	0x20000010
 8000840:	20000170 	.word	0x20000170

08000844 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return uwTick;
 8000848:	4b02      	ldr	r3, [pc, #8]	; (8000854 <HAL_GetTick+0x10>)
 800084a:	681b      	ldr	r3, [r3, #0]
}
 800084c:	4618      	mov	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	bc80      	pop	{r7}
 8000852:	4770      	bx	lr
 8000854:	20000170 	.word	0x20000170

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff fff0 	bl	8000844 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <HAL_Delay+0x40>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800087e:	bf00      	nop
 8000880:	f7ff ffe0 	bl	8000844 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000010 	.word	0x20000010

0800089c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db0b      	blt.n	800092a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	4906      	ldr	r1, [pc, #24]	; (8000934 <__NVIC_EnableIRQ+0x34>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
         );
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295
 8000a14:	f7ff ff90 	bl	8000938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff2d 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff42 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff90 	bl	800098c <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5f 	bl	8000938 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	4603      	mov	r3, r0
 8000a8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff ff35 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <SysTick_Config>
 8000aac:	4603      	mov	r3, r0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d005      	beq.n	8000ada <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	73fb      	strb	r3, [r7, #15]
 8000ad8:	e051      	b.n	8000b7e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f022 020e 	bic.w	r2, r2, #14
 8000ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0201 	bic.w	r2, r2, #1
 8000af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a22      	ldr	r2, [pc, #136]	; (8000b88 <HAL_DMA_Abort_IT+0xd0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d029      	beq.n	8000b58 <HAL_DMA_Abort_IT+0xa0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a20      	ldr	r2, [pc, #128]	; (8000b8c <HAL_DMA_Abort_IT+0xd4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d022      	beq.n	8000b54 <HAL_DMA_Abort_IT+0x9c>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <HAL_DMA_Abort_IT+0xd8>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d01a      	beq.n	8000b4e <HAL_DMA_Abort_IT+0x96>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a1d      	ldr	r2, [pc, #116]	; (8000b94 <HAL_DMA_Abort_IT+0xdc>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d012      	beq.n	8000b48 <HAL_DMA_Abort_IT+0x90>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_DMA_Abort_IT+0xe0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d00a      	beq.n	8000b42 <HAL_DMA_Abort_IT+0x8a>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <HAL_DMA_Abort_IT+0xe4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d102      	bne.n	8000b3c <HAL_DMA_Abort_IT+0x84>
 8000b36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b3a:	e00e      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b40:	e00b      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b46:	e008      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	e005      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b52:	e002      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b54:	2310      	movs	r3, #16
 8000b56:	e000      	b.n	8000b5a <HAL_DMA_Abort_IT+0xa2>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	4a11      	ldr	r2, [pc, #68]	; (8000ba0 <HAL_DMA_Abort_IT+0xe8>)
 8000b5c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2201      	movs	r2, #1
 8000b62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	4798      	blx	r3
    } 
  }
  return status;
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3710      	adds	r7, #16
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40020008 	.word	0x40020008
 8000b8c:	4002001c 	.word	0x4002001c
 8000b90:	40020030 	.word	0x40020030
 8000b94:	40020044 	.word	0x40020044
 8000b98:	40020058 	.word	0x40020058
 8000b9c:	4002006c 	.word	0x4002006c
 8000ba0:	40020000 	.word	0x40020000

08000ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b08b      	sub	sp, #44	; 0x2c
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb6:	e127      	b.n	8000e08 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	4013      	ands	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f040 8116 	bne.w	8000e02 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b12      	cmp	r3, #18
 8000bdc:	d034      	beq.n	8000c48 <HAL_GPIO_Init+0xa4>
 8000bde:	2b12      	cmp	r3, #18
 8000be0:	d80d      	bhi.n	8000bfe <HAL_GPIO_Init+0x5a>
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	d02b      	beq.n	8000c3e <HAL_GPIO_Init+0x9a>
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d804      	bhi.n	8000bf4 <HAL_GPIO_Init+0x50>
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d031      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d01c      	beq.n	8000c2c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bf2:	e048      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d043      	beq.n	8000c80 <HAL_GPIO_Init+0xdc>
 8000bf8:	2b11      	cmp	r3, #17
 8000bfa:	d01b      	beq.n	8000c34 <HAL_GPIO_Init+0x90>
          break;
 8000bfc:	e043      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bfe:	4a89      	ldr	r2, [pc, #548]	; (8000e24 <HAL_GPIO_Init+0x280>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d026      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
 8000c04:	4a87      	ldr	r2, [pc, #540]	; (8000e24 <HAL_GPIO_Init+0x280>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d806      	bhi.n	8000c18 <HAL_GPIO_Init+0x74>
 8000c0a:	4a87      	ldr	r2, [pc, #540]	; (8000e28 <HAL_GPIO_Init+0x284>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d020      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
 8000c10:	4a86      	ldr	r2, [pc, #536]	; (8000e2c <HAL_GPIO_Init+0x288>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d01d      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
          break;
 8000c16:	e036      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c18:	4a85      	ldr	r2, [pc, #532]	; (8000e30 <HAL_GPIO_Init+0x28c>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d019      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
 8000c1e:	4a85      	ldr	r2, [pc, #532]	; (8000e34 <HAL_GPIO_Init+0x290>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d016      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
 8000c24:	4a84      	ldr	r2, [pc, #528]	; (8000e38 <HAL_GPIO_Init+0x294>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d013      	beq.n	8000c52 <HAL_GPIO_Init+0xae>
          break;
 8000c2a:	e02c      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	623b      	str	r3, [r7, #32]
          break;
 8000c32:	e028      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	623b      	str	r3, [r7, #32]
          break;
 8000c3c:	e023      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	3308      	adds	r3, #8
 8000c44:	623b      	str	r3, [r7, #32]
          break;
 8000c46:	e01e      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	330c      	adds	r3, #12
 8000c4e:	623b      	str	r3, [r7, #32]
          break;
 8000c50:	e019      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	689b      	ldr	r3, [r3, #8]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d102      	bne.n	8000c60 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	623b      	str	r3, [r7, #32]
          break;
 8000c5e:	e012      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d105      	bne.n	8000c74 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c68:	2308      	movs	r3, #8
 8000c6a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	611a      	str	r2, [r3, #16]
          break;
 8000c72:	e008      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c74:	2308      	movs	r3, #8
 8000c76:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69fa      	ldr	r2, [r7, #28]
 8000c7c:	615a      	str	r2, [r3, #20]
          break;
 8000c7e:	e002      	b.n	8000c86 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
          break;
 8000c84:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2bff      	cmp	r3, #255	; 0xff
 8000c8a:	d801      	bhi.n	8000c90 <HAL_GPIO_Init+0xec>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	e001      	b.n	8000c94 <HAL_GPIO_Init+0xf0>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3304      	adds	r3, #4
 8000c94:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	2bff      	cmp	r3, #255	; 0xff
 8000c9a:	d802      	bhi.n	8000ca2 <HAL_GPIO_Init+0xfe>
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	e002      	b.n	8000ca8 <HAL_GPIO_Init+0x104>
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	3b08      	subs	r3, #8
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	210f      	movs	r1, #15
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	6a39      	ldr	r1, [r7, #32]
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 8096 	beq.w	8000e02 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cd6:	4b59      	ldr	r3, [pc, #356]	; (8000e3c <HAL_GPIO_Init+0x298>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a58      	ldr	r2, [pc, #352]	; (8000e3c <HAL_GPIO_Init+0x298>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b56      	ldr	r3, [pc, #344]	; (8000e3c <HAL_GPIO_Init+0x298>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cee:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <HAL_GPIO_Init+0x29c>)
 8000cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf2:	089b      	lsrs	r3, r3, #2
 8000cf4:	3302      	adds	r3, #2
 8000cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfa:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	f003 0303 	and.w	r3, r3, #3
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	220f      	movs	r2, #15
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	68fa      	ldr	r2, [r7, #12]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4b      	ldr	r2, [pc, #300]	; (8000e44 <HAL_GPIO_Init+0x2a0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d013      	beq.n	8000d42 <HAL_GPIO_Init+0x19e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_GPIO_Init+0x2a4>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d00d      	beq.n	8000d3e <HAL_GPIO_Init+0x19a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a49      	ldr	r2, [pc, #292]	; (8000e4c <HAL_GPIO_Init+0x2a8>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d007      	beq.n	8000d3a <HAL_GPIO_Init+0x196>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a48      	ldr	r2, [pc, #288]	; (8000e50 <HAL_GPIO_Init+0x2ac>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_GPIO_Init+0x192>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e006      	b.n	8000d44 <HAL_GPIO_Init+0x1a0>
 8000d36:	2304      	movs	r3, #4
 8000d38:	e004      	b.n	8000d44 <HAL_GPIO_Init+0x1a0>
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	e002      	b.n	8000d44 <HAL_GPIO_Init+0x1a0>
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e000      	b.n	8000d44 <HAL_GPIO_Init+0x1a0>
 8000d42:	2300      	movs	r3, #0
 8000d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d46:	f002 0203 	and.w	r2, r2, #3
 8000d4a:	0092      	lsls	r2, r2, #2
 8000d4c:	4093      	lsls	r3, r2
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d54:	493a      	ldr	r1, [pc, #232]	; (8000e40 <HAL_GPIO_Init+0x29c>)
 8000d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	68fa      	ldr	r2, [r7, #12]
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d006      	beq.n	8000d7c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d6e:	4b39      	ldr	r3, [pc, #228]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4938      	ldr	r1, [pc, #224]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
 8000d7a:	e006      	b.n	8000d8a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4933      	ldr	r1, [pc, #204]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d006      	beq.n	8000da4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	492e      	ldr	r1, [pc, #184]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
 8000da2:	e006      	b.n	8000db2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000da4:	4b2b      	ldr	r3, [pc, #172]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	43db      	mvns	r3, r3
 8000dac:	4929      	ldr	r1, [pc, #164]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dae:	4013      	ands	r3, r2
 8000db0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d006      	beq.n	8000dcc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dc0:	689a      	ldr	r2, [r3, #8]
 8000dc2:	4924      	ldr	r1, [pc, #144]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	608b      	str	r3, [r1, #8]
 8000dca:	e006      	b.n	8000dda <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dcc:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dce:	689a      	ldr	r2, [r3, #8]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	491f      	ldr	r1, [pc, #124]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000de6:	4b1b      	ldr	r3, [pc, #108]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	491a      	ldr	r1, [pc, #104]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	60cb      	str	r3, [r1, #12]
 8000df2:	e006      	b.n	8000e02 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000df6:	68da      	ldr	r2, [r3, #12]
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	4915      	ldr	r1, [pc, #84]	; (8000e54 <HAL_GPIO_Init+0x2b0>)
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e04:	3301      	adds	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f47f aed0 	bne.w	8000bb8 <HAL_GPIO_Init+0x14>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	372c      	adds	r7, #44	; 0x2c
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	10210000 	.word	0x10210000
 8000e28:	10110000 	.word	0x10110000
 8000e2c:	10120000 	.word	0x10120000
 8000e30:	10310000 	.word	0x10310000
 8000e34:	10320000 	.word	0x10320000
 8000e38:	10220000 	.word	0x10220000
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010000 	.word	0x40010000
 8000e44:	40010800 	.word	0x40010800
 8000e48:	40010c00 	.word	0x40010c00
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40011400 	.word	0x40011400
 8000e54:	40010400 	.word	0x40010400

08000e58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	887b      	ldrh	r3, [r7, #2]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d002      	beq.n	8000e76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e70:	2301      	movs	r3, #1
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e001      	b.n	8000e7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
 8000e8e:	460b      	mov	r3, r1
 8000e90:	807b      	strh	r3, [r7, #2]
 8000e92:	4613      	mov	r3, r2
 8000e94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e96:	787b      	ldrb	r3, [r7, #1]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ea2:	e003      	b.n	8000eac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	041a      	lsls	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	611a      	str	r2, [r3, #16]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e11f      	b.n	800110a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff fb36 	bl	8000550 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2224      	movs	r2, #36	; 0x24
 8000ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000f1c:	f002 f838 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8000f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	4a7b      	ldr	r2, [pc, #492]	; (8001114 <HAL_I2C_Init+0x25c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d807      	bhi.n	8000f3c <HAL_I2C_Init+0x84>
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a7a      	ldr	r2, [pc, #488]	; (8001118 <HAL_I2C_Init+0x260>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	bf94      	ite	ls
 8000f34:	2301      	movls	r3, #1
 8000f36:	2300      	movhi	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	e006      	b.n	8000f4a <HAL_I2C_Init+0x92>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4a77      	ldr	r2, [pc, #476]	; (800111c <HAL_I2C_Init+0x264>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	bf94      	ite	ls
 8000f44:	2301      	movls	r3, #1
 8000f46:	2300      	movhi	r3, #0
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e0db      	b.n	800110a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4a72      	ldr	r2, [pc, #456]	; (8001120 <HAL_I2C_Init+0x268>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9b      	lsrs	r3, r3, #18
 8000f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	68ba      	ldr	r2, [r7, #8]
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a64      	ldr	r2, [pc, #400]	; (8001114 <HAL_I2C_Init+0x25c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d802      	bhi.n	8000f8c <HAL_I2C_Init+0xd4>
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	e009      	b.n	8000fa0 <HAL_I2C_Init+0xe8>
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f92:	fb02 f303 	mul.w	r3, r2, r3
 8000f96:	4a63      	ldr	r2, [pc, #396]	; (8001124 <HAL_I2C_Init+0x26c>)
 8000f98:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9c:	099b      	lsrs	r3, r3, #6
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	430b      	orrs	r3, r1
 8000fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	69db      	ldr	r3, [r3, #28]
 8000fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	4956      	ldr	r1, [pc, #344]	; (8001114 <HAL_I2C_Init+0x25c>)
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	d80d      	bhi.n	8000fdc <HAL_I2C_Init+0x124>
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	1e59      	subs	r1, r3, #1
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd4:	2b04      	cmp	r3, #4
 8000fd6:	bf38      	it	cc
 8000fd8:	2304      	movcc	r3, #4
 8000fda:	e04f      	b.n	800107c <HAL_I2C_Init+0x1c4>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d111      	bne.n	8001008 <HAL_I2C_Init+0x150>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	1e58      	subs	r0, r3, #1
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	440b      	add	r3, r1
 8000ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	bf0c      	ite	eq
 8001000:	2301      	moveq	r3, #1
 8001002:	2300      	movne	r3, #0
 8001004:	b2db      	uxtb	r3, r3
 8001006:	e012      	b.n	800102e <HAL_I2C_Init+0x176>
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	1e58      	subs	r0, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6859      	ldr	r1, [r3, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	440b      	add	r3, r1
 8001016:	0099      	lsls	r1, r3, #2
 8001018:	440b      	add	r3, r1
 800101a:	fbb0 f3f3 	udiv	r3, r0, r3
 800101e:	3301      	adds	r3, #1
 8001020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001024:	2b00      	cmp	r3, #0
 8001026:	bf0c      	ite	eq
 8001028:	2301      	moveq	r3, #1
 800102a:	2300      	movne	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_I2C_Init+0x17e>
 8001032:	2301      	movs	r3, #1
 8001034:	e022      	b.n	800107c <HAL_I2C_Init+0x1c4>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10e      	bne.n	800105c <HAL_I2C_Init+0x1a4>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	1e58      	subs	r0, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6859      	ldr	r1, [r3, #4]
 8001046:	460b      	mov	r3, r1
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	440b      	add	r3, r1
 800104c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001050:	3301      	adds	r3, #1
 8001052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800105a:	e00f      	b.n	800107c <HAL_I2C_Init+0x1c4>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	1e58      	subs	r0, r3, #1
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6859      	ldr	r1, [r3, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	0099      	lsls	r1, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001072:	3301      	adds	r3, #1
 8001074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107c:	6879      	ldr	r1, [r7, #4]
 800107e:	6809      	ldr	r1, [r1, #0]
 8001080:	4313      	orrs	r3, r2
 8001082:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69da      	ldr	r2, [r3, #28]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80010aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	6911      	ldr	r1, [r2, #16]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68d2      	ldr	r2, [r2, #12]
 80010b6:	4311      	orrs	r1, r2
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	695a      	ldr	r2, [r3, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f042 0201 	orr.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2220      	movs	r2, #32
 80010f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	000186a0 	.word	0x000186a0
 8001118:	001e847f 	.word	0x001e847f
 800111c:	003d08ff 	.word	0x003d08ff
 8001120:	431bde83 	.word	0x431bde83
 8001124:	10624dd3 	.word	0x10624dd3

08001128 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	461a      	mov	r2, r3
 8001134:	460b      	mov	r3, r1
 8001136:	817b      	strh	r3, [r7, #10]
 8001138:	4613      	mov	r3, r2
 800113a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff fb82 	bl	8000844 <HAL_GetTick>
 8001140:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b20      	cmp	r3, #32
 800114c:	f040 80e0 	bne.w	8001310 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2319      	movs	r3, #25
 8001156:	2201      	movs	r2, #1
 8001158:	4970      	ldr	r1, [pc, #448]	; (800131c <HAL_I2C_Master_Transmit+0x1f4>)
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f001 f966 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001166:	2302      	movs	r3, #2
 8001168:	e0d3      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001170:	2b01      	cmp	r3, #1
 8001172:	d101      	bne.n	8001178 <HAL_I2C_Master_Transmit+0x50>
 8001174:	2302      	movs	r3, #2
 8001176:	e0cc      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	2b01      	cmp	r3, #1
 800118c:	d007      	beq.n	800119e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2221      	movs	r2, #33	; 0x21
 80011b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2210      	movs	r2, #16
 80011ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2200      	movs	r2, #0
 80011c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	893a      	ldrh	r2, [r7, #8]
 80011ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a50      	ldr	r2, [pc, #320]	; (8001320 <HAL_I2C_Master_Transmit+0x1f8>)
 80011de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80011e0:	8979      	ldrh	r1, [r7, #10]
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	6a3a      	ldr	r2, [r7, #32]
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 fe52 	bl	8001e90 <I2C_MasterRequestWrite>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e08d      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800120c:	e066      	b.n	80012dc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	6a39      	ldr	r1, [r7, #32]
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f001 f9e0 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00d      	beq.n	800123a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	2b04      	cmp	r3, #4
 8001224:	d107      	bne.n	8001236 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001234:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e06b      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b01      	subs	r3, #1
 8001258:	b29a      	uxth	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001262:	3b01      	subs	r3, #1
 8001264:	b29a      	uxth	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	2b04      	cmp	r3, #4
 8001276:	d11b      	bne.n	80012b0 <HAL_I2C_Master_Transmit+0x188>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d017      	beq.n	80012b0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	781a      	ldrb	r2, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800129a:	b29b      	uxth	r3, r3
 800129c:	3b01      	subs	r3, #1
 800129e:	b29a      	uxth	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	6a39      	ldr	r1, [r7, #32]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f001 f9d0 	bl	800265a <I2C_WaitOnBTFFlagUntilTimeout>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d00d      	beq.n	80012dc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d107      	bne.n	80012d8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012d6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e01a      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d194      	bne.n	800120e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2220      	movs	r2, #32
 80012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	e000      	b.n	8001312 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001310:	2302      	movs	r3, #2
  }
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	00100002 	.word	0x00100002
 8001320:	ffff0000 	.word	0xffff0000

08001324 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08c      	sub	sp, #48	; 0x30
 8001328:	af02      	add	r7, sp, #8
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	461a      	mov	r2, r3
 8001330:	460b      	mov	r3, r1
 8001332:	817b      	strh	r3, [r7, #10]
 8001334:	4613      	mov	r3, r2
 8001336:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800133c:	f7ff fa82 	bl	8000844 <HAL_GetTick>
 8001340:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b20      	cmp	r3, #32
 800134c:	f040 8238 	bne.w	80017c0 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001352:	9300      	str	r3, [sp, #0]
 8001354:	2319      	movs	r3, #25
 8001356:	2201      	movs	r2, #1
 8001358:	497e      	ldr	r1, [pc, #504]	; (8001554 <HAL_I2C_Master_Receive+0x230>)
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f001 f866 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001366:	2302      	movs	r3, #2
 8001368:	e22b      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d101      	bne.n	8001378 <HAL_I2C_Master_Receive+0x54>
 8001374:	2302      	movs	r3, #2
 8001376:	e224      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b01      	cmp	r3, #1
 800138c:	d007      	beq.n	800139e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2222      	movs	r2, #34	; 0x22
 80013b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	2210      	movs	r2, #16
 80013ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2200      	movs	r2, #0
 80013c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	893a      	ldrh	r2, [r7, #8]
 80013ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a5e      	ldr	r2, [pc, #376]	; (8001558 <HAL_I2C_Master_Receive+0x234>)
 80013de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80013e0:	8979      	ldrh	r1, [r7, #10]
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fdd4 	bl	8001f94 <I2C_MasterRequestRead>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1e5      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d113      	bne.n	8001426 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	61fb      	str	r3, [r7, #28]
 8001412:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	e1b9      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142a:	2b01      	cmp	r3, #1
 800142c:	d11d      	bne.n	800146a <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800143c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800143e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001440:	2300      	movs	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	699b      	ldr	r3, [r3, #24]
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001464:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001466:	b662      	cpsie	i
 8001468:	e197      	b.n	800179a <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146e:	2b02      	cmp	r3, #2
 8001470:	d11d      	bne.n	80014ae <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001480:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001482:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	695b      	ldr	r3, [r3, #20]
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80014aa:	b662      	cpsie	i
 80014ac:	e175      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80014d4:	e161      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014da:	2b03      	cmp	r3, #3
 80014dc:	f200 811a 	bhi.w	8001714 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d123      	bne.n	8001530 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f001 f8f5 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e162      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001518:	3b01      	subs	r3, #1
 800151a:	b29a      	uxth	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001524:	b29b      	uxth	r3, r3
 8001526:	3b01      	subs	r3, #1
 8001528:	b29a      	uxth	r2, r3
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800152e:	e134      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001534:	2b02      	cmp	r3, #2
 8001536:	d150      	bne.n	80015da <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800153e:	2200      	movs	r2, #0
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <HAL_I2C_Master_Receive+0x238>)
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 ff72 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d008      	beq.n	8001560 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e137      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
 8001552:	bf00      	nop
 8001554:	00100002 	.word	0x00100002
 8001558:	ffff0000 	.word	0xffff0000
 800155c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001570:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	b2d2      	uxtb	r2, r2
 800157e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800158e:	3b01      	subs	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	3b01      	subs	r3, #1
 800159e:	b29a      	uxth	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80015a4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	1c5a      	adds	r2, r3, #1
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ce:	b29b      	uxth	r3, r3
 80015d0:	3b01      	subs	r3, #1
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80015d8:	e0df      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	2200      	movs	r2, #0
 80015e2:	497a      	ldr	r1, [pc, #488]	; (80017cc <HAL_I2C_Master_Receive+0x4a8>)
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 ff21 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0e6      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001602:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	691a      	ldr	r2, [r3, #16]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001622:	3b01      	subs	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001638:	4b65      	ldr	r3, [pc, #404]	; (80017d0 <HAL_I2C_Master_Receive+0x4ac>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	08db      	lsrs	r3, r3, #3
 800163e:	4a65      	ldr	r2, [pc, #404]	; (80017d4 <HAL_I2C_Master_Receive+0x4b0>)
 8001640:	fba2 2303 	umull	r2, r3, r2, r3
 8001644:	0a1a      	lsrs	r2, r3, #8
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	00da      	lsls	r2, r3, #3
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	3b01      	subs	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d117      	bne.n	800168e <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f043 0220 	orr.w	r2, r3, #32
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001680:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e099      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d1da      	bne.n	8001652 <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c8:	3b01      	subs	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80016de:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691a      	ldr	r2, [r3, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b29a      	uxth	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001708:	b29b      	uxth	r3, r3
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001712:	e042      	b.n	800179a <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001716:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 ffdf 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e04c      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691a      	ldr	r2, [r3, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001744:	3b01      	subs	r3, #1
 8001746:	b29a      	uxth	r2, r3
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001750:	b29b      	uxth	r3, r3
 8001752:	3b01      	subs	r3, #1
 8001754:	b29a      	uxth	r2, r3
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b04      	cmp	r3, #4
 8001766:	d118      	bne.n	800179a <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	691a      	ldr	r2, [r3, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b01      	subs	r3, #1
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f47f ae99 	bne.w	80014d6 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2220      	movs	r2, #32
 80017a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	e000      	b.n	80017c2 <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
  }
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	00010004 	.word	0x00010004
 80017d0:	20000008 	.word	0x20000008
 80017d4:	14f8b589 	.word	0x14f8b589

080017d8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	817b      	strh	r3, [r7, #10]
 80017ea:	460b      	mov	r3, r1
 80017ec:	813b      	strh	r3, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80017f2:	f7ff f827 	bl	8000844 <HAL_GetTick>
 80017f6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	f040 80d9 	bne.w	80019b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2319      	movs	r3, #25
 800180c:	2201      	movs	r2, #1
 800180e:	496d      	ldr	r1, [pc, #436]	; (80019c4 <HAL_I2C_Mem_Write+0x1ec>)
 8001810:	68f8      	ldr	r0, [r7, #12]
 8001812:	f000 fe0b 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	e0cc      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001826:	2b01      	cmp	r3, #1
 8001828:	d101      	bne.n	800182e <HAL_I2C_Mem_Write+0x56>
 800182a:	2302      	movs	r3, #2
 800182c:	e0c5      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2201      	movs	r2, #1
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	2b01      	cmp	r3, #1
 8001842:	d007      	beq.n	8001854 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0201 	orr.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2221      	movs	r2, #33	; 0x21
 8001868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2200      	movs	r2, #0
 8001878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	6a3a      	ldr	r2, [r7, #32]
 800187e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a4d      	ldr	r2, [pc, #308]	; (80019c8 <HAL_I2C_Mem_Write+0x1f0>)
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001896:	88f8      	ldrh	r0, [r7, #6]
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	8979      	ldrh	r1, [r7, #10]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	4603      	mov	r3, r0
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 fc42 	bl	8002130 <I2C_RequestMemoryWrite>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d052      	beq.n	8001958 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e081      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f000 fe8c 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d00d      	beq.n	80018e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d107      	bne.n	80018de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e06b      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e6:	781a      	ldrb	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b29a      	uxth	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001908:	b29b      	uxth	r3, r3
 800190a:	3b01      	subs	r3, #1
 800190c:	b29a      	uxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b04      	cmp	r3, #4
 800191e:	d11b      	bne.n	8001958 <HAL_I2C_Mem_Write+0x180>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001924:	2b00      	cmp	r3, #0
 8001926:	d017      	beq.n	8001958 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192c:	781a      	ldrb	r2, [r3, #0]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	3b01      	subs	r3, #1
 8001944:	b29a      	uxth	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1aa      	bne.n	80018b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001960:	697a      	ldr	r2, [r7, #20]
 8001962:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fe78 	bl	800265a <I2C_WaitOnBTFFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	2b04      	cmp	r3, #4
 8001976:	d107      	bne.n	8001988 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001986:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e016      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800199a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	e000      	b.n	80019ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80019b8:	2302      	movs	r3, #2
  }
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	00100002 	.word	0x00100002
 80019c8:	ffff0000 	.word	0xffff0000

080019cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	4608      	mov	r0, r1
 80019d6:	4611      	mov	r1, r2
 80019d8:	461a      	mov	r2, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	817b      	strh	r3, [r7, #10]
 80019de:	460b      	mov	r3, r1
 80019e0:	813b      	strh	r3, [r7, #8]
 80019e2:	4613      	mov	r3, r2
 80019e4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019ea:	f7fe ff2b 	bl	8000844 <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	f040 823d 	bne.w	8001e78 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2319      	movs	r3, #25
 8001a04:	2201      	movs	r2, #1
 8001a06:	4981      	ldr	r1, [pc, #516]	; (8001c0c <HAL_I2C_Mem_Read+0x240>)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fd0f 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001a14:	2302      	movs	r3, #2
 8001a16:	e230      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_I2C_Mem_Read+0x5a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e229      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d007      	beq.n	8001a4c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f042 0201 	orr.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2222      	movs	r2, #34	; 0x22
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2240      	movs	r2, #64	; 0x40
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4a61      	ldr	r2, [pc, #388]	; (8001c10 <HAL_I2C_Mem_Read+0x244>)
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a8e:	88f8      	ldrh	r0, [r7, #6]
 8001a90:	893a      	ldrh	r2, [r7, #8]
 8001a92:	8979      	ldrh	r1, [r7, #10]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f000 fbdc 	bl	800225c <I2C_RequestMemoryRead>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e1e5      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	61fb      	str	r3, [r7, #28]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	699b      	ldr	r3, [r3, #24]
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e1b9      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d11d      	bne.n	8001b22 <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001af4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001af6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001af8:	2300      	movs	r3, #0
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	61bb      	str	r3, [r7, #24]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b1e:	b662      	cpsie	i
 8001b20:	e197      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d11d      	bne.n	8001b66 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	617b      	str	r3, [r7, #20]
 8001b50:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b62:	b662      	cpsie	i
 8001b64:	e175      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b74:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b76:	2300      	movs	r3, #0
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001b8c:	e161      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f200 811a 	bhi.w	8001dcc <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d123      	bne.n	8001be8 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ba2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fd99 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e162      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	1c5a      	adds	r2, r3, #1
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001be6:	e134      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d150      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_I2C_Mem_Read+0x248>)
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 fc16 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e137      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
 8001c0a:	bf00      	nop
 8001c0c:	00100002 	.word	0x00100002
 8001c10:	ffff0000 	.word	0xffff0000
 8001c14:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001c18:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c28:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	691a      	ldr	r2, [r3, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	1c5a      	adds	r2, r3, #1
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	3b01      	subs	r3, #1
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001c90:	e0df      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	2200      	movs	r2, #0
 8001c9a:	497a      	ldr	r1, [pc, #488]	; (8001e84 <HAL_I2C_Mem_Read+0x4b8>)
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 fbc5 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0e6      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cbc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd0:	1c5a      	adds	r2, r3, #1
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001cf0:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <HAL_I2C_Mem_Read+0x4bc>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	4a65      	ldr	r2, [pc, #404]	; (8001e8c <HAL_I2C_Mem_Read+0x4c0>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	0a1a      	lsrs	r2, r3, #8
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	00da      	lsls	r2, r3, #3
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d117      	bne.n	8001d46 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f043 0220 	orr.w	r2, r3, #32
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001d38:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e099      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d1da      	bne.n	8001d0a <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d96:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001dca:	e042      	b.n	8001e52 <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001dd0:	68f8      	ldr	r0, [r7, #12]
 8001dd2:	f000 fc83 	bl	80026dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e04c      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d118      	bne.n	8001e52 <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691a      	ldr	r2, [r3, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	3b01      	subs	r3, #1
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f47f ae99 	bne.w	8001b8e <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2220      	movs	r2, #32
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e000      	b.n	8001e7a <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8001e78:	2302      	movs	r3, #2
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	00010004 	.word	0x00010004
 8001e88:	20000008 	.word	0x20000008
 8001e8c:	14f8b589 	.word	0x14f8b589

08001e90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af02      	add	r7, sp, #8
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d006      	beq.n	8001eba <I2C_MasterRequestWrite+0x2a>
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d003      	beq.n	8001eba <I2C_MasterRequestWrite+0x2a>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001eb8:	d108      	bne.n	8001ecc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e00b      	b.n	8001ee4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	2b12      	cmp	r3, #18
 8001ed2:	d107      	bne.n	8001ee4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ee2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 fa9b 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00d      	beq.n	8001f18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f0a:	d103      	bne.n	8001f14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e035      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f20:	d108      	bne.n	8001f34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f22:	897b      	ldrh	r3, [r7, #10]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	e01b      	b.n	8001f6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f34:	897b      	ldrh	r3, [r7, #10]
 8001f36:	11db      	asrs	r3, r3, #7
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f003 0306 	and.w	r3, r3, #6
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f063 030f 	orn	r3, r3, #15
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	490e      	ldr	r1, [pc, #56]	; (8001f8c <I2C_MasterRequestWrite+0xfc>)
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 fac1 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e010      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f62:	897b      	ldrh	r3, [r7, #10]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <I2C_MasterRequestWrite+0x100>)
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fab1 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	00010008 	.word	0x00010008
 8001f90:	00010002 	.word	0x00010002

08001f94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	603b      	str	r3, [r7, #0]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d006      	beq.n	8001fce <I2C_MasterRequestRead+0x3a>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d003      	beq.n	8001fce <I2C_MasterRequestRead+0x3a>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fcc:	d108      	bne.n	8001fe0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	e00b      	b.n	8001ff8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	2b11      	cmp	r3, #17
 8001fe6:	d107      	bne.n	8001ff8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002004:	68f8      	ldr	r0, [r7, #12]
 8002006:	f000 fa11 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201e:	d103      	bne.n	8002028 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002026:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e079      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002034:	d108      	bne.n	8002048 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002036:	897b      	ldrh	r3, [r7, #10]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e05f      	b.n	8002108 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002048:	897b      	ldrh	r3, [r7, #10]
 800204a:	11db      	asrs	r3, r3, #7
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0306 	and.w	r3, r3, #6
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f063 030f 	orn	r3, r3, #15
 8002058:	b2da      	uxtb	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4930      	ldr	r1, [pc, #192]	; (8002128 <I2C_MasterRequestRead+0x194>)
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 fa37 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e054      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002076:	897b      	ldrh	r3, [r7, #10]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4929      	ldr	r1, [pc, #164]	; (800212c <I2C_MasterRequestRead+0x198>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 fa27 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e044      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f9af 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00d      	beq.n	80020f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020e2:	d103      	bne.n	80020ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e017      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80020f0:	897b      	ldrh	r3, [r7, #10]
 80020f2:	11db      	asrs	r3, r3, #7
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	f003 0306 	and.w	r3, r3, #6
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	f063 030e 	orn	r3, r3, #14
 8002100:	b2da      	uxtb	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	4907      	ldr	r1, [pc, #28]	; (800212c <I2C_MasterRequestRead+0x198>)
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f000 f9e3 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e000      	b.n	8002120 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	00010008 	.word	0x00010008
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	4608      	mov	r0, r1
 800213a:	4611      	mov	r1, r2
 800213c:	461a      	mov	r2, r3
 800213e:	4603      	mov	r3, r0
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	460b      	mov	r3, r1
 8002144:	813b      	strh	r3, [r7, #8]
 8002146:	4613      	mov	r3, r2
 8002148:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002158:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2200      	movs	r2, #0
 8002162:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 f960 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002180:	d103      	bne.n	800218a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e05f      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800218e:	897b      	ldrh	r3, [r7, #10]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800219c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	6a3a      	ldr	r2, [r7, #32]
 80021a2:	492d      	ldr	r1, [pc, #180]	; (8002258 <I2C_RequestMemoryWrite+0x128>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f998 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e04c      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	617b      	str	r3, [r7, #20]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fa02 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00d      	beq.n	80021f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021de:	2b04      	cmp	r3, #4
 80021e0:	d107      	bne.n	80021f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e02b      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021fc:	893b      	ldrh	r3, [r7, #8]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	611a      	str	r2, [r3, #16]
 8002206:	e021      	b.n	800224c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002208:	893b      	ldrh	r3, [r7, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	b29b      	uxth	r3, r3
 800220e:	b2da      	uxtb	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002218:	6a39      	ldr	r1, [r7, #32]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f9dc 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00d      	beq.n	8002242 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	2b04      	cmp	r3, #4
 800222c:	d107      	bne.n	800223e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e005      	b.n	800224e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002242:	893b      	ldrh	r3, [r7, #8]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3718      	adds	r7, #24
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	00010002 	.word	0x00010002

0800225c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af02      	add	r7, sp, #8
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	4608      	mov	r0, r1
 8002266:	4611      	mov	r1, r2
 8002268:	461a      	mov	r2, r3
 800226a:	4603      	mov	r3, r0
 800226c:	817b      	strh	r3, [r7, #10]
 800226e:	460b      	mov	r3, r1
 8002270:	813b      	strh	r3, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002284:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002294:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2200      	movs	r2, #0
 800229e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f8c2 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00d      	beq.n	80022ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022bc:	d103      	bne.n	80022c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e0aa      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022ca:	897b      	ldrh	r3, [r7, #10]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	6a3a      	ldr	r2, [r7, #32]
 80022de:	4952      	ldr	r1, [pc, #328]	; (8002428 <I2C_RequestMemoryRead+0x1cc>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 f8fa 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e097      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	6a39      	ldr	r1, [r7, #32]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 f964 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	2b04      	cmp	r3, #4
 800231c:	d107      	bne.n	800232e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e076      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002338:	893b      	ldrh	r3, [r7, #8]
 800233a:	b2da      	uxtb	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	611a      	str	r2, [r3, #16]
 8002342:	e021      	b.n	8002388 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002344:	893b      	ldrh	r3, [r7, #8]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	b29b      	uxth	r3, r3
 800234a:	b2da      	uxtb	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002354:	6a39      	ldr	r1, [r7, #32]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f93e 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	2b04      	cmp	r3, #4
 8002368:	d107      	bne.n	800237a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002378:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e050      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800237e:	893b      	ldrh	r3, [r7, #8]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238a:	6a39      	ldr	r1, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 f923 	bl	80025d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e035      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	6a3b      	ldr	r3, [r7, #32]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 f82b 	bl	800242c <I2C_WaitOnFlagUntilTimeout>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00d      	beq.n	80023f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ea:	d103      	bne.n	80023f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e013      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <I2C_RequestMemoryRead+0x1cc>)
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f863 	bl	80024da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	00010002 	.word	0x00010002

0800242c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	603b      	str	r3, [r7, #0]
 8002438:	4613      	mov	r3, r2
 800243a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800243c:	e025      	b.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002444:	d021      	beq.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	f7fe f9fd 	bl	8000844 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d302      	bcc.n	800245c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d116      	bne.n	800248a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f043 0220 	orr.w	r2, r3, #32
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e023      	b.n	80024d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d10d      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	e00c      	b.n	80024ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4013      	ands	r3, r2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	bf0c      	ite	eq
 80024c2:	2301      	moveq	r3, #1
 80024c4:	2300      	movne	r3, #0
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d0b6      	beq.n	800243e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	60f8      	str	r0, [r7, #12]
 80024e2:	60b9      	str	r1, [r7, #8]
 80024e4:	607a      	str	r2, [r7, #4]
 80024e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024e8:	e051      	b.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d123      	bne.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002508:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002512:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2220      	movs	r2, #32
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	f043 0204 	orr.w	r2, r3, #4
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e046      	b.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d021      	beq.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800254a:	f7fe f97b 	bl	8000844 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	429a      	cmp	r2, r3
 8002558:	d302      	bcc.n	8002560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d116      	bne.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	f043 0220 	orr.w	r2, r3, #32
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e020      	b.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e00b      	b.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d18d      	bne.n	80024ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025e4:	e02d      	b.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	f000 f8ce 	bl	8002788 <I2C_IsAcknowledgeFailed>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e02d      	b.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fc:	d021      	beq.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025fe:	f7fe f921 	bl	8000844 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	429a      	cmp	r2, r3
 800260c:	d302      	bcc.n	8002614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d116      	bne.n	8002642 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2220      	movs	r2, #32
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e007      	b.n	8002652 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264c:	2b80      	cmp	r3, #128	; 0x80
 800264e:	d1ca      	bne.n	80025e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002666:	e02d      	b.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 f88d 	bl	8002788 <I2C_IsAcknowledgeFailed>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e02d      	b.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800267e:	d021      	beq.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002680:	f7fe f8e0 	bl	8000844 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	429a      	cmp	r2, r3
 800268e:	d302      	bcc.n	8002696 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d116      	bne.n	80026c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2200      	movs	r2, #0
 800269a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2220      	movs	r2, #32
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f043 0220 	orr.w	r2, r3, #32
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e007      	b.n	80026d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d1ca      	bne.n	8002668 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026e8:	e042      	b.n	8002770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d119      	bne.n	800272c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0210 	mvn.w	r2, #16
 8002700:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e029      	b.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272c:	f7fe f88a 	bl	8000844 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	429a      	cmp	r2, r3
 800273a:	d302      	bcc.n	8002742 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d116      	bne.n	8002770 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e007      	b.n	8002780 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800277a:	2b40      	cmp	r3, #64	; 0x40
 800277c:	d1b5      	bne.n	80026ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800279e:	d11b      	bne.n	80027d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	f043 0204 	orr.w	r2, r3, #4
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e000      	b.n	80027da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e26c      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 8087 	beq.w	8002912 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002804:	4b92      	ldr	r3, [pc, #584]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 030c 	and.w	r3, r3, #12
 800280c:	2b04      	cmp	r3, #4
 800280e:	d00c      	beq.n	800282a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002810:	4b8f      	ldr	r3, [pc, #572]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 030c 	and.w	r3, r3, #12
 8002818:	2b08      	cmp	r3, #8
 800281a:	d112      	bne.n	8002842 <HAL_RCC_OscConfig+0x5e>
 800281c:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002828:	d10b      	bne.n	8002842 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800282a:	4b89      	ldr	r3, [pc, #548]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d06c      	beq.n	8002910 <HAL_RCC_OscConfig+0x12c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d168      	bne.n	8002910 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e246      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x76>
 800284c:	4b80      	ldr	r3, [pc, #512]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a7f      	ldr	r2, [pc, #508]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	e02e      	b.n	80028b8 <HAL_RCC_OscConfig+0xd4>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x98>
 8002862:	4b7b      	ldr	r3, [pc, #492]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a7a      	ldr	r2, [pc, #488]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b78      	ldr	r3, [pc, #480]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a77      	ldr	r2, [pc, #476]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002874:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	e01d      	b.n	80028b8 <HAL_RCC_OscConfig+0xd4>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002884:	d10c      	bne.n	80028a0 <HAL_RCC_OscConfig+0xbc>
 8002886:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a71      	ldr	r2, [pc, #452]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800288c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b6f      	ldr	r3, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6e      	ldr	r2, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e00b      	b.n	80028b8 <HAL_RCC_OscConfig+0xd4>
 80028a0:	4b6b      	ldr	r3, [pc, #428]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6a      	ldr	r2, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80028a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80028b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d013      	beq.n	80028e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c0:	f7fd ffc0 	bl	8000844 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7fd ffbc 	bl	8000844 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e1fa      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b5d      	ldr	r3, [pc, #372]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0xe4>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e8:	f7fd ffac 	bl	8000844 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028f0:	f7fd ffa8 	bl	8000844 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b64      	cmp	r3, #100	; 0x64
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e1e6      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1f0      	bne.n	80028f0 <HAL_RCC_OscConfig+0x10c>
 800290e:	e000      	b.n	8002912 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d063      	beq.n	80029e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800291e:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 030c 	and.w	r3, r3, #12
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800292a:	4b49      	ldr	r3, [pc, #292]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b08      	cmp	r3, #8
 8002934:	d11c      	bne.n	8002970 <HAL_RCC_OscConfig+0x18c>
 8002936:	4b46      	ldr	r3, [pc, #280]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d116      	bne.n	8002970 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_RCC_OscConfig+0x176>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e1ba      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	4939      	ldr	r1, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800296a:	4313      	orrs	r3, r2
 800296c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	e03a      	b.n	80029e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d020      	beq.n	80029ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCC_OscConfig+0x270>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7fd ff61 	bl	8000844 <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002986:	f7fd ff5d 	bl	8000844 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e19b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4927      	ldr	r1, [pc, #156]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	600b      	str	r3, [r1, #0]
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_RCC_OscConfig+0x270>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fd ff40 	bl	8000844 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029c8:	f7fd ff3c 	bl	8000844 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e17a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	4b1d      	ldr	r3, [pc, #116]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0308 	and.w	r3, r3, #8
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d03a      	beq.n	8002a68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d019      	beq.n	8002a2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_RCC_OscConfig+0x274>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a00:	f7fd ff20 	bl	8000844 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a08:	f7fd ff1c 	bl	8000844 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e15a      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a26:	2001      	movs	r0, #1
 8002a28:	f000 fada 	bl	8002fe0 <RCC_Delay>
 8002a2c:	e01c      	b.n	8002a68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a2e:	4b0a      	ldr	r3, [pc, #40]	; (8002a58 <HAL_RCC_OscConfig+0x274>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a34:	f7fd ff06 	bl	8000844 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3a:	e00f      	b.n	8002a5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a3c:	f7fd ff02 	bl	8000844 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d908      	bls.n	8002a5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e140      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	42420000 	.word	0x42420000
 8002a58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a5c:	4b9e      	ldr	r3, [pc, #632]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e9      	bne.n	8002a3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80a6 	beq.w	8002bc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2300      	movs	r3, #0
 8002a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7a:	4b97      	ldr	r3, [pc, #604]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a86:	4b94      	ldr	r3, [pc, #592]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	4a93      	ldr	r2, [pc, #588]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a90:	61d3      	str	r3, [r2, #28]
 8002a92:	4b91      	ldr	r3, [pc, #580]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa2:	4b8e      	ldr	r3, [pc, #568]	; (8002cdc <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d118      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	4b8b      	ldr	r3, [pc, #556]	; (8002cdc <HAL_RCC_OscConfig+0x4f8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a8a      	ldr	r2, [pc, #552]	; (8002cdc <HAL_RCC_OscConfig+0x4f8>)
 8002ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aba:	f7fd fec3 	bl	8000844 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fd febf 	bl	8000844 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b64      	cmp	r3, #100	; 0x64
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e0fd      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	4b81      	ldr	r3, [pc, #516]	; (8002cdc <HAL_RCC_OscConfig+0x4f8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d106      	bne.n	8002af6 <HAL_RCC_OscConfig+0x312>
 8002ae8:	4b7b      	ldr	r3, [pc, #492]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	4a7a      	ldr	r2, [pc, #488]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6213      	str	r3, [r2, #32]
 8002af4:	e02d      	b.n	8002b52 <HAL_RCC_OscConfig+0x36e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCC_OscConfig+0x334>
 8002afe:	4b76      	ldr	r3, [pc, #472]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4a75      	ldr	r2, [pc, #468]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6213      	str	r3, [r2, #32]
 8002b0a:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	4a72      	ldr	r2, [pc, #456]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b10:	f023 0304 	bic.w	r3, r3, #4
 8002b14:	6213      	str	r3, [r2, #32]
 8002b16:	e01c      	b.n	8002b52 <HAL_RCC_OscConfig+0x36e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	2b05      	cmp	r3, #5
 8002b1e:	d10c      	bne.n	8002b3a <HAL_RCC_OscConfig+0x356>
 8002b20:	4b6d      	ldr	r3, [pc, #436]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4a6c      	ldr	r2, [pc, #432]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b26:	f043 0304 	orr.w	r3, r3, #4
 8002b2a:	6213      	str	r3, [r2, #32]
 8002b2c:	4b6a      	ldr	r3, [pc, #424]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	4a69      	ldr	r2, [pc, #420]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	6213      	str	r3, [r2, #32]
 8002b38:	e00b      	b.n	8002b52 <HAL_RCC_OscConfig+0x36e>
 8002b3a:	4b67      	ldr	r3, [pc, #412]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	4a66      	ldr	r2, [pc, #408]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	6213      	str	r3, [r2, #32]
 8002b46:	4b64      	ldr	r3, [pc, #400]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a63      	ldr	r2, [pc, #396]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d015      	beq.n	8002b86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b5a:	f7fd fe73 	bl	8000844 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f7fd fe6f 	bl	8000844 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e0ab      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b78:	4b57      	ldr	r3, [pc, #348]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0ee      	beq.n	8002b62 <HAL_RCC_OscConfig+0x37e>
 8002b84:	e014      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b86:	f7fd fe5d 	bl	8000844 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8c:	e00a      	b.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fd fe59 	bl	8000844 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e095      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba4:	4b4c      	ldr	r3, [pc, #304]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ee      	bne.n	8002b8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bb0:	7dfb      	ldrb	r3, [r7, #23]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b48      	ldr	r3, [pc, #288]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a47      	ldr	r2, [pc, #284]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8081 	beq.w	8002cce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bcc:	4b42      	ldr	r3, [pc, #264]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d061      	beq.n	8002c9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d146      	bne.n	8002c6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be0:	4b3f      	ldr	r3, [pc, #252]	; (8002ce0 <HAL_RCC_OscConfig+0x4fc>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fd fe2d 	bl	8000844 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fd fe29 	bl	8000844 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e067      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f0      	bne.n	8002bee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c14:	d108      	bne.n	8002c28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c16:	4b30      	ldr	r3, [pc, #192]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	492d      	ldr	r1, [pc, #180]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c28:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a19      	ldr	r1, [r3, #32]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	4927      	ldr	r1, [pc, #156]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x4fc>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c46:	f7fd fdfd 	bl	8000844 <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4c:	e008      	b.n	8002c60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c4e:	f7fd fdf9 	bl	8000844 <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d901      	bls.n	8002c60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e037      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	4b1d      	ldr	r3, [pc, #116]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d0f0      	beq.n	8002c4e <HAL_RCC_OscConfig+0x46a>
 8002c6c:	e02f      	b.n	8002cce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_RCC_OscConfig+0x4fc>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c74:	f7fd fde6 	bl	8000844 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7c:	f7fd fde2 	bl	8000844 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e020      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1f0      	bne.n	8002c7c <HAL_RCC_OscConfig+0x498>
 8002c9a:	e018      	b.n	8002cce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	69db      	ldr	r3, [r3, #28]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e013      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_OscConfig+0x4f4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d001      	beq.n	8002cce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	42420060 	.word	0x42420060

08002ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e0d0      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b6a      	ldr	r3, [pc, #424]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d910      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b67      	ldr	r3, [pc, #412]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4965      	ldr	r1, [pc, #404]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b63      	ldr	r3, [pc, #396]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0b8      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d58:	4b53      	ldr	r3, [pc, #332]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a52      	ldr	r2, [pc, #328]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d64:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	494d      	ldr	r1, [pc, #308]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	4313      	orrs	r3, r2
 8002d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d040      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d107      	bne.n	8002d9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d8a:	4b47      	ldr	r3, [pc, #284]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d115      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e07f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e073      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db2:	4b3d      	ldr	r3, [pc, #244]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e06b      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dc2:	4b39      	ldr	r3, [pc, #228]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f023 0203 	bic.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	4936      	ldr	r1, [pc, #216]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dd4:	f7fd fd36 	bl	8000844 <HAL_GetTick>
 8002dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dda:	e00a      	b.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ddc:	f7fd fd32 	bl	8000844 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e053      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2d      	ldr	r3, [pc, #180]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 020c 	and.w	r2, r3, #12
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1eb      	bne.n	8002ddc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d210      	bcs.n	8002e34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 0207 	bic.w	r2, r3, #7
 8002e1a:	4922      	ldr	r1, [pc, #136]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b20      	ldr	r3, [pc, #128]	; (8002ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e032      	b.n	8002e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4916      	ldr	r1, [pc, #88]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e5e:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	490e      	ldr	r1, [pc, #56]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e72:	f000 f821 	bl	8002eb8 <HAL_RCC_GetSysClockFreq>
 8002e76:	4601      	mov	r1, r0
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	091b      	lsrs	r3, r3, #4
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x1c8>)
 8002e84:	5cd3      	ldrb	r3, [r2, r3]
 8002e86:	fa21 f303 	lsr.w	r3, r1, r3
 8002e8a:	4a09      	ldr	r2, [pc, #36]	; (8002eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8002e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e8e:	4b09      	ldr	r3, [pc, #36]	; (8002eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fd fc94 	bl	80007c0 <HAL_InitTick>

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	08005128 	.word	0x08005128
 8002eb0:	20000008 	.word	0x20000008
 8002eb4:	2000000c 	.word	0x2000000c

08002eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eb8:	b490      	push	{r4, r7}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ec0:	1d3c      	adds	r4, r7, #4
 8002ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ee2:	4b23      	ldr	r3, [pc, #140]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d002      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d003      	beq.n	8002efe <HAL_RCC_GetSysClockFreq+0x46>
 8002ef6:	e02d      	b.n	8002f54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002efa:	623b      	str	r3, [r7, #32]
      break;
 8002efc:	e02d      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	0c9b      	lsrs	r3, r3, #18
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002f10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d013      	beq.n	8002f44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	0c5b      	lsrs	r3, r3, #17
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	4a0f      	ldr	r2, [pc, #60]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f36:	fb02 f203 	mul.w	r2, r2, r3
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	627b      	str	r3, [r7, #36]	; 0x24
 8002f42:	e004      	b.n	8002f4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	4a0c      	ldr	r2, [pc, #48]	; (8002f78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f50:	623b      	str	r3, [r7, #32]
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f54:	4b07      	ldr	r3, [pc, #28]	; (8002f74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f56:	623b      	str	r3, [r7, #32]
      break;
 8002f58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc90      	pop	{r4, r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	080050f8 	.word	0x080050f8
 8002f6c:	08005108 	.word	0x08005108
 8002f70:	40021000 	.word	0x40021000
 8002f74:	007a1200 	.word	0x007a1200
 8002f78:	003d0900 	.word	0x003d0900

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b02      	ldr	r3, [pc, #8]	; (8002f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	20000008 	.word	0x20000008

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff2 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f98:	4601      	mov	r1, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5cd3      	ldrb	r3, [r2, r3]
 8002fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08005138 	.word	0x08005138

08002fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fbc:	f7ff ffde 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc0:	4601      	mov	r1, r0
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	0adb      	lsrs	r3, r3, #11
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4a03      	ldr	r2, [pc, #12]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fce:	5cd3      	ldrb	r3, [r2, r3]
 8002fd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08005138 	.word	0x08005138

08002fe0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <RCC_Delay+0x34>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <RCC_Delay+0x38>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	0a5b      	lsrs	r3, r3, #9
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ffc:	bf00      	nop
  }
  while (Delay --);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	1e5a      	subs	r2, r3, #1
 8003002:	60fa      	str	r2, [r7, #12]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f9      	bne.n	8002ffc <RCC_Delay+0x1c>
}
 8003008:	bf00      	nop
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000008 	.word	0x20000008
 8003018:	10624dd3 	.word	0x10624dd3

0800301c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e041      	b.n	80030b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fac4 	bl	80005d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fa1a 	bl	8003494 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3708      	adds	r7, #8
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d122      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11b      	bne.n	8003116 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f06f 0202 	mvn.w	r2, #2
 80030e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f9ad 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003102:	e005      	b.n	8003110 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9a0 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f9af 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d122      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b04      	cmp	r3, #4
 8003130:	d11b      	bne.n	800316a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0204 	mvn.w	r2, #4
 800313a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f983 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 8003156:	e005      	b.n	8003164 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f976 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f985 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d122      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f003 0308 	and.w	r3, r3, #8
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11b      	bne.n	80031be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f06f 0208 	mvn.w	r2, #8
 800318e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2204      	movs	r2, #4
 8003194:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f959 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 80031aa:	e005      	b.n	80031b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f94c 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f95b 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d122      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0310 	and.w	r3, r3, #16
 80031d6:	2b10      	cmp	r3, #16
 80031d8:	d11b      	bne.n	8003212 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0210 	mvn.w	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2208      	movs	r2, #8
 80031e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 f92f 	bl	800345c <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 f922 	bl	800344a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f931 	bl	800346e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d10e      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d107      	bne.n	800323e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0201 	mvn.w	r2, #1
 8003236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8fd 	bl	8003438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003248:	2b80      	cmp	r3, #128	; 0x80
 800324a:	d10e      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b80      	cmp	r3, #128	; 0x80
 8003258:	d107      	bne.n	800326a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 fa74 	bl	8003752 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d10e      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b40      	cmp	r3, #64	; 0x40
 8003284:	d107      	bne.n	8003296 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800328e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8f5 	bl	8003480 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f003 0320 	and.w	r3, r3, #32
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d10e      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0220 	mvn.w	r2, #32
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 fa3f 	bl	8003740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_TIM_ConfigClockSource+0x18>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0a6      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x166>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2202      	movs	r2, #2
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003300:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003308:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b40      	cmp	r3, #64	; 0x40
 8003318:	d067      	beq.n	80033ea <HAL_TIM_ConfigClockSource+0x120>
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d80b      	bhi.n	8003336 <HAL_TIM_ConfigClockSource+0x6c>
 800331e:	2b10      	cmp	r3, #16
 8003320:	d073      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
 8003322:	2b10      	cmp	r3, #16
 8003324:	d802      	bhi.n	800332c <HAL_TIM_ConfigClockSource+0x62>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d06f      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800332a:	e078      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332c:	2b20      	cmp	r3, #32
 800332e:	d06c      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
 8003330:	2b30      	cmp	r3, #48	; 0x30
 8003332:	d06a      	beq.n	800340a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003334:	e073      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003336:	2b70      	cmp	r3, #112	; 0x70
 8003338:	d00d      	beq.n	8003356 <HAL_TIM_ConfigClockSource+0x8c>
 800333a:	2b70      	cmp	r3, #112	; 0x70
 800333c:	d804      	bhi.n	8003348 <HAL_TIM_ConfigClockSource+0x7e>
 800333e:	2b50      	cmp	r3, #80	; 0x50
 8003340:	d033      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0xe0>
 8003342:	2b60      	cmp	r3, #96	; 0x60
 8003344:	d041      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003346:	e06a      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334c:	d066      	beq.n	800341c <HAL_TIM_ConfigClockSource+0x152>
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d017      	beq.n	8003384 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003354:	e063      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	6899      	ldr	r1, [r3, #8]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	f000 f96e 	bl	8003646 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
      break;
 8003382:	e04c      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	6899      	ldr	r1, [r3, #8]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f000 f957 	bl	8003646 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a6:	609a      	str	r2, [r3, #8]
      break;
 80033a8:	e039      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 f8ce 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2150      	movs	r1, #80	; 0x50
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 f925 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e029      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f000 f8ec 	bl	80035b4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2160      	movs	r1, #96	; 0x60
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 f915 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 80033e8:	e019      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f000 f8ae 	bl	8003558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f905 	bl	8003612 <TIM_ITRx_SetConfig>
      break;
 8003408:	e009      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f000 f8fc 	bl	8003612 <TIM_ITRx_SetConfig>
        break;
 800341a:	e000      	b.n	800341e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800341c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b2:	d007      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a26      	ldr	r2, [pc, #152]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <TIM_Base_SetConfig+0x30>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a25      	ldr	r2, [pc, #148]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d108      	bne.n	80034d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a1c      	ldr	r2, [pc, #112]	; (800354c <TIM_Base_SetConfig+0xb8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <TIM_Base_SetConfig+0xbc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0x62>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a18      	ldr	r2, [pc, #96]	; (8003554 <TIM_Base_SetConfig+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <TIM_Base_SetConfig+0xb8>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]
}
 8003542:	bf00      	nop
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40012c00 	.word	0x40012c00
 8003550:	40000400 	.word	0x40000400
 8003554:	40000800 	.word	0x40000800

08003558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	f023 0201 	bic.w	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f023 030a 	bic.w	r3, r3, #10
 8003594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	4313      	orrs	r3, r2
 800359c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	621a      	str	r2, [r3, #32]
}
 80035aa:	bf00      	nop
 80035ac:	371c      	adds	r7, #28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 0210 	bic.w	r2, r3, #16
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	031b      	lsls	r3, r3, #12
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	621a      	str	r2, [r3, #32]
}
 8003608:	bf00      	nop
 800360a:	371c      	adds	r7, #28
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003612:	b480      	push	{r7}
 8003614:	b085      	sub	sp, #20
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
 800361a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	f043 0307 	orr.w	r3, r3, #7
 8003634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	609a      	str	r2, [r3, #8]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr

08003646 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003646:	b480      	push	{r7}
 8003648:	b087      	sub	sp, #28
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
 8003652:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003660:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	431a      	orrs	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4313      	orrs	r3, r2
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	609a      	str	r2, [r3, #8]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003698:	2302      	movs	r3, #2
 800369a:	e046      	b.n	800372a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a16      	ldr	r2, [pc, #88]	; (8003734 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d00e      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e8:	d009      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a12      	ldr	r2, [pc, #72]	; (8003738 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d004      	beq.n	80036fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10c      	bne.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	4313      	orrs	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bc80      	pop	{r7}
 8003732:	4770      	bx	lr
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40000400 	.word	0x40000400
 800373c:	40000800 	.word	0x40000800

08003740 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	bc80      	pop	{r7}
 8003750:	4770      	bx	lr

08003752 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e03f      	b.n	80037f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fc ff44 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fb39 	bl	8003e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b08a      	sub	sp, #40	; 0x28
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d17c      	bne.n	8003918 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_Transmit+0x2c>
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e075      	b.n	800391a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x3e>
 8003838:	2302      	movs	r3, #2
 800383a:	e06e      	b.n	800391a <HAL_UART_Transmit+0x11c>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003852:	f7fc fff7 	bl	8000844 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	88fa      	ldrh	r2, [r7, #6]
 8003862:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386c:	d108      	bne.n	8003880 <HAL_UART_Transmit+0x82>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	e003      	b.n	8003888 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003890:	e02a      	b.n	80038e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f95c 	bl	8003b5a <UART_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e036      	b.n	800391a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10b      	bne.n	80038ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	461a      	mov	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	3302      	adds	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
 80038c8:	e007      	b.n	80038da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	781a      	ldrb	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	3301      	adds	r3, #1
 80038d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1cf      	bne.n	8003892 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2140      	movs	r1, #64	; 0x40
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 f92c 	bl	8003b5a <UART_WaitOnFlagUntilTimeout>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e006      	b.n	800391a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3720      	adds	r7, #32
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003944:	2300      	movs	r3, #0
 8003946:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0320 	and.w	r3, r3, #32
 8003960:	2b00      	cmp	r3, #0
 8003962:	d008      	beq.n	8003976 <HAL_UART_IRQHandler+0x52>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9d5 	bl	8003d1e <UART_Receive_IT>
      return;
 8003974:	e0d1      	b.n	8003b1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80b0 	beq.w	8003ade <HAL_UART_IRQHandler+0x1ba>
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_UART_IRQHandler+0x70>
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80a5 	beq.w	8003ade <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_UART_IRQHandler+0x90>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d005      	beq.n	80039b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ac:	f043 0201 	orr.w	r2, r3, #1
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00a      	beq.n	80039d4 <HAL_UART_IRQHandler+0xb0>
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039cc:	f043 0202 	orr.w	r2, r3, #2
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00a      	beq.n	80039f4 <HAL_UART_IRQHandler+0xd0>
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d005      	beq.n	80039f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00f      	beq.n	8003a1e <HAL_UART_IRQHandler+0xfa>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d104      	bne.n	8003a12 <HAL_UART_IRQHandler+0xee>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d005      	beq.n	8003a1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a16:	f043 0208 	orr.w	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d078      	beq.n	8003b18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	f003 0320 	and.w	r3, r3, #32
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d007      	beq.n	8003a40 <HAL_UART_IRQHandler+0x11c>
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f96f 	bl	8003d1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d102      	bne.n	8003a68 <HAL_UART_IRQHandler+0x144>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d031      	beq.n	8003acc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 f8c0 	bl	8003bee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_UART_IRQHandler+0x1fc>)
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f7fd f809 	bl	8000ab8 <HAL_DMA_Abort_IT>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d016      	beq.n	8003ada <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aba:	e00e      	b.n	8003ada <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f843 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac2:	e00a      	b.n	8003ada <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f83f 	bl	8003b48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aca:	e006      	b.n	8003ada <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 f83b 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003ad8:	e01e      	b.n	8003b18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ada:	bf00      	nop
    return;
 8003adc:	e01c      	b.n	8003b18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_UART_IRQHandler+0x1d6>
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f8ac 	bl	8003c50 <UART_Transmit_IT>
    return;
 8003af8:	e00f      	b.n	8003b1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00a      	beq.n	8003b1a <HAL_UART_IRQHandler+0x1f6>
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8ed 	bl	8003cee <UART_EndTransmit_IT>
    return;
 8003b14:	bf00      	nop
 8003b16:	e000      	b.n	8003b1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8003b18:	bf00      	nop
  }
}
 8003b1a:	3720      	adds	r7, #32
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	08003c29 	.word	0x08003c29

08003b24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr

08003b48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b6a:	e02c      	b.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d028      	beq.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d007      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b7a:	f7fc fe63 	bl	8000844 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d21d      	bcs.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e00f      	b.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	4013      	ands	r3, r2
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	bf0c      	ite	eq
 8003bd6:	2301      	moveq	r3, #1
 8003bd8:	2300      	movne	r3, #0
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d0c3      	beq.n	8003b6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68da      	ldr	r2, [r3, #12]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c04:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	695a      	ldr	r2, [r3, #20]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f022 0201 	bic.w	r2, r2, #1
 8003c14:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f7ff ff80 	bl	8003b48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b21      	cmp	r3, #33	; 0x21
 8003c62:	d13e      	bne.n	8003ce2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6c:	d114      	bne.n	8003c98 <UART_Transmit_IT+0x48>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d110      	bne.n	8003c98 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	881b      	ldrh	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	621a      	str	r2, [r3, #32]
 8003c96:	e008      	b.n	8003caa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	1c59      	adds	r1, r3, #1
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6211      	str	r1, [r2, #32]
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10f      	bne.n	8003cde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68da      	ldr	r2, [r3, #12]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ccc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	e000      	b.n	8003ce4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ce2:	2302      	movs	r3, #2
  }
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7ff ff08 	bl	8003b24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b22      	cmp	r3, #34	; 0x22
 8003d30:	d170      	bne.n	8003e14 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3a:	d117      	bne.n	8003d6c <UART_Receive_IT+0x4e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d64:	1c9a      	adds	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	629a      	str	r2, [r3, #40]	; 0x28
 8003d6a:	e026      	b.n	8003dba <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003d72:	2300      	movs	r3, #0
 8003d74:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	d007      	beq.n	8003d90 <UART_Receive_IT+0x72>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <UART_Receive_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	701a      	strb	r2, [r3, #0]
 8003d9c:	e008      	b.n	8003db0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003daa:	b2da      	uxtb	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d120      	bne.n	8003e10 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0220 	bic.w	r2, r2, #32
 8003ddc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68da      	ldr	r2, [r3, #12]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695a      	ldr	r2, [r3, #20]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7ff fe95 	bl	8003b36 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e002      	b.n	8003e16 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	430a      	orrs	r2, r1
 8003e3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e5a:	f023 030c 	bic.w	r3, r3, #12
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <UART_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d103      	bne.n	8003e90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e88:	f7ff f896 	bl	8002fb8 <HAL_RCC_GetPCLK2Freq>
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	e002      	b.n	8003e96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e90:	f7ff f87e 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8003e94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	009a      	lsls	r2, r3, #2
 8003ea0:	441a      	add	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <UART_SetConfig+0x118>)
 8003eae:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb2:	095b      	lsrs	r3, r3, #5
 8003eb4:	0119      	lsls	r1, r3, #4
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	441a      	add	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <UART_SetConfig+0x118>)
 8003ece:	fba3 0302 	umull	r0, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2064      	movs	r0, #100	; 0x64
 8003ed6:	fb00 f303 	mul.w	r3, r0, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	3332      	adds	r3, #50	; 0x32
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <UART_SetConfig+0x118>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003eec:	4419      	add	r1, r3
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009a      	lsls	r2, r3, #2
 8003ef8:	441a      	add	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <UART_SetConfig+0x118>)
 8003f06:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2064      	movs	r0, #100	; 0x64
 8003f0e:	fb00 f303 	mul.w	r3, r0, r3
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	; 0x32
 8003f18:	4a07      	ldr	r2, [pc, #28]	; (8003f38 <UART_SetConfig+0x118>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 020f 	and.w	r2, r3, #15
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	440a      	add	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f2c:	bf00      	nop
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40013800 	.word	0x40013800
 8003f38:	51eb851f 	.word	0x51eb851f

08003f3c <bluetooth_transmit_humi>:
uint8_t line_feed='\n';
uint8_t space=' ';


void bluetooth_transmit_humi(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
	uint8_t temp[3]={
 8003f42:	2300      	movs	r3, #0
 8003f44:	713b      	strb	r3, [r7, #4]
 8003f46:	2300      	movs	r3, #0
 8003f48:	717b      	strb	r3, [r7, #5]
 8003f4a:	2325      	movs	r3, #37	; 0x25
 8003f4c:	71bb      	strb	r3, [r7, #6]
			0,0,'%',
	};

	temp[0]=(dht11_data[0] / 10)+48;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <bluetooth_transmit_humi+0x64>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4a14      	ldr	r2, [pc, #80]	; (8003fa4 <bluetooth_transmit_humi+0x68>)
 8003f54:	fba2 2303 	umull	r2, r3, r2, r3
 8003f58:	08db      	lsrs	r3, r3, #3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	3330      	adds	r3, #48	; 0x30
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	713b      	strb	r3, [r7, #4]
	temp[1]=(dht11_data[0] % 10)+48;
 8003f62:	4b0f      	ldr	r3, [pc, #60]	; (8003fa0 <bluetooth_transmit_humi+0x64>)
 8003f64:	781a      	ldrb	r2, [r3, #0]
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <bluetooth_transmit_humi+0x68>)
 8003f68:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6c:	08d9      	lsrs	r1, r3, #3
 8003f6e:	460b      	mov	r3, r1
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	3330      	adds	r3, #48	; 0x30
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	717b      	strb	r3, [r7, #5]

	HAL_UART_Transmit(&huart1,string_humidity , sizeof(string_humidity),0xFF);
 8003f80:	23ff      	movs	r3, #255	; 0xff
 8003f82:	220a      	movs	r2, #10
 8003f84:	4908      	ldr	r1, [pc, #32]	; (8003fa8 <bluetooth_transmit_humi+0x6c>)
 8003f86:	4809      	ldr	r0, [pc, #36]	; (8003fac <bluetooth_transmit_humi+0x70>)
 8003f88:	f7ff fc39 	bl	80037fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, temp, sizeof(temp), 0xFF);
 8003f8c:	1d39      	adds	r1, r7, #4
 8003f8e:	23ff      	movs	r3, #255	; 0xff
 8003f90:	2203      	movs	r2, #3
 8003f92:	4806      	ldr	r0, [pc, #24]	; (8003fac <bluetooth_transmit_humi+0x70>)
 8003f94:	f7ff fc33 	bl	80037fe <HAL_UART_Transmit>
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000068 	.word	0x20000068
 8003fa4:	cccccccd 	.word	0xcccccccd
 8003fa8:	20000014 	.word	0x20000014
 8003fac:	200000d8 	.word	0x200000d8

08003fb0 <bluetooth_transmit_temp>:

void bluetooth_transmit_temp(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
	uint8_t temp[7]={
 8003fb6:	4a33      	ldr	r2, [pc, #204]	; (8004084 <bluetooth_transmit_temp+0xd4>)
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003fbe:	6018      	str	r0, [r3, #0]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	8019      	strh	r1, [r3, #0]
 8003fc4:	3302      	adds	r3, #2
 8003fc6:	0c0a      	lsrs	r2, r1, #16
 8003fc8:	701a      	strb	r2, [r3, #0]
	temp[3]=(dht11_data[3] / 100)+48;
	temp[4]=(dht11_data[3] % 100 / 10)+48;
	temp[5]=(dht11_data[3] % 10)+48;
	*/

	int32_t temp_data=bmp280_compensate_T_int32(BMP280_temp_read());
 8003fca:	f000 f9ef 	bl	80043ac <BMP280_temp_read>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa91 	bl	80044f8 <bmp280_compensate_T_int32>
 8003fd6:	60f8      	str	r0, [r7, #12]

	temp[0]=(temp_data / 1000)+48;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a2b      	ldr	r2, [pc, #172]	; (8004088 <bluetooth_transmit_temp+0xd8>)
 8003fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8003fe0:	1192      	asrs	r2, r2, #6
 8003fe2:	17db      	asrs	r3, r3, #31
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	3330      	adds	r3, #48	; 0x30
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	713b      	strb	r3, [r7, #4]
	temp[1]=(temp_data % 1000 / 100)+48;
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <bluetooth_transmit_temp+0xd8>)
 8003ff2:	fb83 1302 	smull	r1, r3, r3, r2
 8003ff6:	1199      	asrs	r1, r3, #6
 8003ff8:	17d3      	asrs	r3, r2, #31
 8003ffa:	1acb      	subs	r3, r1, r3
 8003ffc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <bluetooth_transmit_temp+0xdc>)
 8004008:	fb82 1203 	smull	r1, r2, r2, r3
 800400c:	1152      	asrs	r2, r2, #5
 800400e:	17db      	asrs	r3, r3, #31
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3330      	adds	r3, #48	; 0x30
 8004016:	b2db      	uxtb	r3, r3
 8004018:	717b      	strb	r3, [r7, #5]
	temp[3]=(temp_data % 100 / 10)+48;
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <bluetooth_transmit_temp+0xdc>)
 800401e:	fb83 1302 	smull	r1, r3, r3, r2
 8004022:	1159      	asrs	r1, r3, #5
 8004024:	17d3      	asrs	r3, r2, #31
 8004026:	1acb      	subs	r3, r1, r3
 8004028:	2164      	movs	r1, #100	; 0x64
 800402a:	fb01 f303 	mul.w	r3, r1, r3
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	4a17      	ldr	r2, [pc, #92]	; (8004090 <bluetooth_transmit_temp+0xe0>)
 8004032:	fb82 1203 	smull	r1, r2, r2, r3
 8004036:	1092      	asrs	r2, r2, #2
 8004038:	17db      	asrs	r3, r3, #31
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	3330      	adds	r3, #48	; 0x30
 8004040:	b2db      	uxtb	r3, r3
 8004042:	71fb      	strb	r3, [r7, #7]
	temp[4]=(temp_data % 10)+48;
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <bluetooth_transmit_temp+0xe0>)
 8004048:	fb83 1302 	smull	r1, r3, r3, r2
 800404c:	1099      	asrs	r1, r3, #2
 800404e:	17d3      	asrs	r3, r2, #31
 8004050:	1ac9      	subs	r1, r1, r3
 8004052:	460b      	mov	r3, r1
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	1ad1      	subs	r1, r2, r3
 800405c:	b2cb      	uxtb	r3, r1
 800405e:	3330      	adds	r3, #48	; 0x30
 8004060:	b2db      	uxtb	r3, r3
 8004062:	723b      	strb	r3, [r7, #8]

	HAL_UART_Transmit(&huart1, string_temperature, sizeof(string_temperature), 0xFF);
 8004064:	23ff      	movs	r3, #255	; 0xff
 8004066:	220d      	movs	r2, #13
 8004068:	490a      	ldr	r1, [pc, #40]	; (8004094 <bluetooth_transmit_temp+0xe4>)
 800406a:	480b      	ldr	r0, [pc, #44]	; (8004098 <bluetooth_transmit_temp+0xe8>)
 800406c:	f7ff fbc7 	bl	80037fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, temp, sizeof(temp), 0xFF);
 8004070:	1d39      	adds	r1, r7, #4
 8004072:	23ff      	movs	r3, #255	; 0xff
 8004074:	2207      	movs	r2, #7
 8004076:	4808      	ldr	r0, [pc, #32]	; (8004098 <bluetooth_transmit_temp+0xe8>)
 8004078:	f7ff fbc1 	bl	80037fe <HAL_UART_Transmit>
}
 800407c:	bf00      	nop
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	0800510c 	.word	0x0800510c
 8004088:	10624dd3 	.word	0x10624dd3
 800408c:	51eb851f 	.word	0x51eb851f
 8004090:	66666667 	.word	0x66666667
 8004094:	20000020 	.word	0x20000020
 8004098:	200000d8 	.word	0x200000d8

0800409c <bluetooth_transmit_pressure>:

void bluetooth_transmit_pressure(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
	uint8_t press[10]={
 80040a2:	4a3d      	ldr	r2, [pc, #244]	; (8004198 <bluetooth_transmit_pressure+0xfc>)
 80040a4:	463b      	mov	r3, r7
 80040a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80040a8:	c303      	stmia	r3!, {r0, r1}
 80040aa:	801a      	strh	r2, [r3, #0]
			0,0,0,0,'.',0,0,'h','P','a',
	};

	uint32_t press_data=bmp280_compensate_P_int32(BMP280_press_read());
 80040ac:	f000 fa64 	bl	8004578 <BMP280_press_read>
 80040b0:	4603      	mov	r3, r0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fbd8 	bl	8004868 <bmp280_compensate_P_int32>
 80040b8:	60f8      	str	r0, [r7, #12]

	press[0]=(press_data / 100000)+48;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	095b      	lsrs	r3, r3, #5
 80040be:	4a37      	ldr	r2, [pc, #220]	; (800419c <bluetooth_transmit_pressure+0x100>)
 80040c0:	fba2 2303 	umull	r2, r3, r2, r3
 80040c4:	09db      	lsrs	r3, r3, #7
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3330      	adds	r3, #48	; 0x30
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	703b      	strb	r3, [r7, #0]
	press[1]=(press_data % 100000 / 10000)+48;
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	0953      	lsrs	r3, r2, #5
 80040d2:	4932      	ldr	r1, [pc, #200]	; (800419c <bluetooth_transmit_pressure+0x100>)
 80040d4:	fba1 1303 	umull	r1, r3, r1, r3
 80040d8:	09db      	lsrs	r3, r3, #7
 80040da:	4931      	ldr	r1, [pc, #196]	; (80041a0 <bluetooth_transmit_pressure+0x104>)
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	4a30      	ldr	r2, [pc, #192]	; (80041a4 <bluetooth_transmit_pressure+0x108>)
 80040e4:	fba2 2303 	umull	r2, r3, r2, r3
 80040e8:	0b5b      	lsrs	r3, r3, #13
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3330      	adds	r3, #48	; 0x30
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	707b      	strb	r3, [r7, #1]
	press[2]=(press_data % 10000 /1000)+48;
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4b2b      	ldr	r3, [pc, #172]	; (80041a4 <bluetooth_transmit_pressure+0x108>)
 80040f6:	fba3 1302 	umull	r1, r3, r3, r2
 80040fa:	0b5b      	lsrs	r3, r3, #13
 80040fc:	f242 7110 	movw	r1, #10000	; 0x2710
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	4a28      	ldr	r2, [pc, #160]	; (80041a8 <bluetooth_transmit_pressure+0x10c>)
 8004108:	fba2 2303 	umull	r2, r3, r2, r3
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	b2db      	uxtb	r3, r3
 8004110:	3330      	adds	r3, #48	; 0x30
 8004112:	b2db      	uxtb	r3, r3
 8004114:	70bb      	strb	r3, [r7, #2]
	press[3]=(press_data % 1000 /100)+48;
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4b23      	ldr	r3, [pc, #140]	; (80041a8 <bluetooth_transmit_pressure+0x10c>)
 800411a:	fba3 1302 	umull	r1, r3, r3, r2
 800411e:	099b      	lsrs	r3, r3, #6
 8004120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004124:	fb01 f303 	mul.w	r3, r1, r3
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	4a20      	ldr	r2, [pc, #128]	; (80041ac <bluetooth_transmit_pressure+0x110>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	095b      	lsrs	r3, r3, #5
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3330      	adds	r3, #48	; 0x30
 8004136:	b2db      	uxtb	r3, r3
 8004138:	70fb      	strb	r3, [r7, #3]
	press[5]=(press_data % 100 / 10)+48;
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <bluetooth_transmit_pressure+0x110>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	4a18      	ldr	r2, [pc, #96]	; (80041b0 <bluetooth_transmit_pressure+0x114>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	08db      	lsrs	r3, r3, #3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	3330      	adds	r3, #48	; 0x30
 8004158:	b2db      	uxtb	r3, r3
 800415a:	717b      	strb	r3, [r7, #5]
	press[6]=(press_data % 10)+48;
 800415c:	68f9      	ldr	r1, [r7, #12]
 800415e:	4b14      	ldr	r3, [pc, #80]	; (80041b0 <bluetooth_transmit_pressure+0x114>)
 8004160:	fba3 2301 	umull	r2, r3, r3, r1
 8004164:	08da      	lsrs	r2, r3, #3
 8004166:	4613      	mov	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4413      	add	r3, r2
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	1aca      	subs	r2, r1, r3
 8004170:	b2d3      	uxtb	r3, r2
 8004172:	3330      	adds	r3, #48	; 0x30
 8004174:	b2db      	uxtb	r3, r3
 8004176:	71bb      	strb	r3, [r7, #6]

	HAL_UART_Transmit(&huart1, string_pressure, sizeof(string_pressure), 0xFF);
 8004178:	23ff      	movs	r3, #255	; 0xff
 800417a:	220a      	movs	r2, #10
 800417c:	490d      	ldr	r1, [pc, #52]	; (80041b4 <bluetooth_transmit_pressure+0x118>)
 800417e:	480e      	ldr	r0, [pc, #56]	; (80041b8 <bluetooth_transmit_pressure+0x11c>)
 8004180:	f7ff fb3d 	bl	80037fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, press, sizeof(press), 0xFF);
 8004184:	4639      	mov	r1, r7
 8004186:	23ff      	movs	r3, #255	; 0xff
 8004188:	220a      	movs	r2, #10
 800418a:	480b      	ldr	r0, [pc, #44]	; (80041b8 <bluetooth_transmit_pressure+0x11c>)
 800418c:	f7ff fb37 	bl	80037fe <HAL_UART_Transmit>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	08005114 	.word	0x08005114
 800419c:	0a7c5ac5 	.word	0x0a7c5ac5
 80041a0:	000186a0 	.word	0x000186a0
 80041a4:	d1b71759 	.word	0xd1b71759
 80041a8:	10624dd3 	.word	0x10624dd3
 80041ac:	51eb851f 	.word	0x51eb851f
 80041b0:	cccccccd 	.word	0xcccccccd
 80041b4:	2000003c 	.word	0x2000003c
 80041b8:	200000d8 	.word	0x200000d8

080041bc <bluetooth_transmit_luminance>:

void bluetooth_transmit_luminance(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
	uint8_t temp[7]={
 80041c2:	4a39      	ldr	r2, [pc, #228]	; (80042a8 <bluetooth_transmit_luminance+0xec>)
 80041c4:	463b      	mov	r3, r7
 80041c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80041ca:	6018      	str	r0, [r3, #0]
 80041cc:	3304      	adds	r3, #4
 80041ce:	8019      	strh	r1, [r3, #0]
 80041d0:	3302      	adds	r3, #2
 80041d2:	0c0a      	lsrs	r2, r1, #16
 80041d4:	701a      	strb	r2, [r3, #0]
			0,0,0,0,0,'L','x',
	};

	temp[0]=(gy30_data / 10000)+48;
 80041d6:	4b35      	ldr	r3, [pc, #212]	; (80042ac <bluetooth_transmit_luminance+0xf0>)
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	4a35      	ldr	r2, [pc, #212]	; (80042b0 <bluetooth_transmit_luminance+0xf4>)
 80041dc:	fba2 2303 	umull	r2, r3, r2, r3
 80041e0:	0b5b      	lsrs	r3, r3, #13
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	3330      	adds	r3, #48	; 0x30
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	703b      	strb	r3, [r7, #0]
	temp[1]=(gy30_data % 10000 / 1000)+48;
 80041ec:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <bluetooth_transmit_luminance+0xf0>)
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	4a2f      	ldr	r2, [pc, #188]	; (80042b0 <bluetooth_transmit_luminance+0xf4>)
 80041f2:	fba2 1203 	umull	r1, r2, r2, r3
 80041f6:	0b52      	lsrs	r2, r2, #13
 80041f8:	f242 7110 	movw	r1, #10000	; 0x2710
 80041fc:	fb01 f202 	mul.w	r2, r1, r2
 8004200:	1a9b      	subs	r3, r3, r2
 8004202:	b29b      	uxth	r3, r3
 8004204:	4a2b      	ldr	r2, [pc, #172]	; (80042b4 <bluetooth_transmit_luminance+0xf8>)
 8004206:	fba2 2303 	umull	r2, r3, r2, r3
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	b29b      	uxth	r3, r3
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3330      	adds	r3, #48	; 0x30
 8004212:	b2db      	uxtb	r3, r3
 8004214:	707b      	strb	r3, [r7, #1]
	temp[2]=(gy30_data % 1000 / 100)+48;
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <bluetooth_transmit_luminance+0xf0>)
 8004218:	881b      	ldrh	r3, [r3, #0]
 800421a:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <bluetooth_transmit_luminance+0xf8>)
 800421c:	fba2 1203 	umull	r1, r2, r2, r3
 8004220:	0992      	lsrs	r2, r2, #6
 8004222:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004226:	fb01 f202 	mul.w	r2, r1, r2
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	4a22      	ldr	r2, [pc, #136]	; (80042b8 <bluetooth_transmit_luminance+0xfc>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	b29b      	uxth	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	3330      	adds	r3, #48	; 0x30
 800423c:	b2db      	uxtb	r3, r3
 800423e:	70bb      	strb	r3, [r7, #2]
	temp[3]=(gy30_data % 100 / 10)+48;
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <bluetooth_transmit_luminance+0xf0>)
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <bluetooth_transmit_luminance+0xfc>)
 8004246:	fba2 1203 	umull	r1, r2, r2, r3
 800424a:	0952      	lsrs	r2, r2, #5
 800424c:	2164      	movs	r1, #100	; 0x64
 800424e:	fb01 f202 	mul.w	r2, r1, r2
 8004252:	1a9b      	subs	r3, r3, r2
 8004254:	b29b      	uxth	r3, r3
 8004256:	4a19      	ldr	r2, [pc, #100]	; (80042bc <bluetooth_transmit_luminance+0x100>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	08db      	lsrs	r3, r3, #3
 800425e:	b29b      	uxth	r3, r3
 8004260:	b2db      	uxtb	r3, r3
 8004262:	3330      	adds	r3, #48	; 0x30
 8004264:	b2db      	uxtb	r3, r3
 8004266:	70fb      	strb	r3, [r7, #3]
	temp[4]=(gy30_data % 10)+48;
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <bluetooth_transmit_luminance+0xf0>)
 800426a:	881a      	ldrh	r2, [r3, #0]
 800426c:	4b13      	ldr	r3, [pc, #76]	; (80042bc <bluetooth_transmit_luminance+0x100>)
 800426e:	fba3 1302 	umull	r1, r3, r3, r2
 8004272:	08d9      	lsrs	r1, r3, #3
 8004274:	460b      	mov	r3, r1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	b29b      	uxth	r3, r3
 8004280:	b2db      	uxtb	r3, r3
 8004282:	3330      	adds	r3, #48	; 0x30
 8004284:	b2db      	uxtb	r3, r3
 8004286:	713b      	strb	r3, [r7, #4]

	HAL_UART_Transmit(&huart1, string_luminance, sizeof(string_luminance), 0xFF);
 8004288:	23ff      	movs	r3, #255	; 0xff
 800428a:	220b      	movs	r2, #11
 800428c:	490c      	ldr	r1, [pc, #48]	; (80042c0 <bluetooth_transmit_luminance+0x104>)
 800428e:	480d      	ldr	r0, [pc, #52]	; (80042c4 <bluetooth_transmit_luminance+0x108>)
 8004290:	f7ff fab5 	bl	80037fe <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, temp, sizeof(temp), 0xFF);
 8004294:	4639      	mov	r1, r7
 8004296:	23ff      	movs	r3, #255	; 0xff
 8004298:	2207      	movs	r2, #7
 800429a:	480a      	ldr	r0, [pc, #40]	; (80042c4 <bluetooth_transmit_luminance+0x108>)
 800429c:	f7ff faaf 	bl	80037fe <HAL_UART_Transmit>
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	08005120 	.word	0x08005120
 80042ac:	2000006e 	.word	0x2000006e
 80042b0:	d1b71759 	.word	0xd1b71759
 80042b4:	10624dd3 	.word	0x10624dd3
 80042b8:	51eb851f 	.word	0x51eb851f
 80042bc:	cccccccd 	.word	0xcccccccd
 80042c0:	20000030 	.word	0x20000030
 80042c4:	200000d8 	.word	0x200000d8

080042c8 <bluetooth_transmit>:

void bluetooth_transmit(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
	bluetooth_transmit_temp();
 80042cc:	f7ff fe70 	bl	8003fb0 <bluetooth_transmit_temp>
	HAL_UART_Transmit(&huart1, &space, sizeof(space), 0xFF);
 80042d0:	23ff      	movs	r3, #255	; 0xff
 80042d2:	2201      	movs	r2, #1
 80042d4:	4911      	ldr	r1, [pc, #68]	; (800431c <bluetooth_transmit+0x54>)
 80042d6:	4812      	ldr	r0, [pc, #72]	; (8004320 <bluetooth_transmit+0x58>)
 80042d8:	f7ff fa91 	bl	80037fe <HAL_UART_Transmit>

	bluetooth_transmit_humi();
 80042dc:	f7ff fe2e 	bl	8003f3c <bluetooth_transmit_humi>
	HAL_UART_Transmit(&huart1, &space, sizeof(space), 0xFF);
 80042e0:	23ff      	movs	r3, #255	; 0xff
 80042e2:	2201      	movs	r2, #1
 80042e4:	490d      	ldr	r1, [pc, #52]	; (800431c <bluetooth_transmit+0x54>)
 80042e6:	480e      	ldr	r0, [pc, #56]	; (8004320 <bluetooth_transmit+0x58>)
 80042e8:	f7ff fa89 	bl	80037fe <HAL_UART_Transmit>

	bluetooth_transmit_pressure();
 80042ec:	f7ff fed6 	bl	800409c <bluetooth_transmit_pressure>
	HAL_UART_Transmit(&huart1, &space, sizeof(space), 0xFF);
 80042f0:	23ff      	movs	r3, #255	; 0xff
 80042f2:	2201      	movs	r2, #1
 80042f4:	4909      	ldr	r1, [pc, #36]	; (800431c <bluetooth_transmit+0x54>)
 80042f6:	480a      	ldr	r0, [pc, #40]	; (8004320 <bluetooth_transmit+0x58>)
 80042f8:	f7ff fa81 	bl	80037fe <HAL_UART_Transmit>

	bluetooth_transmit_luminance();
 80042fc:	f7ff ff5e 	bl	80041bc <bluetooth_transmit_luminance>
	HAL_UART_Transmit(&huart1, &space, sizeof(space), 0xFF);
 8004300:	23ff      	movs	r3, #255	; 0xff
 8004302:	2201      	movs	r2, #1
 8004304:	4905      	ldr	r1, [pc, #20]	; (800431c <bluetooth_transmit+0x54>)
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <bluetooth_transmit+0x58>)
 8004308:	f7ff fa79 	bl	80037fe <HAL_UART_Transmit>

	HAL_UART_Transmit(&huart1, &line_feed, sizeof(line_feed), 0xFF);
 800430c:	23ff      	movs	r3, #255	; 0xff
 800430e:	2201      	movs	r2, #1
 8004310:	4904      	ldr	r1, [pc, #16]	; (8004324 <bluetooth_transmit+0x5c>)
 8004312:	4803      	ldr	r0, [pc, #12]	; (8004320 <bluetooth_transmit+0x58>)
 8004314:	f7ff fa73 	bl	80037fe <HAL_UART_Transmit>
}
 8004318:	bf00      	nop
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000047 	.word	0x20000047
 8004320:	200000d8 	.word	0x200000d8
 8004324:	20000046 	.word	0x20000046

08004328 <BMP280_init>:

//#include "bmp280.h"
extern I2C_HandleTypeDef hi2c2;

void BMP280_init(BMP280_SETTINGS handle)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af04      	add	r7, sp, #16
 800432e:	463b      	mov	r3, r7
 8004330:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t config=((uint8_t)(handle.standy_time)<<5) | ((uint8_t)(handle.filter_coefficient)<<2) | ((uint8_t)(handle.spi3w));
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	015b      	lsls	r3, r3, #5
 8004338:	b25a      	sxtb	r2, r3
 800433a:	793b      	ldrb	r3, [r7, #4]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	b25b      	sxtb	r3, r3
 8004340:	4313      	orrs	r3, r2
 8004342:	b25a      	sxtb	r2, r3
 8004344:	797b      	ldrb	r3, [r7, #5]
 8004346:	b25b      	sxtb	r3, r3
 8004348:	4313      	orrs	r3, r2
 800434a:	b25b      	sxtb	r3, r3
 800434c:	b2db      	uxtb	r3, r3
 800434e:	73fb      	strb	r3, [r7, #15]
	uint8_t ctrl_meas=((uint8_t)(handle.oversampling_temp)<<5) | ((uint8_t)(handle.oversampling_press)<<2) | ((uint8_t)(handle.powermode));
 8004350:	787b      	ldrb	r3, [r7, #1]
 8004352:	015b      	lsls	r3, r3, #5
 8004354:	b25a      	sxtb	r2, r3
 8004356:	78bb      	ldrb	r3, [r7, #2]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	b25b      	sxtb	r3, r3
 800435c:	4313      	orrs	r3, r2
 800435e:	b25a      	sxtb	r2, r3
 8004360:	783b      	ldrb	r3, [r7, #0]
 8004362:	b25b      	sxtb	r3, r3
 8004364:	4313      	orrs	r3, r2
 8004366:	b25b      	sxtb	r3, r3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, &config, sizeof(config), 0xFF);
 800436c:	23ff      	movs	r3, #255	; 0xff
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	2301      	movs	r3, #1
 8004372:	9301      	str	r3, [sp, #4]
 8004374:	f107 030f 	add.w	r3, r7, #15
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2301      	movs	r3, #1
 800437c:	22f5      	movs	r2, #245	; 0xf5
 800437e:	21ec      	movs	r1, #236	; 0xec
 8004380:	4809      	ldr	r0, [pc, #36]	; (80043a8 <BMP280_init+0x80>)
 8004382:	f7fd fa29 	bl	80017d8 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, sizeof(ctrl_meas), 0xFF);
 8004386:	23ff      	movs	r3, #255	; 0xff
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	2301      	movs	r3, #1
 800438c:	9301      	str	r3, [sp, #4]
 800438e:	f107 030e 	add.w	r3, r7, #14
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2301      	movs	r3, #1
 8004396:	22f4      	movs	r2, #244	; 0xf4
 8004398:	21ec      	movs	r1, #236	; 0xec
 800439a:	4803      	ldr	r0, [pc, #12]	; (80043a8 <BMP280_init+0x80>)
 800439c:	f7fd fa1c 	bl	80017d8 <HAL_I2C_Mem_Write>
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000074 	.word	0x20000074

080043ac <BMP280_temp_read>:

uint32_t BMP280_temp_read(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08a      	sub	sp, #40	; 0x28
 80043b0:	af04      	add	r7, sp, #16
	uint32_t temp=0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
	uint8_t temp_reg[3]={
 80043b6:	2300      	movs	r3, #0
 80043b8:	713b      	strb	r3, [r7, #4]
 80043ba:	2300      	movs	r3, #0
 80043bc:	717b      	strb	r3, [r7, #5]
 80043be:	2300      	movs	r3, #0
 80043c0:	71bb      	strb	r3, [r7, #6]
			0,0,0
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, temp_reg, sizeof(temp_reg), 0xFF);
 80043c2:	23ff      	movs	r3, #255	; 0xff
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	2303      	movs	r3, #3
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	1d3b      	adds	r3, r7, #4
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	2301      	movs	r3, #1
 80043d0:	22fa      	movs	r2, #250	; 0xfa
 80043d2:	21ed      	movs	r1, #237	; 0xed
 80043d4:	480b      	ldr	r0, [pc, #44]	; (8004404 <BMP280_temp_read+0x58>)
 80043d6:	f7fd faf9 	bl	80019cc <HAL_I2C_Mem_Read>

	uint32_t temp_msb=temp_reg[0];
 80043da:	793b      	ldrb	r3, [r7, #4]
 80043dc:	613b      	str	r3, [r7, #16]
	uint32_t temp_lsb=temp_reg[1];
 80043de:	797b      	ldrb	r3, [r7, #5]
 80043e0:	60fb      	str	r3, [r7, #12]
	uint32_t temp_xlsb=temp_reg[2];
 80043e2:	79bb      	ldrb	r3, [r7, #6]
 80043e4:	60bb      	str	r3, [r7, #8]

	temp=(temp_xlsb>>4) | (temp_lsb<<4) | (temp_msb<<12);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	091a      	lsrs	r2, r3, #4
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	431a      	orrs	r2, r3
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	031b      	lsls	r3, r3, #12
 80043f4:	4313      	orrs	r3, r2
 80043f6:	617b      	str	r3, [r7, #20]

	return temp;
 80043f8:	697b      	ldr	r3, [r7, #20]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	20000074 	.word	0x20000074

08004408 <getDig_T>:

void getDig_T(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af04      	add	r7, sp, #16
	uint8_t temp_lsb=0;
 800440e:	2300      	movs	r3, #0
 8004410:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_msb=0;
 8004412:	2300      	movs	r3, #0
 8004414:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 8004416:	23ff      	movs	r3, #255	; 0xff
 8004418:	9302      	str	r3, [sp, #8]
 800441a:	2301      	movs	r3, #1
 800441c:	9301      	str	r3, [sp, #4]
 800441e:	1dfb      	adds	r3, r7, #7
 8004420:	9300      	str	r3, [sp, #0]
 8004422:	2301      	movs	r3, #1
 8004424:	2288      	movs	r2, #136	; 0x88
 8004426:	21ed      	movs	r1, #237	; 0xed
 8004428:	482f      	ldr	r0, [pc, #188]	; (80044e8 <getDig_T+0xe0>)
 800442a:	f7fd facf 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 800442e:	23ff      	movs	r3, #255	; 0xff
 8004430:	9302      	str	r3, [sp, #8]
 8004432:	2301      	movs	r3, #1
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	1dbb      	adds	r3, r7, #6
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	2301      	movs	r3, #1
 800443c:	2289      	movs	r2, #137	; 0x89
 800443e:	21ed      	movs	r1, #237	; 0xed
 8004440:	4829      	ldr	r0, [pc, #164]	; (80044e8 <getDig_T+0xe0>)
 8004442:	f7fd fac3 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_T1= temp_lsb | (((uint16_t)temp_msb)<<8);
 8004446:	79fb      	ldrb	r3, [r7, #7]
 8004448:	b21a      	sxth	r2, r3
 800444a:	79bb      	ldrb	r3, [r7, #6]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	b21b      	sxth	r3, r3
 8004450:	4313      	orrs	r3, r2
 8004452:	b21b      	sxth	r3, r3
 8004454:	b29a      	uxth	r2, r3
 8004456:	4b25      	ldr	r3, [pc, #148]	; (80044ec <getDig_T+0xe4>)
 8004458:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 800445a:	23ff      	movs	r3, #255	; 0xff
 800445c:	9302      	str	r3, [sp, #8]
 800445e:	2301      	movs	r3, #1
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	1dfb      	adds	r3, r7, #7
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2301      	movs	r3, #1
 8004468:	228a      	movs	r2, #138	; 0x8a
 800446a:	21ed      	movs	r1, #237	; 0xed
 800446c:	481e      	ldr	r0, [pc, #120]	; (80044e8 <getDig_T+0xe0>)
 800446e:	f7fd faad 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 8004472:	23ff      	movs	r3, #255	; 0xff
 8004474:	9302      	str	r3, [sp, #8]
 8004476:	2301      	movs	r3, #1
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	1dbb      	adds	r3, r7, #6
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2301      	movs	r3, #1
 8004480:	228b      	movs	r2, #139	; 0x8b
 8004482:	21ed      	movs	r1, #237	; 0xed
 8004484:	4818      	ldr	r0, [pc, #96]	; (80044e8 <getDig_T+0xe0>)
 8004486:	f7fd faa1 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_T2= temp_lsb | (((uint16_t)temp_msb)<<8);
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	b21a      	sxth	r2, r3
 800448e:	79bb      	ldrb	r3, [r7, #6]
 8004490:	021b      	lsls	r3, r3, #8
 8004492:	b21b      	sxth	r3, r3
 8004494:	4313      	orrs	r3, r2
 8004496:	b21a      	sxth	r2, r3
 8004498:	4b15      	ldr	r3, [pc, #84]	; (80044f0 <getDig_T+0xe8>)
 800449a:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 800449c:	23ff      	movs	r3, #255	; 0xff
 800449e:	9302      	str	r3, [sp, #8]
 80044a0:	2301      	movs	r3, #1
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	1dfb      	adds	r3, r7, #7
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2301      	movs	r3, #1
 80044aa:	228c      	movs	r2, #140	; 0x8c
 80044ac:	21ed      	movs	r1, #237	; 0xed
 80044ae:	480e      	ldr	r0, [pc, #56]	; (80044e8 <getDig_T+0xe0>)
 80044b0:	f7fd fa8c 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 80044b4:	23ff      	movs	r3, #255	; 0xff
 80044b6:	9302      	str	r3, [sp, #8]
 80044b8:	2301      	movs	r3, #1
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	1dbb      	adds	r3, r7, #6
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2301      	movs	r3, #1
 80044c2:	228d      	movs	r2, #141	; 0x8d
 80044c4:	21ed      	movs	r1, #237	; 0xed
 80044c6:	4808      	ldr	r0, [pc, #32]	; (80044e8 <getDig_T+0xe0>)
 80044c8:	f7fd fa80 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_T3= temp_lsb | (((uint16_t)temp_msb)<<8);
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	b21a      	sxth	r2, r3
 80044d0:	79bb      	ldrb	r3, [r7, #6]
 80044d2:	021b      	lsls	r3, r3, #8
 80044d4:	b21b      	sxth	r3, r3
 80044d6:	4313      	orrs	r3, r2
 80044d8:	b21a      	sxth	r2, r3
 80044da:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <getDig_T+0xec>)
 80044dc:	801a      	strh	r2, [r3, #0]

}
 80044de:	bf00      	nop
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000074 	.word	0x20000074
 80044ec:	20000072 	.word	0x20000072
 80044f0:	200000c8 	.word	0x200000c8
 80044f4:	2000016a 	.word	0x2000016a

080044f8 <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b087      	sub	sp, #28
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
	int32_t var1,var2,T;

	var1=((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	10da      	asrs	r2, r3, #3
 8004504:	4b18      	ldr	r3, [pc, #96]	; (8004568 <bmp280_compensate_T_int32+0x70>)
 8004506:	881b      	ldrh	r3, [r3, #0]
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	4a17      	ldr	r2, [pc, #92]	; (800456c <bmp280_compensate_T_int32+0x74>)
 800450e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	12db      	asrs	r3, r3, #11
 8004518:	617b      	str	r3, [r7, #20]
	var2=(((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	111b      	asrs	r3, r3, #4
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <bmp280_compensate_T_int32+0x70>)
 8004520:	8812      	ldrh	r2, [r2, #0]
 8004522:	1a9b      	subs	r3, r3, r2
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	1112      	asrs	r2, r2, #4
 8004528:	490f      	ldr	r1, [pc, #60]	; (8004568 <bmp280_compensate_T_int32+0x70>)
 800452a:	8809      	ldrh	r1, [r1, #0]
 800452c:	1a52      	subs	r2, r2, r1
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	131b      	asrs	r3, r3, #12
 8004534:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <bmp280_compensate_T_int32+0x78>)
 8004536:	f9b2 2000 	ldrsh.w	r2, [r2]
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	139b      	asrs	r3, r3, #14
 8004540:	613b      	str	r3, [r7, #16]
	t_fine=var1+var2;
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <bmp280_compensate_T_int32+0x7c>)
 800454a:	6013      	str	r3, [r2, #0]
	T=(t_fine*5+128)>>8;
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <bmp280_compensate_T_int32+0x7c>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	3380      	adds	r3, #128	; 0x80
 8004558:	121b      	asrs	r3, r3, #8
 800455a:	60fb      	str	r3, [r7, #12]

	return T;
 800455c:	68fb      	ldr	r3, [r7, #12]
}
 800455e:	4618      	mov	r0, r3
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	20000072 	.word	0x20000072
 800456c:	200000c8 	.word	0x200000c8
 8004570:	2000016a 	.word	0x2000016a
 8004574:	20000174 	.word	0x20000174

08004578 <BMP280_press_read>:

uint32_t BMP280_press_read(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af04      	add	r7, sp, #16
	uint32_t press=0;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
	uint8_t press_reg[3]={
 8004582:	2300      	movs	r3, #0
 8004584:	713b      	strb	r3, [r7, #4]
 8004586:	2300      	movs	r3, #0
 8004588:	717b      	strb	r3, [r7, #5]
 800458a:	2300      	movs	r3, #0
 800458c:	71bb      	strb	r3, [r7, #6]
			0,0,0,
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, press_reg, sizeof(press_reg), 0xFF);
 800458e:	23ff      	movs	r3, #255	; 0xff
 8004590:	9302      	str	r3, [sp, #8]
 8004592:	2303      	movs	r3, #3
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	1d3b      	adds	r3, r7, #4
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	2301      	movs	r3, #1
 800459c:	22f7      	movs	r2, #247	; 0xf7
 800459e:	21ed      	movs	r1, #237	; 0xed
 80045a0:	480b      	ldr	r0, [pc, #44]	; (80045d0 <BMP280_press_read+0x58>)
 80045a2:	f7fd fa13 	bl	80019cc <HAL_I2C_Mem_Read>

	uint32_t press_msb=press_reg[0];
 80045a6:	793b      	ldrb	r3, [r7, #4]
 80045a8:	613b      	str	r3, [r7, #16]
	uint32_t press_lsb=press_reg[1];
 80045aa:	797b      	ldrb	r3, [r7, #5]
 80045ac:	60fb      	str	r3, [r7, #12]
	uint32_t press_xlsb=press_reg[2];
 80045ae:	79bb      	ldrb	r3, [r7, #6]
 80045b0:	60bb      	str	r3, [r7, #8]

	press= (press_xlsb>>4) | (press_lsb<<4) | (press_msb<<12);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	091a      	lsrs	r2, r3, #4
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	431a      	orrs	r2, r3
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	031b      	lsls	r3, r3, #12
 80045c0:	4313      	orrs	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]

	return press;
 80045c4:	697b      	ldr	r3, [r7, #20]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000074 	.word	0x20000074

080045d4 <getDig_P>:

void getDig_P(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af04      	add	r7, sp, #16
	uint8_t press_lsb=0;
 80045da:	2300      	movs	r3, #0
 80045dc:	71fb      	strb	r3, [r7, #7]
	uint8_t press_msb=0;
 80045de:	2300      	movs	r3, #0
 80045e0:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80045e2:	23ff      	movs	r3, #255	; 0xff
 80045e4:	9302      	str	r3, [sp, #8]
 80045e6:	2301      	movs	r3, #1
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	1dfb      	adds	r3, r7, #7
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2301      	movs	r3, #1
 80045f0:	228e      	movs	r2, #142	; 0x8e
 80045f2:	21ed      	movs	r1, #237	; 0xed
 80045f4:	4892      	ldr	r0, [pc, #584]	; (8004840 <getDig_P+0x26c>)
 80045f6:	f7fd f9e9 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80045fa:	23ff      	movs	r3, #255	; 0xff
 80045fc:	9302      	str	r3, [sp, #8]
 80045fe:	2301      	movs	r3, #1
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	1dbb      	adds	r3, r7, #6
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	2301      	movs	r3, #1
 8004608:	228f      	movs	r2, #143	; 0x8f
 800460a:	21ed      	movs	r1, #237	; 0xed
 800460c:	488c      	ldr	r0, [pc, #560]	; (8004840 <getDig_P+0x26c>)
 800460e:	f7fd f9dd 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P1= press_lsb | (((uint16_t)press_msb)<<8);
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	b21a      	sxth	r2, r3
 8004616:	79bb      	ldrb	r3, [r7, #6]
 8004618:	021b      	lsls	r3, r3, #8
 800461a:	b21b      	sxth	r3, r3
 800461c:	4313      	orrs	r3, r2
 800461e:	b21b      	sxth	r3, r3
 8004620:	b29a      	uxth	r2, r3
 8004622:	4b88      	ldr	r3, [pc, #544]	; (8004844 <getDig_P+0x270>)
 8004624:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8004626:	23ff      	movs	r3, #255	; 0xff
 8004628:	9302      	str	r3, [sp, #8]
 800462a:	2301      	movs	r3, #1
 800462c:	9301      	str	r3, [sp, #4]
 800462e:	1dfb      	adds	r3, r7, #7
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	2301      	movs	r3, #1
 8004634:	2290      	movs	r2, #144	; 0x90
 8004636:	21ed      	movs	r1, #237	; 0xed
 8004638:	4881      	ldr	r0, [pc, #516]	; (8004840 <getDig_P+0x26c>)
 800463a:	f7fd f9c7 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800463e:	23ff      	movs	r3, #255	; 0xff
 8004640:	9302      	str	r3, [sp, #8]
 8004642:	2301      	movs	r3, #1
 8004644:	9301      	str	r3, [sp, #4]
 8004646:	1dbb      	adds	r3, r7, #6
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	2301      	movs	r3, #1
 800464c:	2291      	movs	r2, #145	; 0x91
 800464e:	21ed      	movs	r1, #237	; 0xed
 8004650:	487b      	ldr	r0, [pc, #492]	; (8004840 <getDig_P+0x26c>)
 8004652:	f7fd f9bb 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P2= press_lsb | (((uint16_t)press_msb)<<8);
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	b21a      	sxth	r2, r3
 800465a:	79bb      	ldrb	r3, [r7, #6]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	b21b      	sxth	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b21a      	sxth	r2, r3
 8004664:	4b78      	ldr	r3, [pc, #480]	; (8004848 <getDig_P+0x274>)
 8004666:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8004668:	23ff      	movs	r3, #255	; 0xff
 800466a:	9302      	str	r3, [sp, #8]
 800466c:	2301      	movs	r3, #1
 800466e:	9301      	str	r3, [sp, #4]
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	2301      	movs	r3, #1
 8004676:	2292      	movs	r2, #146	; 0x92
 8004678:	21ed      	movs	r1, #237	; 0xed
 800467a:	4871      	ldr	r0, [pc, #452]	; (8004840 <getDig_P+0x26c>)
 800467c:	f7fd f9a6 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8004680:	23ff      	movs	r3, #255	; 0xff
 8004682:	9302      	str	r3, [sp, #8]
 8004684:	2301      	movs	r3, #1
 8004686:	9301      	str	r3, [sp, #4]
 8004688:	1dbb      	adds	r3, r7, #6
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	2301      	movs	r3, #1
 800468e:	2293      	movs	r2, #147	; 0x93
 8004690:	21ed      	movs	r1, #237	; 0xed
 8004692:	486b      	ldr	r0, [pc, #428]	; (8004840 <getDig_P+0x26c>)
 8004694:	f7fd f99a 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P3= press_lsb | (((uint16_t)press_msb)<<8);
 8004698:	79fb      	ldrb	r3, [r7, #7]
 800469a:	b21a      	sxth	r2, r3
 800469c:	79bb      	ldrb	r3, [r7, #6]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	b21b      	sxth	r3, r3
 80046a2:	4313      	orrs	r3, r2
 80046a4:	b21a      	sxth	r2, r3
 80046a6:	4b69      	ldr	r3, [pc, #420]	; (800484c <getDig_P+0x278>)
 80046a8:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80046aa:	23ff      	movs	r3, #255	; 0xff
 80046ac:	9302      	str	r3, [sp, #8]
 80046ae:	2301      	movs	r3, #1
 80046b0:	9301      	str	r3, [sp, #4]
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	2301      	movs	r3, #1
 80046b8:	2294      	movs	r2, #148	; 0x94
 80046ba:	21ed      	movs	r1, #237	; 0xed
 80046bc:	4860      	ldr	r0, [pc, #384]	; (8004840 <getDig_P+0x26c>)
 80046be:	f7fd f985 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80046c2:	23ff      	movs	r3, #255	; 0xff
 80046c4:	9302      	str	r3, [sp, #8]
 80046c6:	2301      	movs	r3, #1
 80046c8:	9301      	str	r3, [sp, #4]
 80046ca:	1dbb      	adds	r3, r7, #6
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	2301      	movs	r3, #1
 80046d0:	2295      	movs	r2, #149	; 0x95
 80046d2:	21ed      	movs	r1, #237	; 0xed
 80046d4:	485a      	ldr	r0, [pc, #360]	; (8004840 <getDig_P+0x26c>)
 80046d6:	f7fd f979 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P4= press_lsb | (((uint16_t)press_msb)<<8);
 80046da:	79fb      	ldrb	r3, [r7, #7]
 80046dc:	b21a      	sxth	r2, r3
 80046de:	79bb      	ldrb	r3, [r7, #6]
 80046e0:	021b      	lsls	r3, r3, #8
 80046e2:	b21b      	sxth	r3, r3
 80046e4:	4313      	orrs	r3, r2
 80046e6:	b21a      	sxth	r2, r3
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <getDig_P+0x27c>)
 80046ea:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80046ec:	23ff      	movs	r3, #255	; 0xff
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	2301      	movs	r3, #1
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	1dfb      	adds	r3, r7, #7
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	2301      	movs	r3, #1
 80046fa:	2296      	movs	r2, #150	; 0x96
 80046fc:	21ed      	movs	r1, #237	; 0xed
 80046fe:	4850      	ldr	r0, [pc, #320]	; (8004840 <getDig_P+0x26c>)
 8004700:	f7fd f964 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8004704:	23ff      	movs	r3, #255	; 0xff
 8004706:	9302      	str	r3, [sp, #8]
 8004708:	2301      	movs	r3, #1
 800470a:	9301      	str	r3, [sp, #4]
 800470c:	1dbb      	adds	r3, r7, #6
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2301      	movs	r3, #1
 8004712:	2297      	movs	r2, #151	; 0x97
 8004714:	21ed      	movs	r1, #237	; 0xed
 8004716:	484a      	ldr	r0, [pc, #296]	; (8004840 <getDig_P+0x26c>)
 8004718:	f7fd f958 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P5= press_lsb | (((uint16_t)press_msb)<<8);
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	b21a      	sxth	r2, r3
 8004720:	79bb      	ldrb	r3, [r7, #6]
 8004722:	021b      	lsls	r3, r3, #8
 8004724:	b21b      	sxth	r3, r3
 8004726:	4313      	orrs	r3, r2
 8004728:	b21a      	sxth	r2, r3
 800472a:	4b4a      	ldr	r3, [pc, #296]	; (8004854 <getDig_P+0x280>)
 800472c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 800472e:	23ff      	movs	r3, #255	; 0xff
 8004730:	9302      	str	r3, [sp, #8]
 8004732:	2301      	movs	r3, #1
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	1dfb      	adds	r3, r7, #7
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2301      	movs	r3, #1
 800473c:	2298      	movs	r2, #152	; 0x98
 800473e:	21ed      	movs	r1, #237	; 0xed
 8004740:	483f      	ldr	r0, [pc, #252]	; (8004840 <getDig_P+0x26c>)
 8004742:	f7fd f943 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8004746:	23ff      	movs	r3, #255	; 0xff
 8004748:	9302      	str	r3, [sp, #8]
 800474a:	2301      	movs	r3, #1
 800474c:	9301      	str	r3, [sp, #4]
 800474e:	1dbb      	adds	r3, r7, #6
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	2301      	movs	r3, #1
 8004754:	2299      	movs	r2, #153	; 0x99
 8004756:	21ed      	movs	r1, #237	; 0xed
 8004758:	4839      	ldr	r0, [pc, #228]	; (8004840 <getDig_P+0x26c>)
 800475a:	f7fd f937 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P6= press_lsb | (((uint16_t)press_msb)<<8);
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	b21a      	sxth	r2, r3
 8004762:	79bb      	ldrb	r3, [r7, #6]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	b21b      	sxth	r3, r3
 8004768:	4313      	orrs	r3, r2
 800476a:	b21a      	sxth	r2, r3
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <getDig_P+0x284>)
 800476e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8004770:	23ff      	movs	r3, #255	; 0xff
 8004772:	9302      	str	r3, [sp, #8]
 8004774:	2301      	movs	r3, #1
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	1dfb      	adds	r3, r7, #7
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	229a      	movs	r2, #154	; 0x9a
 8004780:	21ed      	movs	r1, #237	; 0xed
 8004782:	482f      	ldr	r0, [pc, #188]	; (8004840 <getDig_P+0x26c>)
 8004784:	f7fd f922 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8004788:	23ff      	movs	r3, #255	; 0xff
 800478a:	9302      	str	r3, [sp, #8]
 800478c:	2301      	movs	r3, #1
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	1dbb      	adds	r3, r7, #6
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	2301      	movs	r3, #1
 8004796:	229b      	movs	r2, #155	; 0x9b
 8004798:	21ed      	movs	r1, #237	; 0xed
 800479a:	4829      	ldr	r0, [pc, #164]	; (8004840 <getDig_P+0x26c>)
 800479c:	f7fd f916 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P7= press_lsb | (((uint16_t)press_msb)<<8);
 80047a0:	79fb      	ldrb	r3, [r7, #7]
 80047a2:	b21a      	sxth	r2, r3
 80047a4:	79bb      	ldrb	r3, [r7, #6]
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	b21b      	sxth	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b21a      	sxth	r2, r3
 80047ae:	4b2b      	ldr	r3, [pc, #172]	; (800485c <getDig_P+0x288>)
 80047b0:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80047b2:	23ff      	movs	r3, #255	; 0xff
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	2301      	movs	r3, #1
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	1dfb      	adds	r3, r7, #7
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	2301      	movs	r3, #1
 80047c0:	229c      	movs	r2, #156	; 0x9c
 80047c2:	21ed      	movs	r1, #237	; 0xed
 80047c4:	481e      	ldr	r0, [pc, #120]	; (8004840 <getDig_P+0x26c>)
 80047c6:	f7fd f901 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80047ca:	23ff      	movs	r3, #255	; 0xff
 80047cc:	9302      	str	r3, [sp, #8]
 80047ce:	2301      	movs	r3, #1
 80047d0:	9301      	str	r3, [sp, #4]
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	2301      	movs	r3, #1
 80047d8:	229d      	movs	r2, #157	; 0x9d
 80047da:	21ed      	movs	r1, #237	; 0xed
 80047dc:	4818      	ldr	r0, [pc, #96]	; (8004840 <getDig_P+0x26c>)
 80047de:	f7fd f8f5 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P8= press_lsb | (((uint16_t)press_msb)<<8);
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	b21a      	sxth	r2, r3
 80047e6:	79bb      	ldrb	r3, [r7, #6]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	b21b      	sxth	r3, r3
 80047ec:	4313      	orrs	r3, r2
 80047ee:	b21a      	sxth	r2, r3
 80047f0:	4b1b      	ldr	r3, [pc, #108]	; (8004860 <getDig_P+0x28c>)
 80047f2:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80047f4:	23ff      	movs	r3, #255	; 0xff
 80047f6:	9302      	str	r3, [sp, #8]
 80047f8:	2301      	movs	r3, #1
 80047fa:	9301      	str	r3, [sp, #4]
 80047fc:	1dfb      	adds	r3, r7, #7
 80047fe:	9300      	str	r3, [sp, #0]
 8004800:	2301      	movs	r3, #1
 8004802:	229e      	movs	r2, #158	; 0x9e
 8004804:	21ed      	movs	r1, #237	; 0xed
 8004806:	480e      	ldr	r0, [pc, #56]	; (8004840 <getDig_P+0x26c>)
 8004808:	f7fd f8e0 	bl	80019cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800480c:	23ff      	movs	r3, #255	; 0xff
 800480e:	9302      	str	r3, [sp, #8]
 8004810:	2301      	movs	r3, #1
 8004812:	9301      	str	r3, [sp, #4]
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2301      	movs	r3, #1
 800481a:	229f      	movs	r2, #159	; 0x9f
 800481c:	21ed      	movs	r1, #237	; 0xed
 800481e:	4808      	ldr	r0, [pc, #32]	; (8004840 <getDig_P+0x26c>)
 8004820:	f7fd f8d4 	bl	80019cc <HAL_I2C_Mem_Read>
	dig_P9= press_lsb | (((uint16_t)press_msb)<<8);
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	b21a      	sxth	r2, r3
 8004828:	79bb      	ldrb	r3, [r7, #6]
 800482a:	021b      	lsls	r3, r3, #8
 800482c:	b21b      	sxth	r3, r3
 800482e:	4313      	orrs	r3, r2
 8004830:	b21a      	sxth	r2, r3
 8004832:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <getDig_P+0x290>)
 8004834:	801a      	strh	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	20000074 	.word	0x20000074
 8004844:	2000011a 	.word	0x2000011a
 8004848:	200000d0 	.word	0x200000d0
 800484c:	2000011c 	.word	0x2000011c
 8004850:	200000d2 	.word	0x200000d2
 8004854:	20000118 	.word	0x20000118
 8004858:	2000016c 	.word	0x2000016c
 800485c:	20000070 	.word	0x20000070
 8004860:	2000011e 	.word	0x2000011e
 8004864:	20000168 	.word	0x20000168

08004868 <bmp280_compensate_P_int32>:

	return (uint32_t)p;
}

uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 8004868:	b480      	push	{r7}
 800486a:	b087      	sub	sp, #28
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	int32_t var1,var2;
	uint32_t p;
	var1=(((int32_t)t_fine)>>1)-(int32_t)64000;
 8004870:	4b4a      	ldr	r3, [pc, #296]	; (800499c <bmp280_compensate_P_int32+0x134>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	105b      	asrs	r3, r3, #1
 8004876:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800487a:	613b      	str	r3, [r7, #16]
	var2=(((var1>>2)*(var1>>2))>>11)*((int32_t)dig_P6);
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	109b      	asrs	r3, r3, #2
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	1092      	asrs	r2, r2, #2
 8004884:	fb02 f303 	mul.w	r3, r2, r3
 8004888:	12db      	asrs	r3, r3, #11
 800488a:	4a45      	ldr	r2, [pc, #276]	; (80049a0 <bmp280_compensate_P_int32+0x138>)
 800488c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004890:	fb02 f303 	mul.w	r3, r2, r3
 8004894:	60fb      	str	r3, [r7, #12]
	var2=var2+((var1*((int32_t)dig_P5))<<1);
 8004896:	4b43      	ldr	r3, [pc, #268]	; (80049a4 <bmp280_compensate_P_int32+0x13c>)
 8004898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489c:	461a      	mov	r2, r3
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	fb03 f302 	mul.w	r3, r3, r2
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]
	var2=(var2>>2)+(((int32_t)dig_P4)<<16);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	109a      	asrs	r2, r3, #2
 80048b0:	4b3d      	ldr	r3, [pc, #244]	; (80049a8 <bmp280_compensate_P_int32+0x140>)
 80048b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048b6:	041b      	lsls	r3, r3, #16
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
	var1=(((dig_P3*(((var1>>2)*(var1>>2))>>13))>>3)+((((int32_t)dig_P2)*var1)>>1))>>18;
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <bmp280_compensate_P_int32+0x144>)
 80048be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048c2:	4619      	mov	r1, r3
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	109b      	asrs	r3, r3, #2
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	1092      	asrs	r2, r2, #2
 80048cc:	fb02 f303 	mul.w	r3, r2, r3
 80048d0:	135b      	asrs	r3, r3, #13
 80048d2:	fb03 f301 	mul.w	r3, r3, r1
 80048d6:	10da      	asrs	r2, r3, #3
 80048d8:	4b35      	ldr	r3, [pc, #212]	; (80049b0 <bmp280_compensate_P_int32+0x148>)
 80048da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048de:	4619      	mov	r1, r3
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	fb03 f301 	mul.w	r3, r3, r1
 80048e6:	105b      	asrs	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	149b      	asrs	r3, r3, #18
 80048ec:	613b      	str	r3, [r7, #16]
	var1=((((32768+var1))*((int32_t)dig_P1))>>15);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <bmp280_compensate_P_int32+0x14c>)
 80048f6:	8812      	ldrh	r2, [r2, #0]
 80048f8:	fb02 f303 	mul.w	r3, r2, r3
 80048fc:	13db      	asrs	r3, r3, #15
 80048fe:	613b      	str	r3, [r7, #16]
	if(var1==0)
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <bmp280_compensate_P_int32+0xa2>
	{
		return 0;
 8004906:	2300      	movs	r3, #0
 8004908:	e042      	b.n	8004990 <bmp280_compensate_P_int32+0x128>
	}
	p=(((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	425b      	negs	r3, r3
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	1312      	asrs	r2, r2, #12
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	f640 4235 	movw	r2, #3125	; 0xc35
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8004920:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8004924:	617b      	str	r3, [r7, #20]
	if(p<0x80000000)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b00      	cmp	r3, #0
 800492a:	db06      	blt.n	800493a <bmp280_compensate_P_int32+0xd2>
	{
		p=(p<<1)/((uint32_t)var1);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	005a      	lsls	r2, r3, #1
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	e005      	b.n	8004946 <bmp280_compensate_P_int32+0xde>
	}
	else
	{
		p=(p/(uint32_t)var1)*2;
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	617b      	str	r3, [r7, #20]
	}
	var1=(((int32_t)dig_P9)*((int32_t)(((p>>3)*(p>>3))>>13)))>>12;
 8004946:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <bmp280_compensate_P_int32+0x150>)
 8004948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800494c:	4619      	mov	r1, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	08db      	lsrs	r3, r3, #3
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	08d2      	lsrs	r2, r2, #3
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	0b5b      	lsrs	r3, r3, #13
 800495c:	fb03 f301 	mul.w	r3, r3, r1
 8004960:	131b      	asrs	r3, r3, #12
 8004962:	613b      	str	r3, [r7, #16]
	var2=(((int32_t)(p>>2))*((int32_t)dig_P8))>>13;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	461a      	mov	r2, r3
 800496a:	4b14      	ldr	r3, [pc, #80]	; (80049bc <bmp280_compensate_P_int32+0x154>)
 800496c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004970:	fb03 f302 	mul.w	r3, r3, r2
 8004974:	135b      	asrs	r3, r3, #13
 8004976:	60fb      	str	r3, [r7, #12]
	p=(uint32_t)((int32_t)p+((var1+var2+dig_P7)>>4));
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	4a10      	ldr	r2, [pc, #64]	; (80049c0 <bmp280_compensate_P_int32+0x158>)
 8004980:	f9b2 2000 	ldrsh.w	r2, [r2]
 8004984:	4413      	add	r3, r2
 8004986:	111a      	asrs	r2, r3, #4
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	617b      	str	r3, [r7, #20]

	return p;
 800498e:	697b      	ldr	r3, [r7, #20]
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	bc80      	pop	{r7}
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	20000174 	.word	0x20000174
 80049a0:	2000016c 	.word	0x2000016c
 80049a4:	20000118 	.word	0x20000118
 80049a8:	200000d2 	.word	0x200000d2
 80049ac:	2000011c 	.word	0x2000011c
 80049b0:	200000d0 	.word	0x200000d0
 80049b4:	2000011a 	.word	0x2000011a
 80049b8:	20000168 	.word	0x20000168
 80049bc:	2000011e 	.word	0x2000011e
 80049c0:	20000070 	.word	0x20000070

080049c4 <delay_us>:
		0,0,0,0,0,
};
uint8_t count=1;

void delay_us(uint32_t time)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 4000000 * time);
 80049cc:	f7fe fad6 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 80049d0:	4602      	mov	r2, r0
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <delay_us+0x34>)
 80049d4:	fba3 2302 	umull	r2, r3, r3, r2
 80049d8:	0d1a      	lsrs	r2, r3, #20
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	60fb      	str	r3, [r7, #12]
	while(delay--);
 80049e2:	bf00      	nop
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1e5a      	subs	r2, r3, #1
 80049e8:	60fa      	str	r2, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1fa      	bne.n	80049e4 <delay_us+0x20>
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	431bde83 	.word	0x431bde83

080049fc <DHT11_readByte>:

uint8_t DHT11_readByte(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
	uint8_t data_read=0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0;i<8;i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	717b      	strb	r3, [r7, #5]
 8004a0e:	e034      	b.n	8004a7a <DHT11_readByte+0x7e>
	{
		count=1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	71bb      	strb	r3, [r7, #6]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8004a14:	bf00      	nop
 8004a16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a1a:	481c      	ldr	r0, [pc, #112]	; (8004a8c <DHT11_readByte+0x90>)
 8004a1c:	f7fc fa1c 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <DHT11_readByte+0x34>
 8004a26:	79bb      	ldrb	r3, [r7, #6]
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	71ba      	strb	r2, [r7, #6]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f2      	bne.n	8004a16 <DHT11_readByte+0x1a>

		delay_us(28);
 8004a30:	201c      	movs	r0, #28
 8004a32:	f7ff ffc7 	bl	80049c4 <delay_us>

		data_read<<=1;
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	71fb      	strb	r3, [r7, #7]

		if(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 8004a3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a40:	4812      	ldr	r0, [pc, #72]	; (8004a8c <DHT11_readByte+0x90>)
 8004a42:	f7fc fa09 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <DHT11_readByte+0x58>
		{
			data_read |= 1;
 8004a4c:	79fb      	ldrb	r3, [r7, #7]
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	71fb      	strb	r3, [r7, #7]
		}

		count=1;
 8004a54:	2301      	movs	r3, #1
 8004a56:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8004a58:	bf00      	nop
 8004a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a5e:	480b      	ldr	r0, [pc, #44]	; (8004a8c <DHT11_readByte+0x90>)
 8004a60:	f7fc f9fa 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <DHT11_readByte+0x78>
 8004a6a:	79bb      	ldrb	r3, [r7, #6]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	71ba      	strb	r2, [r7, #6]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f2      	bne.n	8004a5a <DHT11_readByte+0x5e>
	for(uint8_t i=0;i<8;i++)
 8004a74:	797b      	ldrb	r3, [r7, #5]
 8004a76:	3301      	adds	r3, #1
 8004a78:	717b      	strb	r3, [r7, #5]
 8004a7a:	797b      	ldrb	r3, [r7, #5]
 8004a7c:	2b07      	cmp	r3, #7
 8004a7e:	d9c7      	bls.n	8004a10 <DHT11_readByte+0x14>
	}

	return data_read;
 8004a80:	79fb      	ldrb	r3, [r7, #7]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40010800 	.word	0x40010800

08004a90 <DHT11_read>:

void DHT11_read(void)
{
 8004a90:	b590      	push	{r4, r7, lr}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 8004a96:	2201      	movs	r2, #1
 8004a98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a9c:	4829      	ldr	r0, [pc, #164]	; (8004b44 <DHT11_read+0xb4>)
 8004a9e:	f7fc f9f2 	bl	8000e86 <HAL_GPIO_WritePin>
	delay_us(20);
 8004aa2:	2014      	movs	r0, #20
 8004aa4:	f7ff ff8e 	bl	80049c4 <delay_us>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_RESET);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004aae:	4825      	ldr	r0, [pc, #148]	; (8004b44 <DHT11_read+0xb4>)
 8004ab0:	f7fc f9e9 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8004ab4:	2014      	movs	r0, #20
 8004ab6:	f7fb fecf 	bl	8000858 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 8004aba:	2201      	movs	r2, #1
 8004abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ac0:	4820      	ldr	r0, [pc, #128]	; (8004b44 <DHT11_read+0xb4>)
 8004ac2:	f7fc f9e0 	bl	8000e86 <HAL_GPIO_WritePin>
	delay_us(20);
 8004ac6:	2014      	movs	r0, #20
 8004ac8:	f7ff ff7c 	bl	80049c4 <delay_us>

	if(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 8004acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad0:	481c      	ldr	r0, [pc, #112]	; (8004b44 <DHT11_read+0xb4>)
 8004ad2:	f7fc f9c1 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d12f      	bne.n	8004b3c <DHT11_read+0xac>
	{
		count=1;
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <DHT11_read+0xb8>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	701a      	strb	r2, [r3, #0]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8004ae2:	bf00      	nop
 8004ae4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ae8:	4816      	ldr	r0, [pc, #88]	; (8004b44 <DHT11_read+0xb4>)
 8004aea:	f7fc f9b5 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <DHT11_read+0x74>
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <DHT11_read+0xb8>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	b2d1      	uxtb	r1, r2
 8004afc:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <DHT11_read+0xb8>)
 8004afe:	7011      	strb	r1, [r2, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1ef      	bne.n	8004ae4 <DHT11_read+0x54>

		count=1;
 8004b04:	4b10      	ldr	r3, [pc, #64]	; (8004b48 <DHT11_read+0xb8>)
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin));
 8004b0a:	bf00      	nop
 8004b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b10:	480c      	ldr	r0, [pc, #48]	; (8004b44 <DHT11_read+0xb4>)
 8004b12:	f7fc f9a1 	bl	8000e58 <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f7      	bne.n	8004b0c <DHT11_read+0x7c>

		for(uint8_t i=0;i<5;i++)
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	71fb      	strb	r3, [r7, #7]
 8004b20:	e009      	b.n	8004b36 <DHT11_read+0xa6>
		{
			dht11_data[i]=DHT11_readByte();
 8004b22:	79fc      	ldrb	r4, [r7, #7]
 8004b24:	f7ff ff6a 	bl	80049fc <DHT11_readByte>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <DHT11_read+0xbc>)
 8004b2e:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=0;i<5;i++)
 8004b30:	79fb      	ldrb	r3, [r7, #7]
 8004b32:	3301      	adds	r3, #1
 8004b34:	71fb      	strb	r3, [r7, #7]
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d9f2      	bls.n	8004b22 <DHT11_read+0x92>
		}
	}

}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd90      	pop	{r4, r7, pc}
 8004b44:	40010800 	.word	0x40010800
 8004b48:	20000048 	.word	0x20000048
 8004b4c:	20000068 	.word	0x20000068

08004b50 <GY30_read>:

extern I2C_HandleTypeDef hi2c2;
uint16_t gy30_data=0;

void GY30_read(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af02      	add	r7, sp, #8
	uint8_t temp[2]={
 8004b56:	2300      	movs	r3, #0
 8004b58:	713b      	strb	r3, [r7, #4]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	717b      	strb	r3, [r7, #5]
			0,0,
	};
	uint8_t GY30_readCom=0x10;
 8004b5e:	2310      	movs	r3, #16
 8004b60:	70fb      	strb	r3, [r7, #3]

	HAL_I2C_Master_Transmit(&hi2c2, GY30_WRITE_ADDR, &GY30_readCom, sizeof(GY30_readCom), 0xFF);
 8004b62:	1cfa      	adds	r2, r7, #3
 8004b64:	23ff      	movs	r3, #255	; 0xff
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2301      	movs	r3, #1
 8004b6a:	2146      	movs	r1, #70	; 0x46
 8004b6c:	480d      	ldr	r0, [pc, #52]	; (8004ba4 <GY30_read+0x54>)
 8004b6e:	f7fc fadb 	bl	8001128 <HAL_I2C_Master_Transmit>
	HAL_Delay(200);
 8004b72:	20c8      	movs	r0, #200	; 0xc8
 8004b74:	f7fb fe70 	bl	8000858 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, GY30_READ_ADDR, temp, sizeof(temp), 0xFF);
 8004b78:	1d3a      	adds	r2, r7, #4
 8004b7a:	23ff      	movs	r3, #255	; 0xff
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	2302      	movs	r3, #2
 8004b80:	2147      	movs	r1, #71	; 0x47
 8004b82:	4808      	ldr	r0, [pc, #32]	; (8004ba4 <GY30_read+0x54>)
 8004b84:	f7fc fbce 	bl	8001324 <HAL_I2C_Master_Receive>

	gy30_data = (uint16_t)temp[0]<<8 | (uint16_t)temp[1];
 8004b88:	793b      	ldrb	r3, [r7, #4]
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	b21a      	sxth	r2, r3
 8004b8e:	797b      	ldrb	r3, [r7, #5]
 8004b90:	b21b      	sxth	r3, r3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	4b03      	ldr	r3, [pc, #12]	; (8004ba8 <GY30_read+0x58>)
 8004b9a:	801a      	strh	r2, [r3, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3708      	adds	r7, #8
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	20000074 	.word	0x20000074
 8004ba8:	2000006e 	.word	0x2000006e

08004bac <lcd_write>:

extern uint8_t receiveBuffer;
extern UART_HandleTypeDef huart1;

void lcd_write(uint8_t dat)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bb6:	79fb      	ldrb	r3, [r7, #7]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bc4:	4829      	ldr	r0, [pc, #164]	; (8004c6c <lcd_write+0xc0>)
 8004bc6:	f7fc f95e 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bca:	79fb      	ldrb	r3, [r7, #7]
 8004bcc:	085b      	lsrs	r3, r3, #1
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	2108      	movs	r1, #8
 8004bda:	4825      	ldr	r0, [pc, #148]	; (8004c70 <lcd_write+0xc4>)
 8004bdc:	f7fc f953 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004be0:	79fb      	ldrb	r3, [r7, #7]
 8004be2:	089b      	lsrs	r3, r3, #2
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	461a      	mov	r2, r3
 8004bee:	2110      	movs	r1, #16
 8004bf0:	481f      	ldr	r0, [pc, #124]	; (8004c70 <lcd_write+0xc4>)
 8004bf2:	f7fc f948 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	08db      	lsrs	r3, r3, #3
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	2120      	movs	r1, #32
 8004c06:	481a      	ldr	r0, [pc, #104]	; (8004c70 <lcd_write+0xc4>)
 8004c08:	f7fc f93d 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2140      	movs	r1, #64	; 0x40
 8004c1c:	4814      	ldr	r0, [pc, #80]	; (8004c70 <lcd_write+0xc4>)
 8004c1e:	f7fc f932 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004c22:	79fb      	ldrb	r3, [r7, #7]
 8004c24:	095b      	lsrs	r3, r3, #5
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	461a      	mov	r2, r3
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	480f      	ldr	r0, [pc, #60]	; (8004c70 <lcd_write+0xc4>)
 8004c34:	f7fc f927 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004c38:	79fb      	ldrb	r3, [r7, #7]
 8004c3a:	099b      	lsrs	r3, r3, #6
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c4a:	4809      	ldr	r0, [pc, #36]	; (8004c70 <lcd_write+0xc4>)
 8004c4c:	f7fc f91b 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	09db      	lsrs	r3, r3, #7
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c5c:	4804      	ldr	r0, [pc, #16]	; (8004c70 <lcd_write+0xc4>)
 8004c5e:	f7fc f912 	bl	8000e86 <HAL_GPIO_WritePin>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40010800 	.word	0x40010800
 8004c70:	40010c00 	.word	0x40010c00

08004c74 <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8004c7e:	2200      	movs	r2, #0
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	4812      	ldr	r0, [pc, #72]	; (8004ccc <lcd_writeCom+0x58>)
 8004c84:	f7fc f8ff 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2140      	movs	r1, #64	; 0x40
 8004c8c:	480f      	ldr	r0, [pc, #60]	; (8004ccc <lcd_writeCom+0x58>)
 8004c8e:	f7fc f8fa 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2120      	movs	r1, #32
 8004c96:	480d      	ldr	r0, [pc, #52]	; (8004ccc <lcd_writeCom+0x58>)
 8004c98:	f7fc f8f5 	bl	8000e86 <HAL_GPIO_WritePin>

	lcd_write(com);
 8004c9c:	79fb      	ldrb	r3, [r7, #7]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff ff84 	bl	8004bac <lcd_write>
	HAL_Delay(1);
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	f7fb fdd7 	bl	8000858 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8004caa:	2201      	movs	r2, #1
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	4807      	ldr	r0, [pc, #28]	; (8004ccc <lcd_writeCom+0x58>)
 8004cb0:	f7fc f8e9 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004cb4:	2001      	movs	r0, #1
 8004cb6:	f7fb fdcf 	bl	8000858 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8004cba:	2200      	movs	r2, #0
 8004cbc:	2180      	movs	r1, #128	; 0x80
 8004cbe:	4803      	ldr	r0, [pc, #12]	; (8004ccc <lcd_writeCom+0x58>)
 8004cc0:	f7fc f8e1 	bl	8000e86 <HAL_GPIO_WritePin>
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40010800 	.word	0x40010800

08004cd0 <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2180      	movs	r1, #128	; 0x80
 8004cde:	4812      	ldr	r0, [pc, #72]	; (8004d28 <lcd_writeData+0x58>)
 8004ce0:	f7fc f8d1 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	2140      	movs	r1, #64	; 0x40
 8004ce8:	480f      	ldr	r0, [pc, #60]	; (8004d28 <lcd_writeData+0x58>)
 8004cea:	f7fc f8cc 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2120      	movs	r1, #32
 8004cf2:	480d      	ldr	r0, [pc, #52]	; (8004d28 <lcd_writeData+0x58>)
 8004cf4:	f7fc f8c7 	bl	8000e86 <HAL_GPIO_WritePin>

	lcd_write(data);
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff56 	bl	8004bac <lcd_write>
	HAL_Delay(1);
 8004d00:	2001      	movs	r0, #1
 8004d02:	f7fb fda9 	bl	8000858 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8004d06:	2201      	movs	r2, #1
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	4807      	ldr	r0, [pc, #28]	; (8004d28 <lcd_writeData+0x58>)
 8004d0c:	f7fc f8bb 	bl	8000e86 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8004d10:	2001      	movs	r0, #1
 8004d12:	f7fb fda1 	bl	8000858 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	4803      	ldr	r0, [pc, #12]	; (8004d28 <lcd_writeData+0x58>)
 8004d1c:	f7fc f8b3 	bl	8000e86 <HAL_GPIO_WritePin>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40010800 	.word	0x40010800

08004d2c <lcd_init>:

void lcd_init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 8004d30:	2038      	movs	r0, #56	; 0x38
 8004d32:	f7ff ff9f 	bl	8004c74 <lcd_writeCom>
	lcd_writeCom(0x0c);
 8004d36:	200c      	movs	r0, #12
 8004d38:	f7ff ff9c 	bl	8004c74 <lcd_writeCom>
	lcd_writeCom(0x06);
 8004d3c:	2006      	movs	r0, #6
 8004d3e:	f7ff ff99 	bl	8004c74 <lcd_writeCom>
	lcd_writeCom(0x01);
 8004d42:	2001      	movs	r0, #1
 8004d44:	f7ff ff96 	bl	8004c74 <lcd_writeCom>
	lcd_writeCom(0X80);
 8004d48:	2080      	movs	r0, #128	; 0x80
 8004d4a:	f7ff ff93 	bl	8004c74 <lcd_writeCom>
}
 8004d4e:	bf00      	nop
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <lcd_show_dht11>:

void lcd_show_dht11(uint8_t *result)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
	lcd_writeData((result[0] / 10)+48);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	4a14      	ldr	r2, [pc, #80]	; (8004db4 <lcd_show_dht11+0x60>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	3330      	adds	r3, #48	; 0x30
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7ff ffae 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result[0] % 10)+48);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <lcd_show_dht11+0x60>)
 8004d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d7e:	08d9      	lsrs	r1, r3, #3
 8004d80:	460b      	mov	r3, r1
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	3330      	adds	r3, #48	; 0x30
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff ff9d 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('%');
 8004d96:	2025      	movs	r0, #37	; 0x25
 8004d98:	f7ff ff9a 	bl	8004cd0 <lcd_writeData>
	lcd_writeData(' ');
 8004d9c:	2020      	movs	r0, #32
 8004d9e:	f7ff ff97 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result[3] % 10)+48);
	lcd_writeData(0xDF);
	lcd_writeData('C');
	*/

	HAL_Delay(1000);
 8004da2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004da6:	f7fb fd57 	bl	8000858 <HAL_Delay>
}
 8004daa:	bf00      	nop
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	cccccccd 	.word	0xcccccccd

08004db8 <lcd_show_gy30>:

void lcd_show_gy30(uint16_t result)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	80fb      	strh	r3, [r7, #6]
	lcd_writeData((result / 10000)+48);
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	4a35      	ldr	r2, [pc, #212]	; (8004e9c <lcd_show_gy30+0xe4>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	0b5b      	lsrs	r3, r3, #13
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	3330      	adds	r3, #48	; 0x30
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff ff7b 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 10000 /1000)+48);
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	4a2f      	ldr	r2, [pc, #188]	; (8004e9c <lcd_show_gy30+0xe4>)
 8004dde:	fba2 1203 	umull	r1, r2, r2, r3
 8004de2:	0b52      	lsrs	r2, r2, #13
 8004de4:	f242 7110 	movw	r1, #10000	; 0x2710
 8004de8:	fb01 f202 	mul.w	r2, r1, r2
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <lcd_show_gy30+0xe8>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	099b      	lsrs	r3, r3, #6
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	3330      	adds	r3, #48	; 0x30
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff ff65 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	4a25      	ldr	r2, [pc, #148]	; (8004ea0 <lcd_show_gy30+0xe8>)
 8004e0a:	fba2 1203 	umull	r1, r2, r2, r3
 8004e0e:	0992      	lsrs	r2, r2, #6
 8004e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e14:	fb01 f202 	mul.w	r2, r1, r2
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	4a21      	ldr	r2, [pc, #132]	; (8004ea4 <lcd_show_gy30+0xec>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	3330      	adds	r3, #48	; 0x30
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff ff4f 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	4a1b      	ldr	r2, [pc, #108]	; (8004ea4 <lcd_show_gy30+0xec>)
 8004e36:	fba2 1203 	umull	r1, r2, r2, r3
 8004e3a:	0952      	lsrs	r2, r2, #5
 8004e3c:	2164      	movs	r1, #100	; 0x64
 8004e3e:	fb01 f202 	mul.w	r2, r1, r2
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	4a18      	ldr	r2, [pc, #96]	; (8004ea8 <lcd_show_gy30+0xf0>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	08db      	lsrs	r3, r3, #3
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	3330      	adds	r3, #48	; 0x30
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff ff3a 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8004e5c:	88fa      	ldrh	r2, [r7, #6]
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <lcd_show_gy30+0xf0>)
 8004e60:	fba3 1302 	umull	r1, r3, r3, r2
 8004e64:	08d9      	lsrs	r1, r3, #3
 8004e66:	460b      	mov	r3, r1
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	005b      	lsls	r3, r3, #1
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	3330      	adds	r3, #48	; 0x30
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff ff29 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('L');
 8004e7e:	204c      	movs	r0, #76	; 0x4c
 8004e80:	f7ff ff26 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('x');
 8004e84:	2078      	movs	r0, #120	; 0x78
 8004e86:	f7ff ff23 	bl	8004cd0 <lcd_writeData>

	HAL_Delay(1000);
 8004e8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e8e:	f7fb fce3 	bl	8000858 <HAL_Delay>
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	d1b71759 	.word	0xd1b71759
 8004ea0:	10624dd3 	.word	0x10624dd3
 8004ea4:	51eb851f 	.word	0x51eb851f
 8004ea8:	cccccccd 	.word	0xcccccccd

08004eac <lcd_show_bmp280_temp>:

void lcd_show_bmp280_temp(uint32_t result)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	lcd_writeData((result /1000)+48);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	4a28      	ldr	r2, [pc, #160]	; (8004f58 <lcd_show_bmp280_temp+0xac>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	099b      	lsrs	r3, r3, #6
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3330      	adds	r3, #48	; 0x30
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff ff03 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <lcd_show_bmp280_temp+0xac>)
 8004ece:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	4a1f      	ldr	r2, [pc, #124]	; (8004f5c <lcd_show_bmp280_temp+0xb0>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	3330      	adds	r3, #48	; 0x30
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff feef 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('.');
 8004ef2:	202e      	movs	r0, #46	; 0x2e
 8004ef4:	f7ff feec 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <lcd_show_bmp280_temp+0xb0>)
 8004efc:	fba3 1302 	umull	r1, r3, r3, r2
 8004f00:	095b      	lsrs	r3, r3, #5
 8004f02:	2164      	movs	r1, #100	; 0x64
 8004f04:	fb01 f303 	mul.w	r3, r1, r3
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a15      	ldr	r2, [pc, #84]	; (8004f60 <lcd_show_bmp280_temp+0xb4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	08db      	lsrs	r3, r3, #3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	3330      	adds	r3, #48	; 0x30
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fed9 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8004f1e:	6879      	ldr	r1, [r7, #4]
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <lcd_show_bmp280_temp+0xb4>)
 8004f22:	fba3 2301 	umull	r2, r3, r3, r1
 8004f26:	08da      	lsrs	r2, r3, #3
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	1aca      	subs	r2, r1, r3
 8004f32:	b2d3      	uxtb	r3, r2
 8004f34:	3330      	adds	r3, #48	; 0x30
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fec9 	bl	8004cd0 <lcd_writeData>
	lcd_writeData(0xDF);
 8004f3e:	20df      	movs	r0, #223	; 0xdf
 8004f40:	f7ff fec6 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('C');
 8004f44:	2043      	movs	r0, #67	; 0x43
 8004f46:	f7ff fec3 	bl	8004cd0 <lcd_writeData>
	lcd_writeData(' ');
 8004f4a:	2020      	movs	r0, #32
 8004f4c:	f7ff fec0 	bl	8004cd0 <lcd_writeData>
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	10624dd3 	.word	0x10624dd3
 8004f5c:	51eb851f 	.word	0x51eb851f
 8004f60:	cccccccd 	.word	0xcccccccd

08004f64 <lcd_show_bmp280_press>:

void lcd_show_bmp280_press(uint32_t result)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	lcd_writeData((result / 100000)+48);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	095b      	lsrs	r3, r3, #5
 8004f70:	4a3d      	ldr	r2, [pc, #244]	; (8005068 <lcd_show_bmp280_press+0x104>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	09db      	lsrs	r3, r3, #7
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	3330      	adds	r3, #48	; 0x30
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fea6 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 100000 / 10000)+48);
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	0953      	lsrs	r3, r2, #5
 8004f88:	4937      	ldr	r1, [pc, #220]	; (8005068 <lcd_show_bmp280_press+0x104>)
 8004f8a:	fba1 1303 	umull	r1, r3, r1, r3
 8004f8e:	09db      	lsrs	r3, r3, #7
 8004f90:	4936      	ldr	r1, [pc, #216]	; (800506c <lcd_show_bmp280_press+0x108>)
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	4a35      	ldr	r2, [pc, #212]	; (8005070 <lcd_show_bmp280_press+0x10c>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0b5b      	lsrs	r3, r3, #13
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	3330      	adds	r3, #48	; 0x30
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe92 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 10000 / 1000)+48);
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	4b30      	ldr	r3, [pc, #192]	; (8005070 <lcd_show_bmp280_press+0x10c>)
 8004fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fb4:	0b5b      	lsrs	r3, r3, #13
 8004fb6:	f242 7110 	movw	r1, #10000	; 0x2710
 8004fba:	fb01 f303 	mul.w	r3, r1, r3
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	4a2c      	ldr	r2, [pc, #176]	; (8005074 <lcd_show_bmp280_press+0x110>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	3330      	adds	r3, #48	; 0x30
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7ff fe7e 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	4b27      	ldr	r3, [pc, #156]	; (8005074 <lcd_show_bmp280_press+0x110>)
 8004fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8004fdc:	099b      	lsrs	r3, r3, #6
 8004fde:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004fe2:	fb01 f303 	mul.w	r3, r1, r3
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	4a23      	ldr	r2, [pc, #140]	; (8005078 <lcd_show_bmp280_press+0x114>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	3330      	adds	r3, #48	; 0x30
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff fe6a 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('.');
 8004ffc:	202e      	movs	r0, #46	; 0x2e
 8004ffe:	f7ff fe67 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 100 /10)+48);
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4b1c      	ldr	r3, [pc, #112]	; (8005078 <lcd_show_bmp280_press+0x114>)
 8005006:	fba3 1302 	umull	r1, r3, r3, r2
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	2164      	movs	r1, #100	; 0x64
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	4a19      	ldr	r2, [pc, #100]	; (800507c <lcd_show_bmp280_press+0x118>)
 8005016:	fba2 2303 	umull	r2, r3, r2, r3
 800501a:	08db      	lsrs	r3, r3, #3
 800501c:	b2db      	uxtb	r3, r3
 800501e:	3330      	adds	r3, #48	; 0x30
 8005020:	b2db      	uxtb	r3, r3
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fe54 	bl	8004cd0 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8005028:	6879      	ldr	r1, [r7, #4]
 800502a:	4b14      	ldr	r3, [pc, #80]	; (800507c <lcd_show_bmp280_press+0x118>)
 800502c:	fba3 2301 	umull	r2, r3, r3, r1
 8005030:	08da      	lsrs	r2, r3, #3
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	1aca      	subs	r2, r1, r3
 800503c:	b2d3      	uxtb	r3, r2
 800503e:	3330      	adds	r3, #48	; 0x30
 8005040:	b2db      	uxtb	r3, r3
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff fe44 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('h');
 8005048:	2068      	movs	r0, #104	; 0x68
 800504a:	f7ff fe41 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('P');
 800504e:	2050      	movs	r0, #80	; 0x50
 8005050:	f7ff fe3e 	bl	8004cd0 <lcd_writeData>
	lcd_writeData('a');
 8005054:	2061      	movs	r0, #97	; 0x61
 8005056:	f7ff fe3b 	bl	8004cd0 <lcd_writeData>
	lcd_writeData(' ');
 800505a:	2020      	movs	r0, #32
 800505c:	f7ff fe38 	bl	8004cd0 <lcd_writeData>
}
 8005060:	bf00      	nop
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	0a7c5ac5 	.word	0x0a7c5ac5
 800506c:	000186a0 	.word	0x000186a0
 8005070:	d1b71759 	.word	0xd1b71759
 8005074:	10624dd3 	.word	0x10624dd3
 8005078:	51eb851f 	.word	0x51eb851f
 800507c:	cccccccd 	.word	0xcccccccd

08005080 <__libc_init_array>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	2500      	movs	r5, #0
 8005084:	4e0c      	ldr	r6, [pc, #48]	; (80050b8 <__libc_init_array+0x38>)
 8005086:	4c0d      	ldr	r4, [pc, #52]	; (80050bc <__libc_init_array+0x3c>)
 8005088:	1ba4      	subs	r4, r4, r6
 800508a:	10a4      	asrs	r4, r4, #2
 800508c:	42a5      	cmp	r5, r4
 800508e:	d109      	bne.n	80050a4 <__libc_init_array+0x24>
 8005090:	f000 f822 	bl	80050d8 <_init>
 8005094:	2500      	movs	r5, #0
 8005096:	4e0a      	ldr	r6, [pc, #40]	; (80050c0 <__libc_init_array+0x40>)
 8005098:	4c0a      	ldr	r4, [pc, #40]	; (80050c4 <__libc_init_array+0x44>)
 800509a:	1ba4      	subs	r4, r4, r6
 800509c:	10a4      	asrs	r4, r4, #2
 800509e:	42a5      	cmp	r5, r4
 80050a0:	d105      	bne.n	80050ae <__libc_init_array+0x2e>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050a8:	4798      	blx	r3
 80050aa:	3501      	adds	r5, #1
 80050ac:	e7ee      	b.n	800508c <__libc_init_array+0xc>
 80050ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80050b2:	4798      	blx	r3
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7f2      	b.n	800509e <__libc_init_array+0x1e>
 80050b8:	08005140 	.word	0x08005140
 80050bc:	08005140 	.word	0x08005140
 80050c0:	08005140 	.word	0x08005140
 80050c4:	08005144 	.word	0x08005144

080050c8 <memset>:
 80050c8:	4603      	mov	r3, r0
 80050ca:	4402      	add	r2, r0
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d100      	bne.n	80050d2 <memset+0xa>
 80050d0:	4770      	bx	lr
 80050d2:	f803 1b01 	strb.w	r1, [r3], #1
 80050d6:	e7f9      	b.n	80050cc <memset+0x4>

080050d8 <_init>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr

080050e4 <_fini>:
 80050e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e6:	bf00      	nop
 80050e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ea:	bc08      	pop	{r3}
 80050ec:	469e      	mov	lr, r3
 80050ee:	4770      	bx	lr
