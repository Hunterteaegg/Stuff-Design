
AirDetect_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f4c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800705c  0800705c  0001705c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071cc  080071cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080071cc  080071cc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080071cc  080071cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071cc  080071cc  000171cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080071d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000014  080071e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ae8  080071e8  00021ae8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb8f  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000388d  00000000  00000000  0003fbcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016f0  00000000  00000000  00043460  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001a4a5  00000000  00000000  00044b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00013bb2  00000000  00000000  0005eff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00095de6  00000000  00000000  00072ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0010898d  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001578  00000000  00000000  00108a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00006068  00000000  00000000  00109f80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08007044 	.word	0x08007044

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08007044 	.word	0x08007044

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fc11 	bl	800097c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f86d 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f955 	bl	800040c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000162:	f000 f8af 	bl	80002c4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8000166:	f000 f8db 	bl	8000320 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f925 	bl	80003b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 800016e:	f006 fe01 	bl	8006d74 <lcd_init>
	BMP280_SETTINGS bmp280={
 8000172:	4a20      	ldr	r2, [pc, #128]	; (80001f4 <main+0xa4>)
 8000174:	463b      	mov	r3, r7
 8000176:	e892 0003 	ldmia.w	r2, {r0, r1}
 800017a:	6018      	str	r0, [r3, #0]
 800017c:	3304      	adds	r3, #4
 800017e:	8019      	strh	r1, [r3, #0]
	  		.oversampling_press=OVERSAMPLING_x4,
	  		.standy_time=STANDBY_TIME_005,
	  		.filter_coefficient=FILTER_MODE_4,
	  		.spi3w=SPI3W_DISABLE,
	};
	BMP280_init(bmp280);
 8000180:	463b      	mov	r3, r7
 8000182:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000186:	f006 f921 	bl	80063cc <BMP280_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800018a:	f003 fa63 	bl	8003654 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Queue_BMP280_data */
  Queue_BMP280_dataHandle = osMessageQueueNew (1,2 * sizeof(uint32_t), &Queue_BMP280_data_attributes);
 800018e:	4a1a      	ldr	r2, [pc, #104]	; (80001f8 <main+0xa8>)
 8000190:	2108      	movs	r1, #8
 8000192:	2001      	movs	r0, #1
 8000194:	f003 fb9c 	bl	80038d0 <osMessageQueueNew>
 8000198:	4602      	mov	r2, r0
 800019a:	4b18      	ldr	r3, [pc, #96]	; (80001fc <main+0xac>)
 800019c:	601a      	str	r2, [r3, #0]

  /* creation of Queue_DHT11_data */
  Queue_DHT11_dataHandle = osMessageQueueNew (1,2 * sizeof(uint8_t), &Queue_DHT11_data_attributes);
 800019e:	4a18      	ldr	r2, [pc, #96]	; (8000200 <main+0xb0>)
 80001a0:	2102      	movs	r1, #2
 80001a2:	2001      	movs	r0, #1
 80001a4:	f003 fb94 	bl	80038d0 <osMessageQueueNew>
 80001a8:	4602      	mov	r2, r0
 80001aa:	4b16      	ldr	r3, [pc, #88]	; (8000204 <main+0xb4>)
 80001ac:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ae:	4a16      	ldr	r2, [pc, #88]	; (8000208 <main+0xb8>)
 80001b0:	2100      	movs	r1, #0
 80001b2:	4816      	ldr	r0, [pc, #88]	; (800020c <main+0xbc>)
 80001b4:	f003 fab4 	bl	8003720 <osThreadNew>
 80001b8:	4602      	mov	r2, r0
 80001ba:	4b15      	ldr	r3, [pc, #84]	; (8000210 <main+0xc0>)
 80001bc:	601a      	str	r2, [r3, #0]

  /* creation of Task_lcdshow */
  Task_lcdshowHandle = osThreadNew(Entry_lcd_show, NULL, &Task_lcdshow_attributes);
 80001be:	4a15      	ldr	r2, [pc, #84]	; (8000214 <main+0xc4>)
 80001c0:	2100      	movs	r1, #0
 80001c2:	4815      	ldr	r0, [pc, #84]	; (8000218 <main+0xc8>)
 80001c4:	f003 faac 	bl	8003720 <osThreadNew>
 80001c8:	4602      	mov	r2, r0
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <main+0xcc>)
 80001cc:	601a      	str	r2, [r3, #0]

  /* creation of Task_getBMP280 */
  Task_getBMP280Handle = osThreadNew(Entry_getBMP280, NULL, &Task_getBMP280_attributes);
 80001ce:	4a14      	ldr	r2, [pc, #80]	; (8000220 <main+0xd0>)
 80001d0:	2100      	movs	r1, #0
 80001d2:	4814      	ldr	r0, [pc, #80]	; (8000224 <main+0xd4>)
 80001d4:	f003 faa4 	bl	8003720 <osThreadNew>
 80001d8:	4602      	mov	r2, r0
 80001da:	4b13      	ldr	r3, [pc, #76]	; (8000228 <main+0xd8>)
 80001dc:	601a      	str	r2, [r3, #0]

  /* creation of Task_getDHT11 */
  Task_getDHT11Handle = osThreadNew(Entry_getDHT11, NULL, &Task_getDHT11_attributes);
 80001de:	4a13      	ldr	r2, [pc, #76]	; (800022c <main+0xdc>)
 80001e0:	2100      	movs	r1, #0
 80001e2:	4813      	ldr	r0, [pc, #76]	; (8000230 <main+0xe0>)
 80001e4:	f003 fa9c 	bl	8003720 <osThreadNew>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b12      	ldr	r3, [pc, #72]	; (8000234 <main+0xe4>)
 80001ec:	601a      	str	r2, [r3, #0]


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80001ee:	f003 fa63 	bl	80036b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f2:	e7fe      	b.n	80001f2 <main+0xa2>
 80001f4:	080070c0 	.word	0x080070c0
 80001f8:	08007184 	.word	0x08007184
 80001fc:	20001968 	.word	0x20001968
 8000200:	0800719c 	.word	0x0800719c
 8000204:	20001a54 	.word	0x20001a54
 8000208:	080070f4 	.word	0x080070f4
 800020c:	080004f1 	.word	0x080004f1
 8000210:	20001964 	.word	0x20001964
 8000214:	08007118 	.word	0x08007118
 8000218:	08000501 	.word	0x08000501
 800021c:	20001a4c 	.word	0x20001a4c
 8000220:	0800713c 	.word	0x0800713c
 8000224:	08000575 	.word	0x08000575
 8000228:	20001a50 	.word	0x20001a50
 800022c:	08007160 	.word	0x08007160
 8000230:	080005c9 	.word	0x080005c9
 8000234:	200019c0 	.word	0x200019c0

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	; 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	; 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f006 fef3 	bl	8007032 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800025a:	2301      	movs	r3, #1
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000268:	2301      	movs	r3, #1
 800026a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026c:	2302      	movs	r3, #2
 800026e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000276:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027c:	f107 0318 	add.w	r3, r7, #24
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fe9d 	bl	8001fc0 <HAL_RCC_OscConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028c:	f000 f9ce 	bl	800062c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000290:	230f      	movs	r3, #15
 8000292:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000294:	2302      	movs	r3, #2
 8000296:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a6:	1d3b      	adds	r3, r7, #4
 80002a8:	2102      	movs	r1, #2
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 f908 	bl	80024c0 <HAL_RCC_ClockConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b6:	f000 f9b9 	bl	800062c <Error_Handler>
  }
}
 80002ba:	bf00      	nop
 80002bc:	3740      	adds	r7, #64	; 0x40
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
	...

080002c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80002c8:	4b12      	ldr	r3, [pc, #72]	; (8000314 <MX_I2C2_Init+0x50>)
 80002ca:	4a13      	ldr	r2, [pc, #76]	; (8000318 <MX_I2C2_Init+0x54>)
 80002cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80002ce:	4b11      	ldr	r3, [pc, #68]	; (8000314 <MX_I2C2_Init+0x50>)
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <MX_I2C2_Init+0x58>)
 80002d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_I2C2_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80002da:	4b0e      	ldr	r3, [pc, #56]	; (8000314 <MX_I2C2_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002e0:	4b0c      	ldr	r3, [pc, #48]	; (8000314 <MX_I2C2_Init+0x50>)
 80002e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002e8:	4b0a      	ldr	r3, [pc, #40]	; (8000314 <MX_I2C2_Init+0x50>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80002ee:	4b09      	ldr	r3, [pc, #36]	; (8000314 <MX_I2C2_Init+0x50>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <MX_I2C2_Init+0x50>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002fa:	4b06      	ldr	r3, [pc, #24]	; (8000314 <MX_I2C2_Init+0x50>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000300:	4804      	ldr	r0, [pc, #16]	; (8000314 <MX_I2C2_Init+0x50>)
 8000302:	f000 fe6f 	bl	8000fe4 <HAL_I2C_Init>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800030c:	f000 f98e 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000310:	bf00      	nop
 8000312:	bd80      	pop	{r7, pc}
 8000314:	2000196c 	.word	0x2000196c
 8000318:	40005800 	.word	0x40005800
 800031c:	000186a0 	.word	0x000186a0

08000320 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0308 	add.w	r3, r7, #8
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	463b      	mov	r3, r7
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033c:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <MX_TIM2_Init+0x94>)
 800033e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000342:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_TIM2_Init+0x94>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000352:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000356:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000358:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <MX_TIM2_Init+0x94>)
 800035a:	2200      	movs	r2, #0
 800035c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000360:	2200      	movs	r2, #0
 8000362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000364:	4813      	ldr	r0, [pc, #76]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000366:	f002 fa77 	bl	8002858 <HAL_TIM_Base_Init>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000370:	f000 f95c 	bl	800062c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000378:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800037a:	f107 0308 	add.w	r3, r7, #8
 800037e:	4619      	mov	r1, r3
 8000380:	480c      	ldr	r0, [pc, #48]	; (80003b4 <MX_TIM2_Init+0x94>)
 8000382:	f002 fc13 	bl	8002bac <HAL_TIM_ConfigClockSource>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800038c:	f000 f94e 	bl	800062c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000390:	2300      	movs	r3, #0
 8000392:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000394:	2300      	movs	r3, #0
 8000396:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000398:	463b      	mov	r3, r7
 800039a:	4619      	mov	r1, r3
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_TIM2_Init+0x94>)
 800039e:	f002 fdd9 	bl	8002f54 <HAL_TIMEx_MasterConfigSynchronization>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80003a8:	f000 f940 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	3718      	adds	r7, #24
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	20001a04 	.word	0x20001a04

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003be:	4a12      	ldr	r2, [pc, #72]	; (8000408 <MX_USART1_UART_Init+0x50>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b08      	ldr	r3, [pc, #32]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ee:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_USART1_UART_Init+0x4c>)
 80003f0:	f002 fe20 	bl	8003034 <HAL_UART_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003fa:	f000 f917 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	200019c4 	.word	0x200019c4
 8000408:	40013800 	.word	0x40013800

0800040c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b088      	sub	sp, #32
 8000410:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000412:	f107 0310 	add.w	r3, r7, #16
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
 800041a:	605a      	str	r2, [r3, #4]
 800041c:	609a      	str	r2, [r3, #8]
 800041e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000420:	4b30      	ldr	r3, [pc, #192]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000422:	699b      	ldr	r3, [r3, #24]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6193      	str	r3, [r2, #24]
 800042c:	4b2d      	ldr	r3, [pc, #180]	; (80004e4 <MX_GPIO_Init+0xd8>)
 800042e:	699b      	ldr	r3, [r3, #24]
 8000430:	f003 0320 	and.w	r3, r3, #32
 8000434:	60fb      	str	r3, [r7, #12]
 8000436:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000438:	4b2a      	ldr	r3, [pc, #168]	; (80004e4 <MX_GPIO_Init+0xd8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a29      	ldr	r2, [pc, #164]	; (80004e4 <MX_GPIO_Init+0xd8>)
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b27      	ldr	r3, [pc, #156]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f003 0304 	and.w	r3, r3, #4
 800044c:	60bb      	str	r3, [r7, #8]
 800044e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b24      	ldr	r3, [pc, #144]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a23      	ldr	r2, [pc, #140]	; (80004e4 <MX_GPIO_Init+0xd8>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b21      	ldr	r3, [pc, #132]	; (80004e4 <MX_GPIO_Init+0xd8>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	607b      	str	r3, [r7, #4]
 8000466:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|DHT11_DOUT_Pin
 8000468:	2200      	movs	r2, #0
 800046a:	f648 01e0 	movw	r1, #35040	; 0x88e0
 800046e:	481e      	ldr	r0, [pc, #120]	; (80004e8 <MX_GPIO_Init+0xdc>)
 8000470:	f000 fd9f 	bl	8000fb2 <HAL_GPIO_WritePin>
                          |LCD_D0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 800047a:	481c      	ldr	r0, [pc, #112]	; (80004ec <MX_GPIO_Init+0xe0>)
 800047c:	f000 fd99 	bl	8000fb2 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_WR_Pin LCD_RD_Pin LCD_E_Pin LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin;
 8000480:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000484:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048a:	2300      	movs	r3, #0
 800048c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048e:	2302      	movs	r3, #2
 8000490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000492:	f107 0310 	add.w	r3, r7, #16
 8000496:	4619      	mov	r1, r3
 8000498:	4813      	ldr	r0, [pc, #76]	; (80004e8 <MX_GPIO_Init+0xdc>)
 800049a:	f000 fc19 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DOUT_Pin */
  GPIO_InitStruct.Pin = DHT11_DOUT_Pin;
 800049e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80004a4:	2311      	movs	r3, #17
 80004a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a8:	2300      	movs	r3, #0
 80004aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	2302      	movs	r3, #2
 80004ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_DOUT_GPIO_Port, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	480c      	ldr	r0, [pc, #48]	; (80004e8 <MX_GPIO_Init+0xdc>)
 80004b8:	f000 fc0a 	bl	8000cd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 80004bc:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80004c0:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_GPIO_Init+0xe0>)
 80004d6:	f000 fbfb 	bl	8000cd0 <HAL_GPIO_Init>

}
 80004da:	bf00      	nop
 80004dc:	3720      	adds	r7, #32
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40010800 	.word	0x40010800
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004f8:	2001      	movs	r0, #1
 80004fa:	f003 f9bb 	bl	8003874 <osDelay>
 80004fe:	e7fb      	b.n	80004f8 <StartDefaultTask+0x8>

08000500 <Entry_lcd_show>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Entry_lcd_show */
void Entry_lcd_show(void *argument)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_lcd_show */
	  uint32_t bmp280_receiveData[2]={
 8000508:	2300      	movs	r3, #0
 800050a:	613b      	str	r3, [r7, #16]
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]
			  0,0,
	  };
	  uint8_t dht11_receiveData[2]={
 8000510:	2300      	movs	r3, #0
 8000512:	733b      	strb	r3, [r7, #12]
 8000514:	2300      	movs	r3, #0
 8000516:	737b      	strb	r3, [r7, #13]
			  0,0,
	  };
  /* Infinite loop */
  for(;;)
  {
	  lcd_writeCom(0x80);
 8000518:	2080      	movs	r0, #128	; 0x80
 800051a:	f006 fbcf 	bl	8006cbc <lcd_writeCom>

	  osMessageQueueGet(Queue_BMP280_dataHandle, bmp280_receiveData, NULL, 0xFF);
 800051e:	4b13      	ldr	r3, [pc, #76]	; (800056c <Entry_lcd_show+0x6c>)
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f107 0110 	add.w	r1, r7, #16
 8000526:	23ff      	movs	r3, #255	; 0xff
 8000528:	2200      	movs	r2, #0
 800052a:	f003 facb 	bl	8003ac4 <osMessageQueueGet>
	  lcd_show_bmp280_temp(bmp280_receiveData[0]);
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	4618      	mov	r0, r3
 8000532:	f006 fc65 	bl	8006e00 <lcd_show_bmp280_temp>
	  lcd_writeCom(0x80|0x40);
 8000536:	20c0      	movs	r0, #192	; 0xc0
 8000538:	f006 fbc0 	bl	8006cbc <lcd_writeCom>
	  lcd_show_bmp280_press(bmp280_receiveData[1]);
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	4618      	mov	r0, r3
 8000540:	f006 fcba 	bl	8006eb8 <lcd_show_bmp280_press>

	  osMessageQueueGet(Queue_DHT11_dataHandle, dht11_receiveData, NULL, 0xFF);
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <Entry_lcd_show+0x70>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	f107 010c 	add.w	r1, r7, #12
 800054c:	23ff      	movs	r3, #255	; 0xff
 800054e:	2200      	movs	r2, #0
 8000550:	f003 fab8 	bl	8003ac4 <osMessageQueueGet>
	  lcd_writeCom(0x80+8);
 8000554:	2088      	movs	r0, #136	; 0x88
 8000556:	f006 fbb1 	bl	8006cbc <lcd_writeCom>
	  lcd_show_dht11(dht11_receiveData);
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	4618      	mov	r0, r3
 8000560:	f006 fc1c 	bl	8006d9c <lcd_show_dht11>

    osDelay(1);
 8000564:	2001      	movs	r0, #1
 8000566:	f003 f985 	bl	8003874 <osDelay>
	  lcd_writeCom(0x80);
 800056a:	e7d5      	b.n	8000518 <Entry_lcd_show+0x18>
 800056c:	20001968 	.word	0x20001968
 8000570:	20001a54 	.word	0x20001a54

08000574 <Entry_getBMP280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Entry_getBMP280 */
void Entry_getBMP280(void *argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_getBMP280 */
	  uint32_t bmp280_sendData[2]={
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	2300      	movs	r3, #0
 8000582:	60fb      	str	r3, [r7, #12]
			  0,0,
	  };
  /* Infinite loop */
  for(;;)
  {
	  getDig_T();
 8000584:	f005 ff92 	bl	80064ac <getDig_T>
	  getDig_P();
 8000588:	f006 f876 	bl	8006678 <getDig_P>

	  bmp280_sendData[0]=bmp280_compensate_T_int32(BMP280_temp_read());
 800058c:	f005 ff60 	bl	8006450 <BMP280_temp_read>
 8000590:	4603      	mov	r3, r0
 8000592:	4618      	mov	r0, r3
 8000594:	f006 f802 	bl	800659c <bmp280_compensate_T_int32>
 8000598:	4603      	mov	r3, r0
 800059a:	60bb      	str	r3, [r7, #8]
	  bmp280_sendData[1]=bmp280_compensate_P_int32(BMP280_press_read());
 800059c:	f006 f83e 	bl	800661c <BMP280_press_read>
 80005a0:	4603      	mov	r3, r0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f006 f9b2 	bl	800690c <bmp280_compensate_P_int32>
 80005a8:	4603      	mov	r3, r0
 80005aa:	60fb      	str	r3, [r7, #12]

	  osMessageQueuePut(Queue_BMP280_dataHandle,bmp280_sendData, 0, 0xFF);
 80005ac:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <Entry_getBMP280+0x50>)
 80005ae:	6818      	ldr	r0, [r3, #0]
 80005b0:	f107 0108 	add.w	r1, r7, #8
 80005b4:	23ff      	movs	r3, #255	; 0xff
 80005b6:	2200      	movs	r2, #0
 80005b8:	f003 fa10 	bl	80039dc <osMessageQueuePut>
    osDelay(1);
 80005bc:	2001      	movs	r0, #1
 80005be:	f003 f959 	bl	8003874 <osDelay>
	  getDig_T();
 80005c2:	e7df      	b.n	8000584 <Entry_getBMP280+0x10>
 80005c4:	20001968 	.word	0x20001968

080005c8 <Entry_getDHT11>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Entry_getDHT11 */
void Entry_getDHT11(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Entry_getDHT11 */
	uint8_t dht11_sendData[2]={
 80005d0:	2300      	movs	r3, #0
 80005d2:	733b      	strb	r3, [r7, #12]
 80005d4:	2300      	movs	r3, #0
 80005d6:	737b      	strb	r3, [r7, #13]
			0,0,
	};
  /* Infinite loop */
  for(;;)
  {
	  DHT11_read();
 80005d8:	f006 faac 	bl	8006b34 <DHT11_read>

	  dht11_sendData[0]=dht11_data[0];
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <Entry_getDHT11+0x38>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	733b      	strb	r3, [r7, #12]
	  dht11_sendData[1]=dht11_data[1];
 80005e2:	4b07      	ldr	r3, [pc, #28]	; (8000600 <Entry_getDHT11+0x38>)
 80005e4:	785b      	ldrb	r3, [r3, #1]
 80005e6:	737b      	strb	r3, [r7, #13]

	  osMessageQueuePut(Queue_DHT11_dataHandle, dht11_sendData, 0, 0xFF);
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <Entry_getDHT11+0x3c>)
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f107 010c 	add.w	r1, r7, #12
 80005f0:	23ff      	movs	r3, #255	; 0xff
 80005f2:	2200      	movs	r2, #0
 80005f4:	f003 f9f2 	bl	80039dc <osMessageQueuePut>
    osDelay(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f003 f93b 	bl	8003874 <osDelay>
	  DHT11_read();
 80005fe:	e7eb      	b.n	80005d8 <Entry_getDHT11+0x10>
 8000600:	20001938 	.word	0x20001938
 8000604:	20001a54 	.word	0x20001a54

08000608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d101      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800061a:	f000 f9c5 	bl	80009a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40012c00 	.word	0x40012c00

0800062c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr

08000638 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a16      	ldr	r2, [pc, #88]	; (8000710 <HAL_I2C_MspInit+0x74>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d124      	bne.n	8000706 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006c2:	f043 0308 	orr.w	r3, r3, #8
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80006d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	4619      	mov	r1, r3
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <HAL_I2C_MspInit+0x7c>)
 80006ea:	f000 faf1 	bl	8000cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_I2C_MspInit+0x78>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000706:	bf00      	nop
 8000708:	3720      	adds	r7, #32
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40005800 	.word	0x40005800
 8000714:	40021000 	.word	0x40021000
 8000718:	40010c00 	.word	0x40010c00

0800071c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072c:	d113      	bne.n	8000756 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_TIM_Base_MspInit+0x44>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0b      	ldr	r2, [pc, #44]	; (8000760 <HAL_TIM_Base_MspInit+0x44>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_TIM_Base_MspInit+0x44>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	201c      	movs	r0, #28
 800074c:	f000 fa1f 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000750:	201c      	movs	r0, #28
 8000752:	f000 fa38 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000756:	bf00      	nop
 8000758:	3710      	adds	r7, #16
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a20      	ldr	r2, [pc, #128]	; (8000800 <HAL_UART_MspInit+0x9c>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d139      	bne.n	80007f8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <HAL_UART_MspInit+0xa0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a1e      	ldr	r2, [pc, #120]	; (8000804 <HAL_UART_MspInit+0xa0>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <HAL_UART_MspInit+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_UART_MspInit+0xa0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a18      	ldr	r2, [pc, #96]	; (8000804 <HAL_UART_MspInit+0xa0>)
 80007a2:	f043 0304 	orr.w	r3, r3, #4
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_UART_MspInit+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0304 	and.w	r3, r3, #4
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007be:	2303      	movs	r3, #3
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	4619      	mov	r1, r3
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <HAL_UART_MspInit+0xa4>)
 80007ca:	f000 fa81 	bl	8000cd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	4619      	mov	r1, r3
 80007e2:	4809      	ldr	r0, [pc, #36]	; (8000808 <HAL_UART_MspInit+0xa4>)
 80007e4:	f000 fa74 	bl	8000cd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2025      	movs	r0, #37	; 0x25
 80007ee:	f000 f9ce 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007f2:	2025      	movs	r0, #37	; 0x25
 80007f4:	f000 f9e7 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40013800 	.word	0x40013800
 8000804:	40021000 	.word	0x40021000
 8000808:	40010800 	.word	0x40010800

0800080c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08c      	sub	sp, #48	; 0x30
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800081c:	2200      	movs	r2, #0
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	2019      	movs	r0, #25
 8000822:	f000 f9b4 	bl	8000b8e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000826:	2019      	movs	r0, #25
 8000828:	f000 f9cd 	bl	8000bc6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_InitTick+0x9c>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_InitTick+0x9c>)
 8000832:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <HAL_InitTick+0x9c>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000844:	f107 0210 	add.w	r2, r7, #16
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f001 ffb4 	bl	80027bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000854:	f001 ff9e 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 8000858:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800085a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800085c:	4a13      	ldr	r2, [pc, #76]	; (80008ac <HAL_InitTick+0xa0>)
 800085e:	fba2 2303 	umull	r2, r3, r2, r3
 8000862:	0c9b      	lsrs	r3, r3, #18
 8000864:	3b01      	subs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <HAL_InitTick+0xa4>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <HAL_InitTick+0xa8>)
 800086c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <HAL_InitTick+0xa4>)
 8000870:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000874:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <HAL_InitTick+0xa4>)
 8000878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800087a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_InitTick+0xa4>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <HAL_InitTick+0xa4>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000888:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_InitTick+0xa4>)
 800088a:	f001 ffe5 	bl	8002858 <HAL_TIM_Base_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d104      	bne.n	800089e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000894:	4806      	ldr	r0, [pc, #24]	; (80008b0 <HAL_InitTick+0xa4>)
 8000896:	f002 f82f 	bl	80028f8 <HAL_TIM_Base_Start_IT>
 800089a:	4603      	mov	r3, r0
 800089c:	e000      	b.n	80008a0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3730      	adds	r7, #48	; 0x30
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000
 80008ac:	431bde83 	.word	0x431bde83
 80008b0:	20001a58 	.word	0x20001a58
 80008b4:	40012c00 	.word	0x40012c00

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <HardFault_Handler+0x4>

080008ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <MemManage_Handler+0x4>

080008d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <BusFault_Handler+0x4>

080008d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008da:	e7fe      	b.n	80008da <UsageFault_Handler+0x4>

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008ec:	4802      	ldr	r0, [pc, #8]	; (80008f8 <TIM1_UP_IRQHandler+0x10>)
 80008ee:	f002 f855 	bl	800299c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	20001a58 	.word	0x20001a58

080008fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <TIM2_IRQHandler+0x10>)
 8000902:	f002 f84b 	bl	800299c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20001a04 	.word	0x20001a04

08000910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <USART1_IRQHandler+0x10>)
 8000916:	f002 fbdb 	bl	80030d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200019c4 	.word	0x200019c4

08000924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr

08000930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000930:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000932:	e003      	b.n	800093c <LoopCopyDataInit>

08000934 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000936:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000938:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800093a:	3104      	adds	r1, #4

0800093c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000940:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000942:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000944:	d3f6      	bcc.n	8000934 <CopyDataInit>
  ldr r2, =_sbss
 8000946:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000948:	e002      	b.n	8000950 <LoopFillZerobss>

0800094a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800094a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800094c:	f842 3b04 	str.w	r3, [r2], #4

08000950 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000952:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000954:	d3f9      	bcc.n	800094a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000956:	f7ff ffe5 	bl	8000924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095a:	f006 fb3b 	bl	8006fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800095e:	f7ff fbf7 	bl	8000150 <main>
  bx lr
 8000962:	4770      	bx	lr
  ldr r3, =_sidata
 8000964:	080071d4 	.word	0x080071d4
  ldr r0, =_sdata
 8000968:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800096c:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 8000970:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 8000974:	20001ae8 	.word	0x20001ae8

08000978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000978:	e7fe      	b.n	8000978 <ADC1_2_IRQHandler>
	...

0800097c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_Init+0x28>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <HAL_Init+0x28>)
 8000986:	f043 0310 	orr.w	r3, r3, #16
 800098a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f8f3 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000992:	2000      	movs	r0, #0
 8000994:	f7ff ff3a 	bl	800080c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe4e 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40022000 	.word	0x40022000

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20001aa0 	.word	0x20001aa0

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20001aa0 	.word	0x20001aa0

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff fff0 	bl	80009cc <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_Delay+0x40>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffe0 	bl	80009cc <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bc80      	pop	{r7}
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4906      	ldr	r1, [pc, #24]	; (8000abc <__NVIC_EnableIRQ+0x34>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff4f 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff64 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ffb2 	bl	8000b14 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff81 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff57 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bec:	2300      	movs	r3, #0
 8000bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000bf6:	2b02      	cmp	r3, #2
 8000bf8:	d005      	beq.n	8000c06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
 8000c04:	e051      	b.n	8000caa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 020e 	bic.w	r2, r2, #14
 8000c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f022 0201 	bic.w	r2, r2, #1
 8000c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a22      	ldr	r2, [pc, #136]	; (8000cb4 <HAL_DMA_Abort_IT+0xd0>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d029      	beq.n	8000c84 <HAL_DMA_Abort_IT+0xa0>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a20      	ldr	r2, [pc, #128]	; (8000cb8 <HAL_DMA_Abort_IT+0xd4>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d022      	beq.n	8000c80 <HAL_DMA_Abort_IT+0x9c>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1f      	ldr	r2, [pc, #124]	; (8000cbc <HAL_DMA_Abort_IT+0xd8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d01a      	beq.n	8000c7a <HAL_DMA_Abort_IT+0x96>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <HAL_DMA_Abort_IT+0xdc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d012      	beq.n	8000c74 <HAL_DMA_Abort_IT+0x90>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_DMA_Abort_IT+0xe0>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00a      	beq.n	8000c6e <HAL_DMA_Abort_IT+0x8a>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_DMA_Abort_IT+0xe4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d102      	bne.n	8000c68 <HAL_DMA_Abort_IT+0x84>
 8000c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000c66:	e00e      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c6c:	e00b      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	e008      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c78:	e005      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c7e:	e002      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c80:	2310      	movs	r3, #16
 8000c82:	e000      	b.n	8000c86 <HAL_DMA_Abort_IT+0xa2>
 8000c84:	2301      	movs	r3, #1
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_DMA_Abort_IT+0xe8>)
 8000c88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	4798      	blx	r3
    } 
  }
  return status;
 8000caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40020008 	.word	0x40020008
 8000cb8:	4002001c 	.word	0x4002001c
 8000cbc:	40020030 	.word	0x40020030
 8000cc0:	40020044 	.word	0x40020044
 8000cc4:	40020058 	.word	0x40020058
 8000cc8:	4002006c 	.word	0x4002006c
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b08b      	sub	sp, #44	; 0x2c
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce2:	e127      	b.n	8000f34 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8116 	bne.w	8000f2e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b12      	cmp	r3, #18
 8000d08:	d034      	beq.n	8000d74 <HAL_GPIO_Init+0xa4>
 8000d0a:	2b12      	cmp	r3, #18
 8000d0c:	d80d      	bhi.n	8000d2a <HAL_GPIO_Init+0x5a>
 8000d0e:	2b02      	cmp	r3, #2
 8000d10:	d02b      	beq.n	8000d6a <HAL_GPIO_Init+0x9a>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d804      	bhi.n	8000d20 <HAL_GPIO_Init+0x50>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d031      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d01c      	beq.n	8000d58 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d1e:	e048      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d043      	beq.n	8000dac <HAL_GPIO_Init+0xdc>
 8000d24:	2b11      	cmp	r3, #17
 8000d26:	d01b      	beq.n	8000d60 <HAL_GPIO_Init+0x90>
          break;
 8000d28:	e043      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d2a:	4a89      	ldr	r2, [pc, #548]	; (8000f50 <HAL_GPIO_Init+0x280>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d026      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
 8000d30:	4a87      	ldr	r2, [pc, #540]	; (8000f50 <HAL_GPIO_Init+0x280>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d806      	bhi.n	8000d44 <HAL_GPIO_Init+0x74>
 8000d36:	4a87      	ldr	r2, [pc, #540]	; (8000f54 <HAL_GPIO_Init+0x284>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d020      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
 8000d3c:	4a86      	ldr	r2, [pc, #536]	; (8000f58 <HAL_GPIO_Init+0x288>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d01d      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
          break;
 8000d42:	e036      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d44:	4a85      	ldr	r2, [pc, #532]	; (8000f5c <HAL_GPIO_Init+0x28c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d019      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
 8000d4a:	4a85      	ldr	r2, [pc, #532]	; (8000f60 <HAL_GPIO_Init+0x290>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d016      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
 8000d50:	4a84      	ldr	r2, [pc, #528]	; (8000f64 <HAL_GPIO_Init+0x294>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d013      	beq.n	8000d7e <HAL_GPIO_Init+0xae>
          break;
 8000d56:	e02c      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	623b      	str	r3, [r7, #32]
          break;
 8000d5e:	e028      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	3304      	adds	r3, #4
 8000d66:	623b      	str	r3, [r7, #32]
          break;
 8000d68:	e023      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	3308      	adds	r3, #8
 8000d70:	623b      	str	r3, [r7, #32]
          break;
 8000d72:	e01e      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	330c      	adds	r3, #12
 8000d7a:	623b      	str	r3, [r7, #32]
          break;
 8000d7c:	e019      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d86:	2304      	movs	r3, #4
 8000d88:	623b      	str	r3, [r7, #32]
          break;
 8000d8a:	e012      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d105      	bne.n	8000da0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d94:	2308      	movs	r3, #8
 8000d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69fa      	ldr	r2, [r7, #28]
 8000d9c:	611a      	str	r2, [r3, #16]
          break;
 8000d9e:	e008      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da0:	2308      	movs	r3, #8
 8000da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	615a      	str	r2, [r3, #20]
          break;
 8000daa:	e002      	b.n	8000db2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
          break;
 8000db0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	2bff      	cmp	r3, #255	; 0xff
 8000db6:	d801      	bhi.n	8000dbc <HAL_GPIO_Init+0xec>
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	e001      	b.n	8000dc0 <HAL_GPIO_Init+0xf0>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3304      	adds	r3, #4
 8000dc0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc2:	69bb      	ldr	r3, [r7, #24]
 8000dc4:	2bff      	cmp	r3, #255	; 0xff
 8000dc6:	d802      	bhi.n	8000dce <HAL_GPIO_Init+0xfe>
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	e002      	b.n	8000dd4 <HAL_GPIO_Init+0x104>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	3b08      	subs	r3, #8
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	210f      	movs	r1, #15
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	401a      	ands	r2, r3
 8000de6:	6a39      	ldr	r1, [r7, #32]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	fa01 f303 	lsl.w	r3, r1, r3
 8000dee:	431a      	orrs	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 8096 	beq.w	8000f2e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <HAL_GPIO_Init+0x298>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a58      	ldr	r2, [pc, #352]	; (8000f68 <HAL_GPIO_Init+0x298>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <HAL_GPIO_Init+0x298>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e1a:	4a54      	ldr	r2, [pc, #336]	; (8000f6c <HAL_GPIO_Init+0x29c>)
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4b      	ldr	r2, [pc, #300]	; (8000f70 <HAL_GPIO_Init+0x2a0>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d013      	beq.n	8000e6e <HAL_GPIO_Init+0x19e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4a      	ldr	r2, [pc, #296]	; (8000f74 <HAL_GPIO_Init+0x2a4>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d00d      	beq.n	8000e6a <HAL_GPIO_Init+0x19a>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a49      	ldr	r2, [pc, #292]	; (8000f78 <HAL_GPIO_Init+0x2a8>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d007      	beq.n	8000e66 <HAL_GPIO_Init+0x196>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a48      	ldr	r2, [pc, #288]	; (8000f7c <HAL_GPIO_Init+0x2ac>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d101      	bne.n	8000e62 <HAL_GPIO_Init+0x192>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e006      	b.n	8000e70 <HAL_GPIO_Init+0x1a0>
 8000e62:	2304      	movs	r3, #4
 8000e64:	e004      	b.n	8000e70 <HAL_GPIO_Init+0x1a0>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e002      	b.n	8000e70 <HAL_GPIO_Init+0x1a0>
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e000      	b.n	8000e70 <HAL_GPIO_Init+0x1a0>
 8000e6e:	2300      	movs	r3, #0
 8000e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e72:	f002 0203 	and.w	r2, r2, #3
 8000e76:	0092      	lsls	r2, r2, #2
 8000e78:	4093      	lsls	r3, r2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e80:	493a      	ldr	r1, [pc, #232]	; (8000f6c <HAL_GPIO_Init+0x29c>)
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	3302      	adds	r3, #2
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e9a:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4938      	ldr	r1, [pc, #224]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]
 8000ea6:	e006      	b.n	8000eb6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	4933      	ldr	r1, [pc, #204]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	492e      	ldr	r1, [pc, #184]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	604b      	str	r3, [r1, #4]
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed0:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	43db      	mvns	r3, r3
 8000ed8:	4929      	ldr	r1, [pc, #164]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000eda:	4013      	ands	r3, r2
 8000edc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d006      	beq.n	8000ef8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000eea:	4b25      	ldr	r3, [pc, #148]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	4924      	ldr	r1, [pc, #144]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	608b      	str	r3, [r1, #8]
 8000ef6:	e006      	b.n	8000f06 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000efa:	689a      	ldr	r2, [r3, #8]
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	491f      	ldr	r1, [pc, #124]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000f02:	4013      	ands	r3, r2
 8000f04:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d006      	beq.n	8000f20 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f12:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000f14:	68da      	ldr	r2, [r3, #12]
 8000f16:	491a      	ldr	r1, [pc, #104]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60cb      	str	r3, [r1, #12]
 8000f1e:	e006      	b.n	8000f2e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4915      	ldr	r1, [pc, #84]	; (8000f80 <HAL_GPIO_Init+0x2b0>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	3301      	adds	r3, #1
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f47f aed0 	bne.w	8000ce4 <HAL_GPIO_Init+0x14>
  }
}
 8000f44:	bf00      	nop
 8000f46:	372c      	adds	r7, #44	; 0x2c
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	10210000 	.word	0x10210000
 8000f54:	10110000 	.word	0x10110000
 8000f58:	10120000 	.word	0x10120000
 8000f5c:	10310000 	.word	0x10310000
 8000f60:	10320000 	.word	0x10320000
 8000f64:	10220000 	.word	0x10220000
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010000 	.word	0x40010000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	40011400 	.word	0x40011400
 8000f80:	40010400 	.word	0x40010400

08000f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689a      	ldr	r2, [r3, #8]
 8000f94:	887b      	ldrh	r3, [r7, #2]
 8000f96:	4013      	ands	r3, r2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	73fb      	strb	r3, [r7, #15]
 8000fa0:	e001      	b.n	8000fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr

08000fb2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	807b      	strh	r3, [r7, #2]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fc2:	787b      	ldrb	r3, [r7, #1]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc8:	887a      	ldrh	r2, [r7, #2]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fce:	e003      	b.n	8000fd8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	041a      	lsls	r2, r3, #16
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	611a      	str	r2, [r3, #16]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e11f      	b.n	8001236 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fb46 	bl	800069c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2224      	movs	r2, #36	; 0x24
 8001014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0201 	bic.w	r2, r2, #1
 8001026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001048:	f001 fb90 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 800104c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	4a7b      	ldr	r2, [pc, #492]	; (8001240 <HAL_I2C_Init+0x25c>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d807      	bhi.n	8001068 <HAL_I2C_Init+0x84>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4a7a      	ldr	r2, [pc, #488]	; (8001244 <HAL_I2C_Init+0x260>)
 800105c:	4293      	cmp	r3, r2
 800105e:	bf94      	ite	ls
 8001060:	2301      	movls	r3, #1
 8001062:	2300      	movhi	r3, #0
 8001064:	b2db      	uxtb	r3, r3
 8001066:	e006      	b.n	8001076 <HAL_I2C_Init+0x92>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4a77      	ldr	r2, [pc, #476]	; (8001248 <HAL_I2C_Init+0x264>)
 800106c:	4293      	cmp	r3, r2
 800106e:	bf94      	ite	ls
 8001070:	2301      	movls	r3, #1
 8001072:	2300      	movhi	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e0db      	b.n	8001236 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	4a72      	ldr	r2, [pc, #456]	; (800124c <HAL_I2C_Init+0x268>)
 8001082:	fba2 2303 	umull	r2, r3, r2, r3
 8001086:	0c9b      	lsrs	r3, r3, #18
 8001088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	430a      	orrs	r2, r1
 800109c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	4a64      	ldr	r2, [pc, #400]	; (8001240 <HAL_I2C_Init+0x25c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d802      	bhi.n	80010b8 <HAL_I2C_Init+0xd4>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	3301      	adds	r3, #1
 80010b6:	e009      	b.n	80010cc <HAL_I2C_Init+0xe8>
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a63      	ldr	r2, [pc, #396]	; (8001250 <HAL_I2C_Init+0x26c>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	099b      	lsrs	r3, r3, #6
 80010ca:	3301      	adds	r3, #1
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	430b      	orrs	r3, r1
 80010d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4956      	ldr	r1, [pc, #344]	; (8001240 <HAL_I2C_Init+0x25c>)
 80010e8:	428b      	cmp	r3, r1
 80010ea:	d80d      	bhi.n	8001108 <HAL_I2C_Init+0x124>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	1e59      	subs	r1, r3, #1
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80010fa:	3301      	adds	r3, #1
 80010fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001100:	2b04      	cmp	r3, #4
 8001102:	bf38      	it	cc
 8001104:	2304      	movcc	r3, #4
 8001106:	e04f      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d111      	bne.n	8001134 <HAL_I2C_Init+0x150>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	1e58      	subs	r0, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	440b      	add	r3, r1
 800111e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001122:	3301      	adds	r3, #1
 8001124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001128:	2b00      	cmp	r3, #0
 800112a:	bf0c      	ite	eq
 800112c:	2301      	moveq	r3, #1
 800112e:	2300      	movne	r3, #0
 8001130:	b2db      	uxtb	r3, r3
 8001132:	e012      	b.n	800115a <HAL_I2C_Init+0x176>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	1e58      	subs	r0, r3, #1
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6859      	ldr	r1, [r3, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	0099      	lsls	r1, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	fbb0 f3f3 	udiv	r3, r0, r3
 800114a:	3301      	adds	r3, #1
 800114c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_I2C_Init+0x17e>
 800115e:	2301      	movs	r3, #1
 8001160:	e022      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10e      	bne.n	8001188 <HAL_I2C_Init+0x1a4>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1e58      	subs	r0, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6859      	ldr	r1, [r3, #4]
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	fbb0 f3f3 	udiv	r3, r0, r3
 800117c:	3301      	adds	r3, #1
 800117e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001186:	e00f      	b.n	80011a8 <HAL_I2C_Init+0x1c4>
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	1e58      	subs	r0, r3, #1
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	0099      	lsls	r1, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	fbb0 f3f3 	udiv	r3, r0, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69da      	ldr	r2, [r3, #28]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1b      	ldr	r3, [r3, #32]
 80011c2:	431a      	orrs	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	6911      	ldr	r1, [r2, #16]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68d2      	ldr	r2, [r2, #12]
 80011e2:	4311      	orrs	r1, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	430b      	orrs	r3, r1
 80011ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	695a      	ldr	r2, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	431a      	orrs	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0201 	orr.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2220      	movs	r2, #32
 8001222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	000186a0 	.word	0x000186a0
 8001244:	001e847f 	.word	0x001e847f
 8001248:	003d08ff 	.word	0x003d08ff
 800124c:	431bde83 	.word	0x431bde83
 8001250:	10624dd3 	.word	0x10624dd3

08001254 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4603      	mov	r3, r0
 8001264:	817b      	strh	r3, [r7, #10]
 8001266:	460b      	mov	r3, r1
 8001268:	813b      	strh	r3, [r7, #8]
 800126a:	4613      	mov	r3, r2
 800126c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800126e:	f7ff fbad 	bl	80009cc <HAL_GetTick>
 8001272:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b20      	cmp	r3, #32
 800127e:	f040 80d9 	bne.w	8001434 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2319      	movs	r3, #25
 8001288:	2201      	movs	r2, #1
 800128a:	496d      	ldr	r1, [pc, #436]	; (8001440 <HAL_I2C_Mem_Write+0x1ec>)
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 fcbb 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001298:	2302      	movs	r3, #2
 800129a:	e0cc      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <HAL_I2C_Mem_Write+0x56>
 80012a6:	2302      	movs	r3, #2
 80012a8:	e0c5      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2201      	movs	r2, #1
 80012ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0301 	and.w	r3, r3, #1
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d007      	beq.n	80012d0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0201 	orr.w	r2, r2, #1
 80012ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2221      	movs	r2, #33	; 0x21
 80012e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2240      	movs	r2, #64	; 0x40
 80012ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	6a3a      	ldr	r2, [r7, #32]
 80012fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001306:	b29a      	uxth	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_I2C_Mem_Write+0x1f0>)
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001312:	88f8      	ldrh	r0, [r7, #6]
 8001314:	893a      	ldrh	r2, [r7, #8]
 8001316:	8979      	ldrh	r1, [r7, #10]
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	9301      	str	r3, [sp, #4]
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	4603      	mov	r3, r0
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 faf2 	bl	800190c <I2C_RequestMemoryWrite>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d052      	beq.n	80013d4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e081      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001336:	68f8      	ldr	r0, [r7, #12]
 8001338:	f000 fd3c 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00d      	beq.n	800135e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	2b04      	cmp	r3, #4
 8001348:	d107      	bne.n	800135a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001358:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e06b      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	781a      	ldrb	r2, [r3, #0]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136e:	1c5a      	adds	r2, r3, #1
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001378:	3b01      	subs	r3, #1
 800137a:	b29a      	uxth	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	b29a      	uxth	r2, r3
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b04      	cmp	r3, #4
 800139a:	d11b      	bne.n	80013d4 <HAL_I2C_Mem_Write+0x180>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d017      	beq.n	80013d4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	781a      	ldrb	r2, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013be:	3b01      	subs	r3, #1
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3b01      	subs	r3, #1
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d1aa      	bne.n	8001332 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f000 fd28 	bl	8001e36 <I2C_WaitOnBTFFlagUntilTimeout>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00d      	beq.n	8001408 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d107      	bne.n	8001404 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001402:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e016      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2220      	movs	r2, #32
 800141c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001434:	2302      	movs	r3, #2
  }
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	00100002 	.word	0x00100002
 8001444:	ffff0000 	.word	0xffff0000

08001448 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08c      	sub	sp, #48	; 0x30
 800144c:	af02      	add	r7, sp, #8
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4603      	mov	r3, r0
 8001458:	817b      	strh	r3, [r7, #10]
 800145a:	460b      	mov	r3, r1
 800145c:	813b      	strh	r3, [r7, #8]
 800145e:	4613      	mov	r3, r2
 8001460:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001466:	f7ff fab1 	bl	80009cc <HAL_GetTick>
 800146a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b20      	cmp	r3, #32
 8001476:	f040 823d 	bne.w	80018f4 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2319      	movs	r3, #25
 8001480:	2201      	movs	r2, #1
 8001482:	4981      	ldr	r1, [pc, #516]	; (8001688 <HAL_I2C_Mem_Read+0x240>)
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 fbbf 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
 8001492:	e230      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800149a:	2b01      	cmp	r3, #1
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Mem_Read+0x5a>
 800149e:	2302      	movs	r3, #2
 80014a0:	e229      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d007      	beq.n	80014c8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2222      	movs	r2, #34	; 0x22
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	2200      	movs	r2, #0
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80014f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014fe:	b29a      	uxth	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a61      	ldr	r2, [pc, #388]	; (800168c <HAL_I2C_Mem_Read+0x244>)
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800150a:	88f8      	ldrh	r0, [r7, #6]
 800150c:	893a      	ldrh	r2, [r7, #8]
 800150e:	8979      	ldrh	r1, [r7, #10]
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4603      	mov	r3, r0
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fa8c 	bl	8001a38 <I2C_RequestMemoryRead>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e1e5      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800152e:	2b00      	cmp	r3, #0
 8001530:	d113      	bne.n	800155a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e1b9      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155e:	2b01      	cmp	r3, #1
 8001560:	d11d      	bne.n	800159e <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001570:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001574:	2300      	movs	r3, #0
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	61bb      	str	r3, [r7, #24]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800159a:	b662      	cpsie	i
 800159c:	e197      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d11d      	bne.n	80015e2 <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015b6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015de:	b662      	cpsie	i
 80015e0:	e175      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015f0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001608:	e161      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800160e:	2b03      	cmp	r3, #3
 8001610:	f200 811a 	bhi.w	8001848 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001618:	2b01      	cmp	r3, #1
 800161a:	d123      	bne.n	8001664 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800161c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800161e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 fc49 	bl	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e162      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164c:	3b01      	subs	r3, #1
 800164e:	b29a      	uxth	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001662:	e134      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	2b02      	cmp	r3, #2
 800166a:	d150      	bne.n	800170e <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001672:	2200      	movs	r2, #0
 8001674:	4906      	ldr	r1, [pc, #24]	; (8001690 <HAL_I2C_Mem_Read+0x248>)
 8001676:	68f8      	ldr	r0, [r7, #12]
 8001678:	f000 fac6 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d008      	beq.n	8001694 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e137      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
 8001686:	bf00      	nop
 8001688:	00100002 	.word	0x00100002
 800168c:	ffff0000 	.word	0xffff0000
 8001690:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	3b01      	subs	r3, #1
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016d8:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	b2d2      	uxtb	r2, r2
 80016e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	1c5a      	adds	r2, r3, #1
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	3b01      	subs	r3, #1
 8001706:	b29a      	uxth	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800170c:	e0df      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001714:	2200      	movs	r2, #0
 8001716:	497a      	ldr	r1, [pc, #488]	; (8001900 <HAL_I2C_Mem_Read+0x4b8>)
 8001718:	68f8      	ldr	r0, [r7, #12]
 800171a:	f000 fa75 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0e6      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001756:	3b01      	subs	r3, #1
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29a      	uxth	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_I2C_Mem_Read+0x4bc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	4a65      	ldr	r2, [pc, #404]	; (8001908 <HAL_I2C_Mem_Read+0x4c0>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	0a1a      	lsrs	r2, r3, #8
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00da      	lsls	r2, r3, #3
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	3b01      	subs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d117      	bne.n	80017c2 <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2220      	movs	r2, #32
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f043 0220 	orr.w	r2, r3, #32
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80017b4:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e099      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d1da      	bne.n	8001786 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691a      	ldr	r2, [r3, #16]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fc:	3b01      	subs	r3, #1
 80017fe:	b29a      	uxth	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001808:	b29b      	uxth	r3, r3
 800180a:	3b01      	subs	r3, #1
 800180c:	b29a      	uxth	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001812:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001830:	3b01      	subs	r3, #1
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183c:	b29b      	uxth	r3, r3
 800183e:	3b01      	subs	r3, #1
 8001840:	b29a      	uxth	r2, r3
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001846:	e042      	b.n	80018ce <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f000 fb33 	bl	8001eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e04c      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b04      	cmp	r3, #4
 800189a:	d118      	bne.n	80018ce <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	3b01      	subs	r3, #1
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f ae99 	bne.w	800160a <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	e000      	b.n	80018f6 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 80018f4:	2302      	movs	r3, #2
  }
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	00010004 	.word	0x00010004
 8001904:	20000000 	.word	0x20000000
 8001908:	14f8b589 	.word	0x14f8b589

0800190c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	4608      	mov	r0, r1
 8001916:	4611      	mov	r1, r2
 8001918:	461a      	mov	r2, r3
 800191a:	4603      	mov	r3, r0
 800191c:	817b      	strh	r3, [r7, #10]
 800191e:	460b      	mov	r3, r1
 8001920:	813b      	strh	r3, [r7, #8]
 8001922:	4613      	mov	r3, r2
 8001924:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2200      	movs	r2, #0
 800193e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f960 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00d      	beq.n	800196a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800195c:	d103      	bne.n	8001966 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e05f      	b.n	8001a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	461a      	mov	r2, r3
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	492d      	ldr	r1, [pc, #180]	; (8001a34 <I2C_RequestMemoryWrite+0x128>)
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f998 	bl	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e04c      	b.n	8001a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fa02 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d107      	bne.n	80019ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e02b      	b.n	8001a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019d8:	893b      	ldrh	r3, [r7, #8]
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	611a      	str	r2, [r3, #16]
 80019e2:	e021      	b.n	8001a28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	0a1b      	lsrs	r3, r3, #8
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f4:	6a39      	ldr	r1, [r7, #32]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 f9dc 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d00d      	beq.n	8001a1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d107      	bne.n	8001a1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e005      	b.n	8001a2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a1e:	893b      	ldrh	r3, [r7, #8]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	00010002 	.word	0x00010002

08001a38 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b088      	sub	sp, #32
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	817b      	strh	r3, [r7, #10]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	813b      	strh	r3, [r7, #8]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a60:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a70:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f8c2 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00d      	beq.n	8001aa6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d103      	bne.n	8001aa2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e0aa      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001aa6:	897b      	ldrh	r3, [r7, #10]
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ab4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	6a3a      	ldr	r2, [r7, #32]
 8001aba:	4952      	ldr	r1, [pc, #328]	; (8001c04 <I2C_RequestMemoryRead+0x1cc>)
 8001abc:	68f8      	ldr	r0, [r7, #12]
 8001abe:	f000 f8fa 	bl	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e097      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	695b      	ldr	r3, [r3, #20]
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	617b      	str	r3, [r7, #20]
 8001ae0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f000 f964 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00d      	beq.n	8001b0e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d107      	bne.n	8001b0a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b08:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e076      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001b0e:	88fb      	ldrh	r3, [r7, #6]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d105      	bne.n	8001b20 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b14:	893b      	ldrh	r3, [r7, #8]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	611a      	str	r2, [r3, #16]
 8001b1e:	e021      	b.n	8001b64 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001b20:	893b      	ldrh	r3, [r7, #8]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	68f8      	ldr	r0, [r7, #12]
 8001b34:	f000 f93e 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d107      	bne.n	8001b56 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b54:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e050      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001b5a:	893b      	ldrh	r3, [r7, #8]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b66:	6a39      	ldr	r1, [r7, #32]
 8001b68:	68f8      	ldr	r0, [r7, #12]
 8001b6a:	f000 f923 	bl	8001db4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d107      	bne.n	8001b8c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b8a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e035      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f82b 	bl	8001c08 <I2C_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00d      	beq.n	8001bd4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc6:	d103      	bne.n	8001bd0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e013      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	6a3a      	ldr	r2, [r7, #32]
 8001be8:	4906      	ldr	r1, [pc, #24]	; (8001c04 <I2C_RequestMemoryRead+0x1cc>)
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f000 f863 	bl	8001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	00010002 	.word	0x00010002

08001c08 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	4613      	mov	r3, r2
 8001c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c18:	e025      	b.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c20:	d021      	beq.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c22:	f7fe fed3 	bl	80009cc <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d302      	bcc.n	8001c38 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d116      	bne.n	8001c66 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2220      	movs	r2, #32
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	f043 0220 	orr.w	r2, r3, #32
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e023      	b.n	8001cae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0c1b      	lsrs	r3, r3, #16
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d10d      	bne.n	8001c8c <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	e00c      	b.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	43da      	mvns	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4013      	ands	r3, r2
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	bf0c      	ite	eq
 8001c9e:	2301      	moveq	r3, #1
 8001ca0:	2300      	movne	r3, #0
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d0b6      	beq.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	60f8      	str	r0, [r7, #12]
 8001cbe:	60b9      	str	r1, [r7, #8]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc4:	e051      	b.n	8001d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd4:	d123      	bne.n	8001d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f043 0204 	orr.w	r2, r3, #4
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e046      	b.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d24:	d021      	beq.n	8001d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d26:	f7fe fe51 	bl	80009cc <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	d302      	bcc.n	8001d3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d116      	bne.n	8001d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e020      	b.n	8001dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	0c1b      	lsrs	r3, r3, #16
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10c      	bne.n	8001d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	e00b      	b.n	8001da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	43da      	mvns	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf14      	ite	ne
 8001da0:	2301      	movne	r3, #1
 8001da2:	2300      	moveq	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d18d      	bne.n	8001cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dc0:	e02d      	b.n	8001e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f000 f8ce 	bl	8001f64 <I2C_IsAcknowledgeFailed>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e02d      	b.n	8001e2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d021      	beq.n	8001e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dda:	f7fe fdf7 	bl	80009cc <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	68ba      	ldr	r2, [r7, #8]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d302      	bcc.n	8001df0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d116      	bne.n	8001e1e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f043 0220 	orr.w	r2, r3, #32
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e007      	b.n	8001e2e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d1ca      	bne.n	8001dc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e42:	e02d      	b.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f88d 	bl	8001f64 <I2C_IsAcknowledgeFailed>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e02d      	b.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5a:	d021      	beq.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5c:	f7fe fdb6 	bl	80009cc <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d302      	bcc.n	8001e72 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d116      	bne.n	8001ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f043 0220 	orr.w	r2, r3, #32
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e007      	b.n	8001eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d1ca      	bne.n	8001e44 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ec4:	e042      	b.n	8001f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0310 	and.w	r3, r3, #16
 8001ed0:	2b10      	cmp	r3, #16
 8001ed2:	d119      	bne.n	8001f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0210 	mvn.w	r2, #16
 8001edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e029      	b.n	8001f5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f08:	f7fe fd60 	bl	80009cc <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d302      	bcc.n	8001f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d116      	bne.n	8001f4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2200      	movs	r2, #0
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2220      	movs	r2, #32
 8001f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f56:	2b40      	cmp	r3, #64	; 0x40
 8001f58:	d1b5      	bne.n	8001ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	695b      	ldr	r3, [r3, #20]
 8001f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7a:	d11b      	bne.n	8001fb4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	f043 0204 	orr.w	r2, r3, #4
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e26c      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b92      	ldr	r3, [pc, #584]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00c      	beq.n	8002006 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fec:	4b8f      	ldr	r3, [pc, #572]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
 8001ff8:	4b8c      	ldr	r3, [pc, #560]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b89      	ldr	r3, [pc, #548]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <HAL_RCC_OscConfig+0x12c>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e246      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x76>
 8002028:	4b80      	ldr	r3, [pc, #512]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a7f      	ldr	r2, [pc, #508]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e02e      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x98>
 800203e:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7a      	ldr	r2, [pc, #488]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b78      	ldr	r3, [pc, #480]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a77      	ldr	r2, [pc, #476]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xbc>
 8002062:	4b72      	ldr	r3, [pc, #456]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a71      	ldr	r2, [pc, #452]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b6f      	ldr	r3, [pc, #444]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6e      	ldr	r2, [pc, #440]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xd4>
 800207c:	4b6b      	ldr	r3, [pc, #428]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6a      	ldr	r2, [pc, #424]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b68      	ldr	r3, [pc, #416]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a67      	ldr	r2, [pc, #412]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002092:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7fe fc96 	bl	80009cc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7fe fc92 	bl	80009cc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1fa      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe4>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe fc82 	bl	80009cc <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fc7e 	bl	80009cc <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	; 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1e6      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x10c>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x18c>
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b43      	ldr	r3, [pc, #268]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x176>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1ba      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4939      	ldr	r1, [pc, #228]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e03a      	b.n	80021c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b36      	ldr	r3, [pc, #216]	; (8002230 <HAL_RCC_OscConfig+0x270>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7fe fc37 	bl	80009cc <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe fc33 	bl	80009cc <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e19b      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4927      	ldr	r1, [pc, #156]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	4b26      	ldr	r3, [pc, #152]	; (8002230 <HAL_RCC_OscConfig+0x270>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fc16 	bl	80009cc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7fe fc12 	bl	80009cc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e17a      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	4b1d      	ldr	r3, [pc, #116]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d03a      	beq.n	8002244 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d019      	beq.n	800220a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b17      	ldr	r3, [pc, #92]	; (8002234 <HAL_RCC_OscConfig+0x274>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021dc:	f7fe fbf6 	bl	80009cc <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe fbf2 	bl	80009cc <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e15a      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_RCC_OscConfig+0x26c>)
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002202:	2001      	movs	r0, #1
 8002204:	f000 fb0a 	bl	800281c <RCC_Delay>
 8002208:	e01c      	b.n	8002244 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_OscConfig+0x274>)
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002210:	f7fe fbdc 	bl	80009cc <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002216:	e00f      	b.n	8002238 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002218:	f7fe fbd8 	bl	80009cc <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d908      	bls.n	8002238 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e140      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000
 8002230:	42420000 	.word	0x42420000
 8002234:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002238:	4b9e      	ldr	r3, [pc, #632]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e9      	bne.n	8002218 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0304 	and.w	r3, r3, #4
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a6 	beq.w	800239e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002256:	4b97      	ldr	r3, [pc, #604]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10d      	bne.n	800227e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b94      	ldr	r3, [pc, #592]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	4a93      	ldr	r2, [pc, #588]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226c:	61d3      	str	r3, [r2, #28]
 800226e:	4b91      	ldr	r3, [pc, #580]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b8e      	ldr	r3, [pc, #568]	; (80024b8 <HAL_RCC_OscConfig+0x4f8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b8b      	ldr	r3, [pc, #556]	; (80024b8 <HAL_RCC_OscConfig+0x4f8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a8a      	ldr	r2, [pc, #552]	; (80024b8 <HAL_RCC_OscConfig+0x4f8>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7fe fb99 	bl	80009cc <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe fb95 	bl	80009cc <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0fd      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b81      	ldr	r3, [pc, #516]	; (80024b8 <HAL_RCC_OscConfig+0x4f8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x312>
 80022c4:	4b7b      	ldr	r3, [pc, #492]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a7a      	ldr	r2, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	e02d      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x334>
 80022da:	4b76      	ldr	r3, [pc, #472]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a75      	ldr	r2, [pc, #468]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	4b73      	ldr	r3, [pc, #460]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a72      	ldr	r2, [pc, #456]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	f023 0304 	bic.w	r3, r3, #4
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	e01c      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d10c      	bne.n	8002316 <HAL_RCC_OscConfig+0x356>
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4a6c      	ldr	r2, [pc, #432]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	f043 0304 	orr.w	r3, r3, #4
 8002306:	6213      	str	r3, [r2, #32]
 8002308:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a69      	ldr	r2, [pc, #420]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	e00b      	b.n	800232e <HAL_RCC_OscConfig+0x36e>
 8002316:	4b67      	ldr	r3, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	4b64      	ldr	r3, [pc, #400]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a63      	ldr	r2, [pc, #396]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	f023 0304 	bic.w	r3, r3, #4
 800232c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d015      	beq.n	8002362 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002336:	f7fe fb49 	bl	80009cc <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233c:	e00a      	b.n	8002354 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233e:	f7fe fb45 	bl	80009cc <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	f241 3288 	movw	r2, #5000	; 0x1388
 800234c:	4293      	cmp	r3, r2
 800234e:	d901      	bls.n	8002354 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002350:	2303      	movs	r3, #3
 8002352:	e0ab      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002354:	4b57      	ldr	r3, [pc, #348]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ee      	beq.n	800233e <HAL_RCC_OscConfig+0x37e>
 8002360:	e014      	b.n	800238c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002362:	f7fe fb33 	bl	80009cc <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fb2f 	bl	80009cc <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e095      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002380:	4b4c      	ldr	r3, [pc, #304]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ee      	bne.n	800236a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800238c:	7dfb      	ldrb	r3, [r7, #23]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d105      	bne.n	800239e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002392:	4b48      	ldr	r3, [pc, #288]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	4a47      	ldr	r2, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002398:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 8081 	beq.w	80024aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023a8:	4b42      	ldr	r3, [pc, #264]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d061      	beq.n	8002478 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d146      	bne.n	800244a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x4fc>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fb03 	bl	80009cc <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ca:	f7fe faff 	bl	80009cc <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e067      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023dc:	4b35      	ldr	r3, [pc, #212]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1f0      	bne.n	80023ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f0:	d108      	bne.n	8002404 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	492d      	ldr	r1, [pc, #180]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a19      	ldr	r1, [r3, #32]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	430b      	orrs	r3, r1
 8002416:	4927      	ldr	r1, [pc, #156]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	4313      	orrs	r3, r2
 800241a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x4fc>)
 800241e:	2201      	movs	r2, #1
 8002420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe fad3 	bl	80009cc <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242a:	f7fe facf 	bl	80009cc <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e037      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0f0      	beq.n	800242a <HAL_RCC_OscConfig+0x46a>
 8002448:	e02f      	b.n	80024aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_RCC_OscConfig+0x4fc>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002450:	f7fe fabc 	bl	80009cc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002458:	f7fe fab8 	bl	80009cc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e020      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800246a:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x498>
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e013      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x4f4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	429a      	cmp	r2, r3
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80024aa:	2300      	movs	r3, #0
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3718      	adds	r7, #24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
 80024bc:	42420060 	.word	0x42420060

080024c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0d0      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d4:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d910      	bls.n	8002504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4965      	ldr	r1, [pc, #404]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b63      	ldr	r3, [pc, #396]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0b8      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800251c:	4b59      	ldr	r3, [pc, #356]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a58      	ldr	r2, [pc, #352]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002526:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d005      	beq.n	8002540 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002534:	4b53      	ldr	r3, [pc, #332]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a52      	ldr	r2, [pc, #328]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800253a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800253e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002540:	4b50      	ldr	r3, [pc, #320]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	494d      	ldr	r1, [pc, #308]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d040      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d115      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e07f      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d107      	bne.n	800258e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257e:	4b41      	ldr	r3, [pc, #260]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e073      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 0203 	bic.w	r2, r3, #3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	4936      	ldr	r1, [pc, #216]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025b0:	f7fe fa0c 	bl	80009cc <HAL_GetTick>
 80025b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	e00a      	b.n	80025ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b8:	f7fe fa08 	bl	80009cc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e053      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f003 020c 	and.w	r2, r3, #12
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	429a      	cmp	r2, r3
 80025de:	d1eb      	bne.n	80025b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	683a      	ldr	r2, [r7, #0]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d210      	bcs.n	8002610 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f023 0207 	bic.w	r2, r3, #7
 80025f6:	4922      	ldr	r1, [pc, #136]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	429a      	cmp	r2, r3
 800260a:	d001      	beq.n	8002610 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e032      	b.n	8002676 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4916      	ldr	r1, [pc, #88]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800263a:	4b12      	ldr	r3, [pc, #72]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	490e      	ldr	r1, [pc, #56]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800264e:	f000 f821 	bl	8002694 <HAL_RCC_GetSysClockFreq>
 8002652:	4601      	mov	r1, r0
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	091b      	lsrs	r3, r3, #4
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	4a0a      	ldr	r2, [pc, #40]	; (8002688 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	5cd3      	ldrb	r3, [r2, r3]
 8002662:	fa21 f303 	lsr.w	r3, r1, r3
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <HAL_RCC_ClockConfig+0x1cc>)
 8002668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_ClockConfig+0x1d0>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7fe f8cc 	bl	800080c <HAL_InitTick>

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40022000 	.word	0x40022000
 8002684:	40021000 	.word	0x40021000
 8002688:	080071b4 	.word	0x080071b4
 800268c:	20000000 	.word	0x20000000
 8002690:	20000004 	.word	0x20000004

08002694 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002694:	b490      	push	{r4, r7}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800269a:	4b2a      	ldr	r3, [pc, #168]	; (8002744 <HAL_RCC_GetSysClockFreq+0xb0>)
 800269c:	1d3c      	adds	r4, r7, #4
 800269e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x40>
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x46>
 80026d2:	e02d      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d4:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d6:	623b      	str	r3, [r7, #32]
      break;
 80026d8:	e02d      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026e6:	4413      	add	r3, r2
 80026e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d013      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026f8:	4b14      	ldr	r3, [pc, #80]	; (800274c <HAL_RCC_GetSysClockFreq+0xb8>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	0c5b      	lsrs	r3, r3, #17
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002706:	4413      	add	r3, r2
 8002708:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800270c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	4a0f      	ldr	r2, [pc, #60]	; (8002750 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002712:	fb02 f203 	mul.w	r2, r2, r3
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	fbb2 f3f3 	udiv	r3, r2, r3
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	e004      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002724:	fb02 f303 	mul.w	r3, r2, r3
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	623b      	str	r3, [r7, #32]
      break;
 800272e:	e002      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002732:	623b      	str	r3, [r7, #32]
      break;
 8002734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002736:	6a3b      	ldr	r3, [r7, #32]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3728      	adds	r7, #40	; 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bc90      	pop	{r4, r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	080070c8 	.word	0x080070c8
 8002748:	080070d8 	.word	0x080070d8
 800274c:	40021000 	.word	0x40021000
 8002750:	007a1200 	.word	0x007a1200
 8002754:	003d0900 	.word	0x003d0900

08002758 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800275c:	4b02      	ldr	r3, [pc, #8]	; (8002768 <HAL_RCC_GetHCLKFreq+0x10>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr
 8002768:	20000000 	.word	0x20000000

0800276c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002770:	f7ff fff2 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8002774:	4601      	mov	r1, r0
 8002776:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	0a1b      	lsrs	r3, r3, #8
 800277c:	f003 0307 	and.w	r3, r3, #7
 8002780:	4a03      	ldr	r2, [pc, #12]	; (8002790 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002782:	5cd3      	ldrb	r3, [r2, r3]
 8002784:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002788:	4618      	mov	r0, r3
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40021000 	.word	0x40021000
 8002790:	080071c4 	.word	0x080071c4

08002794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002798:	f7ff ffde 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 800279c:	4601      	mov	r1, r0
 800279e:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0adb      	lsrs	r3, r3, #11
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027aa:	5cd3      	ldrb	r3, [r2, r3]
 80027ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	080071c4 	.word	0x080071c4

080027bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	220f      	movs	r2, #15
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_GetClockConfig+0x58>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027d8:	4b0e      	ldr	r3, [pc, #56]	; (8002814 <HAL_RCC_GetClockConfig+0x58>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_GetClockConfig+0x58>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80027f0:	4b08      	ldr	r3, [pc, #32]	; (8002814 <HAL_RCC_GetClockConfig+0x58>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	08db      	lsrs	r3, r3, #3
 80027f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCC_GetClockConfig+0x5c>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0207 	and.w	r2, r3, #7
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	bc80      	pop	{r7}
 8002812:	4770      	bx	lr
 8002814:	40021000 	.word	0x40021000
 8002818:	40022000 	.word	0x40022000

0800281c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <RCC_Delay+0x34>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <RCC_Delay+0x38>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	0a5b      	lsrs	r3, r3, #9
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002838:	bf00      	nop
  }
  while (Delay --);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e5a      	subs	r2, r3, #1
 800283e:	60fa      	str	r2, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f9      	bne.n	8002838 <RCC_Delay+0x1c>
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000
 8002854:	10624dd3 	.word	0x10624dd3

08002858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e041      	b.n	80028ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d106      	bne.n	8002884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fd ff4c 	bl	800071c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f000 fa64 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d001      	beq.n	8002910 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e03a      	b.n	8002986 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2202      	movs	r2, #2
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a18      	ldr	r2, [pc, #96]	; (8002990 <HAL_TIM_Base_Start_IT+0x98>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x58>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d009      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x58>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_TIM_Base_Start_IT+0x9c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x58>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_TIM_Base_Start_IT+0xa0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800

0800299c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d122      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f003 0302 	and.w	r3, r3, #2
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d11b      	bne.n	80029f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0202 	mvn.w	r2, #2
 80029c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9a4 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f997 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f9a6 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d122      	bne.n	8002a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d11b      	bne.n	8002a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f06f 0204 	mvn.w	r2, #4
 8002a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2202      	movs	r2, #2
 8002a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f97a 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002a38:	e005      	b.n	8002a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f96d 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 f97c 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d122      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0308 	and.w	r3, r3, #8
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d11b      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f06f 0208 	mvn.w	r2, #8
 8002a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2204      	movs	r2, #4
 8002a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f950 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002a8c:	e005      	b.n	8002a9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f943 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f952 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b10      	cmp	r3, #16
 8002aac:	d122      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b10      	cmp	r3, #16
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0210 	mvn.w	r2, #16
 8002ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2208      	movs	r2, #8
 8002aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	69db      	ldr	r3, [r3, #28]
 8002ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f926 	bl	8002d2c <HAL_TIM_IC_CaptureCallback>
 8002ae0:	e005      	b.n	8002aee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f919 	bl	8002d1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f928 	bl	8002d3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10e      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d107      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f06f 0201 	mvn.w	r2, #1
 8002b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fd fd74 	bl	8000608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2a:	2b80      	cmp	r3, #128	; 0x80
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b38:	2b80      	cmp	r3, #128	; 0x80
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa6b 	bl	8003022 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8ec 	bl	8002d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d10e      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d107      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f06f 0220 	mvn.w	r2, #32
 8002b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa36 	bl	8003010 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_ConfigClockSource+0x18>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0a6      	b.n	8002d12 <HAL_TIM_ConfigClockSource+0x166>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2202      	movs	r2, #2
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d067      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x120>
 8002bfc:	2b40      	cmp	r3, #64	; 0x40
 8002bfe:	d80b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x6c>
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d073      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0x140>
 8002c04:	2b10      	cmp	r3, #16
 8002c06:	d802      	bhi.n	8002c0e <HAL_TIM_ConfigClockSource+0x62>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d06f      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c0c:	e078      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c0e:	2b20      	cmp	r3, #32
 8002c10:	d06c      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0x140>
 8002c12:	2b30      	cmp	r3, #48	; 0x30
 8002c14:	d06a      	beq.n	8002cec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c16:	e073      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c18:	2b70      	cmp	r3, #112	; 0x70
 8002c1a:	d00d      	beq.n	8002c38 <HAL_TIM_ConfigClockSource+0x8c>
 8002c1c:	2b70      	cmp	r3, #112	; 0x70
 8002c1e:	d804      	bhi.n	8002c2a <HAL_TIM_ConfigClockSource+0x7e>
 8002c20:	2b50      	cmp	r3, #80	; 0x50
 8002c22:	d033      	beq.n	8002c8c <HAL_TIM_ConfigClockSource+0xe0>
 8002c24:	2b60      	cmp	r3, #96	; 0x60
 8002c26:	d041      	beq.n	8002cac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002c28:	e06a      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2e:	d066      	beq.n	8002cfe <HAL_TIM_ConfigClockSource+0x152>
 8002c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c34:	d017      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002c36:	e063      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6818      	ldr	r0, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6899      	ldr	r1, [r3, #8]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f000 f965 	bl	8002f16 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	609a      	str	r2, [r3, #8]
      break;
 8002c64:	e04c      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6899      	ldr	r1, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f000 f94e 	bl	8002f16 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c88:	609a      	str	r2, [r3, #8]
      break;
 8002c8a:	e039      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6818      	ldr	r0, [r3, #0]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f000 f8c5 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2150      	movs	r1, #80	; 0x50
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f91c 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002caa:	e029      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	6859      	ldr	r1, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f000 f8e3 	bl	8002e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2160      	movs	r1, #96	; 0x60
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 f90c 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002cca:	e019      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6859      	ldr	r1, [r3, #4]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	f000 f8a5 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f8fc 	bl	8002ee2 <TIM_ITRx_SetConfig>
      break;
 8002cea:	e009      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	f000 f8f3 	bl	8002ee2 <TIM_ITRx_SetConfig>
        break;
 8002cfc:	e000      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002cfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr

08002d3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
	...

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a29      	ldr	r2, [pc, #164]	; (8002e1c <TIM_Base_SetConfig+0xb8>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <TIM_Base_SetConfig+0x30>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d007      	beq.n	8002d94 <TIM_Base_SetConfig+0x30>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a26      	ldr	r2, [pc, #152]	; (8002e20 <TIM_Base_SetConfig+0xbc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_Base_SetConfig+0x30>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <TIM_Base_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d108      	bne.n	8002da6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a1c      	ldr	r2, [pc, #112]	; (8002e1c <TIM_Base_SetConfig+0xb8>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x62>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x62>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a19      	ldr	r2, [pc, #100]	; (8002e20 <TIM_Base_SetConfig+0xbc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x62>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a18      	ldr	r2, [pc, #96]	; (8002e24 <TIM_Base_SetConfig+0xc0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a07      	ldr	r2, [pc, #28]	; (8002e1c <TIM_Base_SetConfig+0xb8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr
 8002e1c:	40012c00 	.word	0x40012c00
 8002e20:	40000400 	.word	0x40000400
 8002e24:	40000800 	.word	0x40000800

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f023 0201 	bic.w	r2, r3, #1
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f023 030a 	bic.w	r3, r3, #10
 8002e64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	bf00      	nop
 8002e7c:	371c      	adds	r7, #28
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	f023 0210 	bic.w	r2, r3, #16
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002eae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	031b      	lsls	r3, r3, #12
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ec0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	621a      	str	r2, [r3, #32]
}
 8002ed8:	bf00      	nop
 8002eda:	371c      	adds	r7, #28
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
 8002eea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	f043 0307 	orr.w	r3, r3, #7
 8002f04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	609a      	str	r2, [r3, #8]
}
 8002f0c:	bf00      	nop
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bc80      	pop	{r7}
 8002f14:	4770      	bx	lr

08002f16 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b087      	sub	sp, #28
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	60f8      	str	r0, [r7, #12]
 8002f1e:	60b9      	str	r1, [r7, #8]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f30:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	021a      	lsls	r2, r3, #8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	609a      	str	r2, [r3, #8]
}
 8002f4a:	bf00      	nop
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d101      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f68:	2302      	movs	r3, #2
 8002f6a:	e046      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a16      	ldr	r2, [pc, #88]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d009      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800

08003010 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e03f      	b.n	80030c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d106      	bne.n	8003060 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fb82 	bl	8000764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2224      	movs	r2, #36	; 0x24
 8003064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003076:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fa5d 	bl	8003538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800308c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800309c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
	...

080030d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10d      	bne.n	8003122 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0320 	and.w	r3, r3, #32
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f98b 	bl	8003436 <UART_Receive_IT>
      return;
 8003120:	e0d1      	b.n	80032c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 80b0 	beq.w	800328a <HAL_UART_IRQHandler+0x1ba>
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_UART_IRQHandler+0x70>
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80a5 	beq.w	800328a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003158:	f043 0201 	orr.w	r2, r3, #1
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003178:	f043 0202 	orr.w	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00f      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_UART_IRQHandler+0xee>
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	f043 0208 	orr.w	r2, r3, #8
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d078      	beq.n	80032c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_UART_IRQHandler+0x11c>
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f925 	bl	8003436 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d102      	bne.n	8003214 <HAL_UART_IRQHandler+0x144>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d031      	beq.n	8003278 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f876 	bl	8003306 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d023      	beq.n	8003270 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003236:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003244:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_UART_IRQHandler+0x1fc>)
 8003246:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd fcc9 	bl	8000be4 <HAL_DMA_Abort_IT>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d016      	beq.n	8003286 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003262:	4610      	mov	r0, r2
 8003264:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003266:	e00e      	b.n	8003286 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 f843 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326e:	e00a      	b.n	8003286 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 f83f 	bl	80032f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	e006      	b.n	8003286 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f000 f83b 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003284:	e01e      	b.n	80032c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003286:	bf00      	nop
    return;
 8003288:	e01c      	b.n	80032c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003290:	2b00      	cmp	r3, #0
 8003292:	d008      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1d6>
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f862 	bl	8003368 <UART_Transmit_IT>
    return;
 80032a4:	e00f      	b.n	80032c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_UART_IRQHandler+0x1f6>
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f8a3 	bl	8003406 <UART_EndTransmit_IT>
    return;
 80032c0:	bf00      	nop
 80032c2:	e000      	b.n	80032c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80032c4:	bf00      	nop
  }
}
 80032c6:	3720      	adds	r7, #32
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	08003341 	.word	0x08003341

080032d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr

080032e2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc80      	pop	{r7}
 80032f2:	4770      	bx	lr

080032f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	bc80      	pop	{r7}
 8003304:	4770      	bx	lr

08003306 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800331c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695a      	ldr	r2, [r3, #20]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ffca 	bl	80032f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003360:	bf00      	nop
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b21      	cmp	r3, #33	; 0x21
 800337a:	d13e      	bne.n	80033fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003384:	d114      	bne.n	80033b0 <UART_Transmit_IT+0x48>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d110      	bne.n	80033b0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	621a      	str	r2, [r3, #32]
 80033ae:	e008      	b.n	80033c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a1b      	ldr	r3, [r3, #32]
 80033b4:	1c59      	adds	r1, r3, #1
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6211      	str	r1, [r2, #32]
 80033ba:	781a      	ldrb	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	4619      	mov	r1, r3
 80033d0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10f      	bne.n	80033f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e000      	b.n	80033fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033fa:	2302      	movs	r3, #2
  }
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr

08003406 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800341c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7ff ff52 	bl	80032d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b084      	sub	sp, #16
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b22      	cmp	r3, #34	; 0x22
 8003448:	d170      	bne.n	800352c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d117      	bne.n	8003484 <UART_Receive_IT+0x4e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d113      	bne.n	8003484 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800345c:	2300      	movs	r3, #0
 800345e:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003464:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b29b      	uxth	r3, r3
 800346e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003472:	b29a      	uxth	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347c:	1c9a      	adds	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	629a      	str	r2, [r3, #40]	; 0x28
 8003482:	e026      	b.n	80034d2 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	d007      	beq.n	80034a8 <UART_Receive_IT+0x72>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <UART_Receive_IT+0x80>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e008      	b.n	80034c8 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3b01      	subs	r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	4619      	mov	r1, r3
 80034e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d120      	bne.n	8003528 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0220 	bic.w	r2, r2, #32
 80034f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0201 	bic.w	r2, r2, #1
 8003514:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7ff fedf 	bl	80032e2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e002      	b.n	800352e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003528:	2300      	movs	r3, #0
 800352a:	e000      	b.n	800352e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
	...

08003538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003572:	f023 030c 	bic.w	r3, r3, #12
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	68b9      	ldr	r1, [r7, #8]
 800357c:	430b      	orrs	r3, r1
 800357e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a2c      	ldr	r2, [pc, #176]	; (800364c <UART_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80035a0:	f7ff f8f8 	bl	8002794 <HAL_RCC_GetPCLK2Freq>
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	e002      	b.n	80035ae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80035a8:	f7ff f8e0 	bl	800276c <HAL_RCC_GetPCLK1Freq>
 80035ac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009a      	lsls	r2, r3, #2
 80035b8:	441a      	add	r2, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <UART_SetConfig+0x118>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	0119      	lsls	r1, r3, #4
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4613      	mov	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	009a      	lsls	r2, r3, #2
 80035d8:	441a      	add	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035e4:	4b1a      	ldr	r3, [pc, #104]	; (8003650 <UART_SetConfig+0x118>)
 80035e6:	fba3 0302 	umull	r0, r3, r3, r2
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2064      	movs	r0, #100	; 0x64
 80035ee:	fb00 f303 	mul.w	r3, r0, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	3332      	adds	r3, #50	; 0x32
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <UART_SetConfig+0x118>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003604:	4419      	add	r1, r3
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	009a      	lsls	r2, r3, #2
 8003610:	441a      	add	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fbb2 f2f3 	udiv	r2, r2, r3
 800361c:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <UART_SetConfig+0x118>)
 800361e:	fba3 0302 	umull	r0, r3, r3, r2
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2064      	movs	r0, #100	; 0x64
 8003626:	fb00 f303 	mul.w	r3, r0, r3
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	3332      	adds	r3, #50	; 0x32
 8003630:	4a07      	ldr	r2, [pc, #28]	; (8003650 <UART_SetConfig+0x118>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	f003 020f 	and.w	r2, r3, #15
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	440a      	add	r2, r1
 8003642:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003644:	bf00      	nop
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013800 	.word	0x40013800
 8003650:	51eb851f 	.word	0x51eb851f

08003654 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365a:	f3ef 8305 	mrs	r3, IPSR
 800365e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003660:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	607b      	str	r3, [r7, #4]
  return(result);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <osKernelInitialize+0x32>
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <osKernelInitialize+0x60>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800367a:	f3ef 8311 	mrs	r3, BASEPRI
 800367e:	603b      	str	r3, [r7, #0]
  return(result);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003686:	f06f 0305 	mvn.w	r3, #5
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	e00c      	b.n	80036a8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <osKernelInitialize+0x60>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d105      	bne.n	80036a2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003696:	4b07      	ldr	r3, [pc, #28]	; (80036b4 <osKernelInitialize+0x60>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800369c:	2300      	movs	r3, #0
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	e002      	b.n	80036a8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80036a2:	f04f 33ff 	mov.w	r3, #4294967295
 80036a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80036a8:	68fb      	ldr	r3, [r7, #12]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	20000030 	.word	0x20000030

080036b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036be:	f3ef 8305 	mrs	r3, IPSR
 80036c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80036c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10f      	bne.n	80036ea <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ca:	f3ef 8310 	mrs	r3, PRIMASK
 80036ce:	607b      	str	r3, [r7, #4]
  return(result);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <osKernelStart+0x32>
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <osKernelStart+0x64>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d109      	bne.n	80036f2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036de:	f3ef 8311 	mrs	r3, BASEPRI
 80036e2:	603b      	str	r3, [r7, #0]
  return(result);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80036ea:	f06f 0305 	mvn.w	r3, #5
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e00e      	b.n	8003710 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <osKernelStart+0x64>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d107      	bne.n	800370a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <osKernelStart+0x64>)
 80036fc:	2202      	movs	r2, #2
 80036fe:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003700:	f001 fa8a 	bl	8004c18 <vTaskStartScheduler>
      stat = osOK;
 8003704:	2300      	movs	r3, #0
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	e002      	b.n	8003710 <osKernelStart+0x58>
    } else {
      stat = osError;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000030 	.word	0x20000030

08003720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003720:	b580      	push	{r7, lr}
 8003722:	b092      	sub	sp, #72	; 0x48
 8003724:	af04      	add	r7, sp, #16
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003730:	f3ef 8305 	mrs	r3, IPSR
 8003734:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003738:	2b00      	cmp	r3, #0
 800373a:	f040 8094 	bne.w	8003866 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373e:	f3ef 8310 	mrs	r3, PRIMASK
 8003742:	623b      	str	r3, [r7, #32]
  return(result);
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f040 808d 	bne.w	8003866 <osThreadNew+0x146>
 800374c:	4b48      	ldr	r3, [pc, #288]	; (8003870 <osThreadNew+0x150>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d106      	bne.n	8003762 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003754:	f3ef 8311 	mrs	r3, BASEPRI
 8003758:	61fb      	str	r3, [r7, #28]
  return(result);
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	2b00      	cmp	r3, #0
 800375e:	f040 8082 	bne.w	8003866 <osThreadNew+0x146>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d07e      	beq.n	8003866 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800376c:	2318      	movs	r3, #24
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003770:	2300      	movs	r3, #0
 8003772:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003774:	f107 031b 	add.w	r3, r7, #27
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800377a:	f04f 33ff 	mov.w	r3, #4294967295
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d045      	beq.n	8003812 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <osThreadNew+0x74>
        name = attr->name;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <osThreadNew+0x9a>
 80037a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037aa:	2b38      	cmp	r3, #56	; 0x38
 80037ac:	d805      	bhi.n	80037ba <osThreadNew+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <osThreadNew+0x9e>
        return (NULL);
 80037ba:	2300      	movs	r3, #0
 80037bc:	e054      	b.n	8003868 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <osThreadNew+0xd4>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b5b      	cmp	r3, #91	; 0x5b
 80037dc:	d90a      	bls.n	80037f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d006      	beq.n	80037f4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <osThreadNew+0xd4>
        mem = 1;
 80037ee:	2301      	movs	r3, #1
 80037f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037f2:	e010      	b.n	8003816 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10c      	bne.n	8003816 <osThreadNew+0xf6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d108      	bne.n	8003816 <osThreadNew+0xf6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d104      	bne.n	8003816 <osThreadNew+0xf6>
          mem = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003810:	e001      	b.n	8003816 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003812:	2300      	movs	r3, #0
 8003814:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	2b01      	cmp	r3, #1
 800381a:	d110      	bne.n	800383e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003824:	9202      	str	r2, [sp, #8]
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	9300      	str	r3, [sp, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003830:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	f001 f828 	bl	8004888 <xTaskCreateStatic>
 8003838:	4603      	mov	r3, r0
 800383a:	617b      	str	r3, [r7, #20]
 800383c:	e013      	b.n	8003866 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d110      	bne.n	8003866 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	b29a      	uxth	r2, r3
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f001 f86f 	bl	800493a <xTaskCreate>
 800385c:	4603      	mov	r3, r0
 800385e:	2b01      	cmp	r3, #1
 8003860:	d001      	beq.n	8003866 <osThreadNew+0x146>
          hTask = NULL;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003866:	697b      	ldr	r3, [r7, #20]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3738      	adds	r7, #56	; 0x38
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000030 	.word	0x20000030

08003874 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387c:	f3ef 8305 	mrs	r3, IPSR
 8003880:	613b      	str	r3, [r7, #16]
  return(result);
 8003882:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10f      	bne.n	80038a8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003888:	f3ef 8310 	mrs	r3, PRIMASK
 800388c:	60fb      	str	r3, [r7, #12]
  return(result);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d109      	bne.n	80038a8 <osDelay+0x34>
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <osDelay+0x58>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d109      	bne.n	80038b0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800389c:	f3ef 8311 	mrs	r3, BASEPRI
 80038a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <osDelay+0x3c>
    stat = osErrorISR;
 80038a8:	f06f 0305 	mvn.w	r3, #5
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e007      	b.n	80038c0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f001 f978 	bl	8004bb0 <vTaskDelay>
    }
  }

  return (stat);
 80038c0:	697b      	ldr	r3, [r7, #20]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000030 	.word	0x20000030

080038d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	; 0x30
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80038dc:	2300      	movs	r3, #0
 80038de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e0:	f3ef 8305 	mrs	r3, IPSR
 80038e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80038e6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d170      	bne.n	80039ce <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ec:	f3ef 8310 	mrs	r3, PRIMASK
 80038f0:	617b      	str	r3, [r7, #20]
  return(result);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d16a      	bne.n	80039ce <osMessageQueueNew+0xfe>
 80038f8:	4b37      	ldr	r3, [pc, #220]	; (80039d8 <osMessageQueueNew+0x108>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d105      	bne.n	800390c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003900:	f3ef 8311 	mrs	r3, BASEPRI
 8003904:	613b      	str	r3, [r7, #16]
  return(result);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d160      	bne.n	80039ce <osMessageQueueNew+0xfe>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d05d      	beq.n	80039ce <osMessageQueueNew+0xfe>
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d05a      	beq.n	80039ce <osMessageQueueNew+0xfe>
    mem = -1;
 8003918:	f04f 33ff 	mov.w	r3, #4294967295
 800391c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d029      	beq.n	8003978 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d012      	beq.n	8003952 <osMessageQueueNew+0x82>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2b4f      	cmp	r3, #79	; 0x4f
 8003932:	d90e      	bls.n	8003952 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	68b9      	ldr	r1, [r7, #8]
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	429a      	cmp	r2, r3
 800394a:	d302      	bcc.n	8003952 <osMessageQueueNew+0x82>
        mem = 1;
 800394c:	2301      	movs	r3, #1
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	e014      	b.n	800397c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d110      	bne.n	800397c <osMessageQueueNew+0xac>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10c      	bne.n	800397c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003966:	2b00      	cmp	r3, #0
 8003968:	d108      	bne.n	800397c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <osMessageQueueNew+0xac>
          mem = 0;
 8003972:	2300      	movs	r3, #0
 8003974:	623b      	str	r3, [r7, #32]
 8003976:	e001      	b.n	800397c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10c      	bne.n	800399c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6899      	ldr	r1, [r3, #8]
 800398a:	2300      	movs	r3, #0
 800398c:	9300      	str	r3, [sp, #0]
 800398e:	460b      	mov	r3, r1
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 fa52 	bl	8003e3c <xQueueGenericCreateStatic>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24
 800399a:	e008      	b.n	80039ae <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 80039a2:	2200      	movs	r2, #0
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 faba 	bl	8003f20 <xQueueGenericCreate>
 80039ac:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <osMessageQueueNew+0xf2>
        name = attr->name;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	e001      	b.n	80039c6 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80039c6:	69f9      	ldr	r1, [r7, #28]
 80039c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039ca:	f000 ff01 	bl	80047d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000030 	.word	0x20000030

080039dc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b08a      	sub	sp, #40	; 0x28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	4613      	mov	r3, r2
 80039ea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f4:	f3ef 8305 	mrs	r3, IPSR
 80039f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80039fa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10f      	bne.n	8003a20 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a00:	f3ef 8310 	mrs	r3, PRIMASK
 8003a04:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <osMessageQueuePut+0x44>
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	; (8003abc <osMessageQueuePut+0xe0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d12e      	bne.n	8003a72 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a14:	f3ef 8311 	mrs	r3, BASEPRI
 8003a18:	617b      	str	r3, [r7, #20]
  return(result);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d028      	beq.n	8003a72 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d005      	beq.n	8003a32 <osMessageQueuePut+0x56>
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <osMessageQueuePut+0x56>
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8003a32:	f06f 0303 	mvn.w	r3, #3
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a38:	e039      	b.n	8003aae <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003a3e:	f107 0210 	add.w	r2, r7, #16
 8003a42:	2300      	movs	r3, #0
 8003a44:	68b9      	ldr	r1, [r7, #8]
 8003a46:	6a38      	ldr	r0, [r7, #32]
 8003a48:	f000 fbc4 	bl	80041d4 <xQueueGenericSendFromISR>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d003      	beq.n	8003a5a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8003a52:	f06f 0302 	mvn.w	r3, #2
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a58:	e029      	b.n	8003aae <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d026      	beq.n	8003aae <osMessageQueuePut+0xd2>
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <osMessageQueuePut+0xe4>)
 8003a62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a70:	e01d      	b.n	8003aae <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <osMessageQueuePut+0xa2>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8003a7e:	f06f 0303 	mvn.w	r3, #3
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
 8003a84:	e014      	b.n	8003ab0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a86:	2300      	movs	r3, #0
 8003a88:	683a      	ldr	r2, [r7, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	6a38      	ldr	r0, [r7, #32]
 8003a8e:	f000 faa7 	bl	8003fe0 <xQueueGenericSend>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d00b      	beq.n	8003ab0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8003a9e:	f06f 0301 	mvn.w	r3, #1
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	e004      	b.n	8003ab0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8003aa6:	f06f 0302 	mvn.w	r3, #2
 8003aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8003aac:	e000      	b.n	8003ab0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003aae:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000030 	.word	0x20000030
 8003ac0:	e000ed04 	.word	0xe000ed04

08003ac4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08a      	sub	sp, #40	; 0x28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ada:	f3ef 8305 	mrs	r3, IPSR
 8003ade:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ae0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aea:	61bb      	str	r3, [r7, #24]
  return(result);
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <osMessageQueueGet+0x42>
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <osMessageQueueGet+0xdc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d12e      	bne.n	8003b58 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003afa:	f3ef 8311 	mrs	r3, BASEPRI
 8003afe:	617b      	str	r3, [r7, #20]
  return(result);
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d028      	beq.n	8003b58 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <osMessageQueueGet+0x54>
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <osMessageQueueGet+0x54>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8003b18:	f06f 0303 	mvn.w	r3, #3
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b1e:	e038      	b.n	8003b92 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003b24:	f107 0310 	add.w	r3, r7, #16
 8003b28:	461a      	mov	r2, r3
 8003b2a:	68b9      	ldr	r1, [r7, #8]
 8003b2c:	6a38      	ldr	r0, [r7, #32]
 8003b2e:	f000 fcc1 	bl	80044b4 <xQueueReceiveFromISR>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d003      	beq.n	8003b40 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8003b38:	f06f 0302 	mvn.w	r3, #2
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b3e:	e028      	b.n	8003b92 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d025      	beq.n	8003b92 <osMessageQueueGet+0xce>
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <osMessageQueueGet+0xe0>)
 8003b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b56:	e01c      	b.n	8003b92 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <osMessageQueueGet+0xa0>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8003b64:	f06f 0303 	mvn.w	r3, #3
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6a:	e013      	b.n	8003b94 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	6a38      	ldr	r0, [r7, #32]
 8003b72:	f000 fbc3 	bl	80042fc <xQueueReceive>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d00b      	beq.n	8003b94 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8003b82:	f06f 0301 	mvn.w	r3, #1
 8003b86:	627b      	str	r3, [r7, #36]	; 0x24
 8003b88:	e004      	b.n	8003b94 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8003b8a:	f06f 0302 	mvn.w	r3, #2
 8003b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b90:	e000      	b.n	8003b94 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b92:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3728      	adds	r7, #40	; 0x28
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000030 	.word	0x20000030
 8003ba4:	e000ed04 	.word	0xe000ed04

08003ba8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a06      	ldr	r2, [pc, #24]	; (8003bd0 <vApplicationGetIdleTaskMemory+0x28>)
 8003bb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	4a05      	ldr	r2, [pc, #20]	; (8003bd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2280      	movs	r2, #128	; 0x80
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	20000034 	.word	0x20000034
 8003bd4:	20000090 	.word	0x20000090

08003bd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <vApplicationGetTimerTaskMemory+0x2c>)
 8003be8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a06      	ldr	r2, [pc, #24]	; (8003c08 <vApplicationGetTimerTaskMemory+0x30>)
 8003bee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]
}
 8003bf8:	bf00      	nop
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000290 	.word	0x20000290
 8003c08:	200002ec 	.word	0x200002ec

08003c0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f103 0208 	add.w	r2, r3, #8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f103 0208 	add.w	r2, r3, #8
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f103 0208 	add.w	r2, r3, #8
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr

08003c4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr

08003c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bc80      	pop	{r7}
 8003ca6:	4770      	bx	lr

08003ca8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbe:	d103      	bne.n	8003cc8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	e00c      	b.n	8003ce2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e002      	b.n	8003cd6 <vListInsert+0x2e>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d2f6      	bcs.n	8003cd0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	6892      	ldr	r2, [r2, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6852      	ldr	r2, [r2, #4]
 8003d38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d103      	bne.n	8003d4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	1e5a      	subs	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3714      	adds	r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
	...

08003d6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d109      	bne.n	8003d94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60bb      	str	r3, [r7, #8]
 8003d92:	e7fe      	b.n	8003d92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003d94:	f002 f850 	bl	8005e38 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	68f9      	ldr	r1, [r7, #12]
 8003da2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003da4:	fb01 f303 	mul.w	r3, r1, r3
 8003da8:	441a      	add	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	441a      	add	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	22ff      	movs	r2, #255	; 0xff
 8003dd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	22ff      	movs	r2, #255	; 0xff
 8003de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d114      	bne.n	8003e14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d01a      	beq.n	8003e28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3310      	adds	r3, #16
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 f992 	bl	8005120 <xTaskRemoveFromEventList>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d012      	beq.n	8003e28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <xQueueGenericReset+0xcc>)
 8003e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	e009      	b.n	8003e28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3310      	adds	r3, #16
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fef7 	bl	8003c0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	3324      	adds	r3, #36	; 0x24
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff fef2 	bl	8003c0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e28:	f002 f834 	bl	8005e94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e2c:	2301      	movs	r3, #1
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08e      	sub	sp, #56	; 0x38
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <xQueueGenericCreateStatic+0x28>
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e62:	e7fe      	b.n	8003e62 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <xQueueGenericCreateStatic+0x42>
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e7c:	e7fe      	b.n	8003e7c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <xQueueGenericCreateStatic+0x4e>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <xQueueGenericCreateStatic+0x52>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <xQueueGenericCreateStatic+0x54>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <xQueueGenericCreateStatic+0x6c>
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	623b      	str	r3, [r7, #32]
 8003ea6:	e7fe      	b.n	8003ea6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <xQueueGenericCreateStatic+0x78>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <xQueueGenericCreateStatic+0x7c>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <xQueueGenericCreateStatic+0x7e>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <xQueueGenericCreateStatic+0x96>
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	f383 8811 	msr	BASEPRI, r3
 8003ec6:	f3bf 8f6f 	isb	sy
 8003eca:	f3bf 8f4f 	dsb	sy
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ed2:	2350      	movs	r3, #80	; 0x50
 8003ed4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b50      	cmp	r3, #80	; 0x50
 8003eda:	d009      	beq.n	8003ef0 <xQueueGenericCreateStatic+0xb4>
 8003edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	f3bf 8f4f 	dsb	sy
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e7fe      	b.n	8003eee <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00d      	beq.n	8003f16 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f02:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	68b9      	ldr	r1, [r7, #8]
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f842 	bl	8003f9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3730      	adds	r7, #48	; 0x30
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08a      	sub	sp, #40	; 0x28
 8003f24:	af02      	add	r7, sp, #8
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <xQueueGenericCreate+0x28>
 8003f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f38:	f383 8811 	msr	BASEPRI, r3
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f3bf 8f4f 	dsb	sy
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e7fe      	b.n	8003f46 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e004      	b.n	8003f5e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	fb02 f303 	mul.w	r3, r2, r3
 8003f5c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3350      	adds	r3, #80	; 0x50
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 f85e 	bl	8006024 <pvPortMalloc>
 8003f68:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00f      	beq.n	8003f90 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	3350      	adds	r3, #80	; 0x50
 8003f74:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f7e:	79fa      	ldrb	r2, [r7, #7]
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	68b9      	ldr	r1, [r7, #8]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 f805 	bl	8003f9a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003f90:	69bb      	ldr	r3, [r7, #24]
	}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]
 8003fa6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc8:	2101      	movs	r1, #1
 8003fca:	69b8      	ldr	r0, [r7, #24]
 8003fcc:	f7ff fece 	bl	8003d6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	78fa      	ldrb	r2, [r7, #3]
 8003fd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08e      	sub	sp, #56	; 0x38
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <xQueueGenericSend+0x30>
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	62bb      	str	r3, [r7, #40]	; 0x28
 800400e:	e7fe      	b.n	800400e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d103      	bne.n	800401e <xQueueGenericSend+0x3e>
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <xQueueGenericSend+0x42>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <xQueueGenericSend+0x44>
 8004022:	2300      	movs	r3, #0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <xQueueGenericSend+0x5c>
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e7fe      	b.n	800403a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d103      	bne.n	800404a <xQueueGenericSend+0x6a>
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <xQueueGenericSend+0x6e>
 800404a:	2301      	movs	r3, #1
 800404c:	e000      	b.n	8004050 <xQueueGenericSend+0x70>
 800404e:	2300      	movs	r3, #0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <xQueueGenericSend+0x88>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	623b      	str	r3, [r7, #32]
 8004066:	e7fe      	b.n	8004066 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004068:	f001 fa14 	bl	8005494 <xTaskGetSchedulerState>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d102      	bne.n	8004078 <xQueueGenericSend+0x98>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <xQueueGenericSend+0x9c>
 8004078:	2301      	movs	r3, #1
 800407a:	e000      	b.n	800407e <xQueueGenericSend+0x9e>
 800407c:	2300      	movs	r3, #0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <xQueueGenericSend+0xb6>
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	e7fe      	b.n	8004094 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004096:	f001 fecf 	bl	8005e38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d302      	bcc.n	80040ac <xQueueGenericSend+0xcc>
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d129      	bne.n	8004100 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	68b9      	ldr	r1, [r7, #8]
 80040b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b2:	f000 fa7c 	bl	80045ae <prvCopyDataToQueue>
 80040b6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c2:	3324      	adds	r3, #36	; 0x24
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 f82b 	bl	8005120 <xTaskRemoveFromEventList>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d013      	beq.n	80040f8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040d0:	4b3f      	ldr	r3, [pc, #252]	; (80041d0 <xQueueGenericSend+0x1f0>)
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	e00a      	b.n	80040f8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040e8:	4b39      	ldr	r3, [pc, #228]	; (80041d0 <xQueueGenericSend+0x1f0>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040f8:	f001 fecc 	bl	8005e94 <vPortExitCritical>
				return pdPASS;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e063      	b.n	80041c8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d103      	bne.n	800410e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004106:	f001 fec5 	bl	8005e94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800410a:	2300      	movs	r3, #0
 800410c:	e05c      	b.n	80041c8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800410e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4618      	mov	r0, r3
 800411a:	f001 f863 	bl	80051e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800411e:	2301      	movs	r3, #1
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004122:	f001 feb7 	bl	8005e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004126:	f000 fddb 	bl	8004ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800412a:	f001 fe85 	bl	8005e38 <vPortEnterCritical>
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004134:	b25b      	sxtb	r3, r3
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d103      	bne.n	8004144 <xQueueGenericSend+0x164>
 800413c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414a:	b25b      	sxtb	r3, r3
 800414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004150:	d103      	bne.n	800415a <xQueueGenericSend+0x17a>
 8004152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800415a:	f001 fe9b 	bl	8005e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800415e:	1d3a      	adds	r2, r7, #4
 8004160:	f107 0314 	add.w	r3, r7, #20
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 f852 	bl	8005210 <xTaskCheckForTimeOut>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d124      	bne.n	80041bc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004174:	f000 fb13 	bl	800479e <prvIsQueueFull>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d018      	beq.n	80041b0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800417e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004180:	3310      	adds	r3, #16
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 ff7c 	bl	8005084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800418c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800418e:	f000 fa9e 	bl	80046ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004192:	f000 fdb3 	bl	8004cfc <xTaskResumeAll>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f47f af7c 	bne.w	8004096 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800419e:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <xQueueGenericSend+0x1f0>)
 80041a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	e772      	b.n	8004096 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041b2:	f000 fa8c 	bl	80046ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041b6:	f000 fda1 	bl	8004cfc <xTaskResumeAll>
 80041ba:	e76c      	b.n	8004096 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041be:	f000 fa86 	bl	80046ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041c2:	f000 fd9b 	bl	8004cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041c6:	2300      	movs	r3, #0
		}
	}
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3738      	adds	r7, #56	; 0x38
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08e      	sub	sp, #56	; 0x38
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <xQueueGenericSendFromISR+0x2c>
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	627b      	str	r3, [r7, #36]	; 0x24
 80041fe:	e7fe      	b.n	80041fe <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <xQueueGenericSendFromISR+0x3a>
 8004206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <xQueueGenericSendFromISR+0x3e>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <xQueueGenericSendFromISR+0x40>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <xQueueGenericSendFromISR+0x58>
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	623b      	str	r3, [r7, #32]
 800422a:	e7fe      	b.n	800422a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	2b02      	cmp	r3, #2
 8004230:	d103      	bne.n	800423a <xQueueGenericSendFromISR+0x66>
 8004232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	2b01      	cmp	r3, #1
 8004238:	d101      	bne.n	800423e <xQueueGenericSendFromISR+0x6a>
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <xQueueGenericSendFromISR+0x6c>
 800423e:	2300      	movs	r3, #0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <xQueueGenericSendFromISR+0x84>
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e7fe      	b.n	8004256 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004258:	f001 fea8 	bl	8005fac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800425c:	f3ef 8211 	mrs	r2, BASEPRI
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61ba      	str	r2, [r7, #24]
 8004272:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004274:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004280:	429a      	cmp	r2, r3
 8004282:	d302      	bcc.n	800428a <xQueueGenericSendFromISR+0xb6>
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d12c      	bne.n	80042e4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004290:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800429a:	f000 f988 	bl	80045ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800429e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a6:	d112      	bne.n	80042ce <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d016      	beq.n	80042de <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 ff33 	bl	8005120 <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00e      	beq.n	80042de <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]
 80042cc:	e007      	b.n	80042de <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042d2:	3301      	adds	r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	b25a      	sxtb	r2, r3
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042de:	2301      	movs	r3, #1
 80042e0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80042e2:	e001      	b.n	80042e8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042e4:	2300      	movs	r3, #0
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
 80042e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3738      	adds	r7, #56	; 0x38
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b08c      	sub	sp, #48	; 0x30
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <xQueueReceive+0x2e>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	623b      	str	r3, [r7, #32]
 8004328:	e7fe      	b.n	8004328 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <xQueueReceive+0x3c>
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <xQueueReceive+0x40>
 8004338:	2301      	movs	r3, #1
 800433a:	e000      	b.n	800433e <xQueueReceive+0x42>
 800433c:	2300      	movs	r3, #0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <xQueueReceive+0x5a>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	61fb      	str	r3, [r7, #28]
 8004354:	e7fe      	b.n	8004354 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004356:	f001 f89d 	bl	8005494 <xTaskGetSchedulerState>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d102      	bne.n	8004366 <xQueueReceive+0x6a>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <xQueueReceive+0x6e>
 8004366:	2301      	movs	r3, #1
 8004368:	e000      	b.n	800436c <xQueueReceive+0x70>
 800436a:	2300      	movs	r3, #0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xQueueReceive+0x88>
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	61bb      	str	r3, [r7, #24]
 8004382:	e7fe      	b.n	8004382 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004384:	f001 fd58 	bl	8005e38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004390:	2b00      	cmp	r3, #0
 8004392:	d01f      	beq.n	80043d4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004398:	f000 f973 	bl	8004682 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	1e5a      	subs	r2, r3, #1
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	3310      	adds	r3, #16
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 feb5 	bl	8005120 <xTaskRemoveFromEventList>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043bc:	4b3c      	ldr	r3, [pc, #240]	; (80044b0 <xQueueReceive+0x1b4>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043cc:	f001 fd62 	bl	8005e94 <vPortExitCritical>
				return pdPASS;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e069      	b.n	80044a8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043da:	f001 fd5b 	bl	8005e94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043de:	2300      	movs	r3, #0
 80043e0:	e062      	b.n	80044a8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043e8:	f107 0310 	add.w	r3, r7, #16
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 fef9 	bl	80051e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043f6:	f001 fd4d 	bl	8005e94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043fa:	f000 fc71 	bl	8004ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043fe:	f001 fd1b 	bl	8005e38 <vPortEnterCritical>
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004408:	b25b      	sxtb	r3, r3
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d103      	bne.n	8004418 <xQueueReceive+0x11c>
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800441e:	b25b      	sxtb	r3, r3
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004424:	d103      	bne.n	800442e <xQueueReceive+0x132>
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800442e:	f001 fd31 	bl	8005e94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004432:	1d3a      	adds	r2, r7, #4
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fee8 	bl	8005210 <xTaskCheckForTimeOut>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d123      	bne.n	800448e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004448:	f000 f993 	bl	8004772 <prvIsQueueEmpty>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d017      	beq.n	8004482 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004454:	3324      	adds	r3, #36	; 0x24
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	4611      	mov	r1, r2
 800445a:	4618      	mov	r0, r3
 800445c:	f000 fe12 	bl	8005084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004462:	f000 f934 	bl	80046ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004466:	f000 fc49 	bl	8004cfc <xTaskResumeAll>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d189      	bne.n	8004384 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004470:	4b0f      	ldr	r3, [pc, #60]	; (80044b0 <xQueueReceive+0x1b4>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	e780      	b.n	8004384 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004484:	f000 f923 	bl	80046ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004488:	f000 fc38 	bl	8004cfc <xTaskResumeAll>
 800448c:	e77a      	b.n	8004384 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	f000 f91d 	bl	80046ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004494:	f000 fc32 	bl	8004cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449a:	f000 f96a 	bl	8004772 <prvIsQueueEmpty>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f43f af6f 	beq.w	8004384 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3730      	adds	r7, #48	; 0x30
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08e      	sub	sp, #56	; 0x38
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d109      	bne.n	80044de <xQueueReceiveFromISR+0x2a>
 80044ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ce:	f383 8811 	msr	BASEPRI, r3
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	f3bf 8f4f 	dsb	sy
 80044da:	623b      	str	r3, [r7, #32]
 80044dc:	e7fe      	b.n	80044dc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <xQueueReceiveFromISR+0x38>
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <xQueueReceiveFromISR+0x3c>
 80044ec:	2301      	movs	r3, #1
 80044ee:	e000      	b.n	80044f2 <xQueueReceiveFromISR+0x3e>
 80044f0:	2300      	movs	r3, #0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <xQueueReceiveFromISR+0x56>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
 8004506:	61fb      	str	r3, [r7, #28]
 8004508:	e7fe      	b.n	8004508 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800450a:	f001 fd4f 	bl	8005fac <vPortValidateInterruptPriority>
	__asm volatile
 800450e:	f3ef 8211 	mrs	r2, BASEPRI
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	61ba      	str	r2, [r7, #24]
 8004524:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004526:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d02f      	beq.n	8004596 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800453c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004544:	f000 f89d 	bl	8004682 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	1e5a      	subs	r2, r3, #1
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004550:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d112      	bne.n	8004580 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d016      	beq.n	8004590 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004564:	3310      	adds	r3, #16
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fdda 	bl	8005120 <xTaskRemoveFromEventList>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00e      	beq.n	8004590 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00b      	beq.n	8004590 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	e007      	b.n	8004590 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004584:	3301      	adds	r3, #1
 8004586:	b2db      	uxtb	r3, r3
 8004588:	b25a      	sxtb	r2, r3
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004590:	2301      	movs	r3, #1
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
 8004594:	e001      	b.n	800459a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3738      	adds	r7, #56	; 0x38
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10d      	bne.n	80045e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d14d      	bne.n	8004670 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 ff79 	bl	80054d0 <xTaskPriorityDisinherit>
 80045de:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	605a      	str	r2, [r3, #4]
 80045e6:	e043      	b.n	8004670 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d119      	bne.n	8004622 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6898      	ldr	r0, [r3, #8]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	461a      	mov	r2, r3
 80045f8:	68b9      	ldr	r1, [r7, #8]
 80045fa:	f002 fd0f 	bl	800701c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	441a      	add	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	429a      	cmp	r2, r3
 8004616:	d32b      	bcc.n	8004670 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	e026      	b.n	8004670 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	68d8      	ldr	r0, [r3, #12]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	461a      	mov	r2, r3
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	f002 fcf5 	bl	800701c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	425b      	negs	r3, r3
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d207      	bcs.n	800465e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	425b      	negs	r3, r3
 8004658:	441a      	add	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d105      	bne.n	8004670 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3b01      	subs	r3, #1
 800466e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004678:	697b      	ldr	r3, [r7, #20]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
 800468a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d018      	beq.n	80046c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	441a      	add	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d303      	bcc.n	80046b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68d9      	ldr	r1, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	461a      	mov	r2, r3
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	f002 fcab 	bl	800701c <memcpy>
	}
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046d6:	f001 fbaf 	bl	8005e38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046e2:	e011      	b.n	8004708 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d012      	beq.n	8004712 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3324      	adds	r3, #36	; 0x24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fd15 	bl	8005120 <xTaskRemoveFromEventList>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d001      	beq.n	8004700 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046fc:	f000 fde8 	bl	80052d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	3b01      	subs	r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800470c:	2b00      	cmp	r3, #0
 800470e:	dce9      	bgt.n	80046e4 <prvUnlockQueue+0x16>
 8004710:	e000      	b.n	8004714 <prvUnlockQueue+0x46>
					break;
 8004712:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	22ff      	movs	r2, #255	; 0xff
 8004718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800471c:	f001 fbba 	bl	8005e94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004720:	f001 fb8a 	bl	8005e38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800472a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800472c:	e011      	b.n	8004752 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d012      	beq.n	800475c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3310      	adds	r3, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fcf0 	bl	8005120 <xTaskRemoveFromEventList>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004746:	f000 fdc3 	bl	80052d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800474a:	7bbb      	ldrb	r3, [r7, #14]
 800474c:	3b01      	subs	r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004752:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004756:	2b00      	cmp	r3, #0
 8004758:	dce9      	bgt.n	800472e <prvUnlockQueue+0x60>
 800475a:	e000      	b.n	800475e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800475c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	22ff      	movs	r2, #255	; 0xff
 8004762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004766:	f001 fb95 	bl	8005e94 <vPortExitCritical>
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800477a:	f001 fb5d 	bl	8005e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004786:	2301      	movs	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
 800478a:	e001      	b.n	8004790 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004790:	f001 fb80 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 8004794:	68fb      	ldr	r3, [r7, #12]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80047a6:	f001 fb47 	bl	8005e38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d102      	bne.n	80047bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e001      	b.n	80047c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80047bc:	2300      	movs	r3, #0
 80047be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80047c0:	f001 fb68 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 80047c4:	68fb      	ldr	r3, [r7, #12]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	e014      	b.n	800480a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047e0:	4a0e      	ldr	r2, [pc, #56]	; (800481c <vQueueAddToRegistry+0x4c>)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10b      	bne.n	8004804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047ec:	490b      	ldr	r1, [pc, #44]	; (800481c <vQueueAddToRegistry+0x4c>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047f6:	4a09      	ldr	r2, [pc, #36]	; (800481c <vQueueAddToRegistry+0x4c>)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	4413      	add	r3, r2
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004802:	e005      	b.n	8004810 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	3301      	adds	r3, #1
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2b07      	cmp	r3, #7
 800480e:	d9e7      	bls.n	80047e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	bc80      	pop	{r7}
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20001aa4 	.word	0x20001aa4

08004820 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004830:	f001 fb02 	bl	8005e38 <vPortEnterCritical>
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800483a:	b25b      	sxtb	r3, r3
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d103      	bne.n	800484a <vQueueWaitForMessageRestricted+0x2a>
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004850:	b25b      	sxtb	r3, r3
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d103      	bne.n	8004860 <vQueueWaitForMessageRestricted+0x40>
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004860:	f001 fb18 	bl	8005e94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68b9      	ldr	r1, [r7, #8]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fc29 	bl	80050cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800487a:	6978      	ldr	r0, [r7, #20]
 800487c:	f7ff ff27 	bl	80046ce <prvUnlockQueue>
	}
 8004880:	bf00      	nop
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	; 0x38
 800488c:	af04      	add	r7, sp, #16
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004898:	2b00      	cmp	r3, #0
 800489a:	d109      	bne.n	80048b0 <xTaskCreateStatic+0x28>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	623b      	str	r3, [r7, #32]
 80048ae:	e7fe      	b.n	80048ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80048b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d109      	bne.n	80048ca <xTaskCreateStatic+0x42>
 80048b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	61fb      	str	r3, [r7, #28]
 80048c8:	e7fe      	b.n	80048c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048ca:	235c      	movs	r3, #92	; 0x5c
 80048cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b5c      	cmp	r3, #92	; 0x5c
 80048d2:	d009      	beq.n	80048e8 <xTaskCreateStatic+0x60>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	61bb      	str	r3, [r7, #24]
 80048e6:	e7fe      	b.n	80048e6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80048e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01e      	beq.n	800492c <xTaskCreateStatic+0xa4>
 80048ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01b      	beq.n	800492c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004906:	2300      	movs	r3, #0
 8004908:	9303      	str	r3, [sp, #12]
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	9302      	str	r3, [sp, #8]
 800490e:	f107 0314 	add.w	r3, r7, #20
 8004912:	9301      	str	r3, [sp, #4]
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 f850 	bl	80049c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004924:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004926:	f000 f8d3 	bl	8004ad0 <prvAddNewTaskToReadyList>
 800492a:	e001      	b.n	8004930 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004930:	697b      	ldr	r3, [r7, #20]
	}
 8004932:	4618      	mov	r0, r3
 8004934:	3728      	adds	r7, #40	; 0x28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800493a:	b580      	push	{r7, lr}
 800493c:	b08c      	sub	sp, #48	; 0x30
 800493e:	af04      	add	r7, sp, #16
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	603b      	str	r3, [r7, #0]
 8004946:	4613      	mov	r3, r2
 8004948:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494a:	88fb      	ldrh	r3, [r7, #6]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4618      	mov	r0, r3
 8004950:	f001 fb68 	bl	8006024 <pvPortMalloc>
 8004954:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00e      	beq.n	800497a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800495c:	205c      	movs	r0, #92	; 0x5c
 800495e:	f001 fb61 	bl	8006024 <pvPortMalloc>
 8004962:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
 8004970:	e005      	b.n	800497e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004972:	6978      	ldr	r0, [r7, #20]
 8004974:	f001 fc18 	bl	80061a8 <vPortFree>
 8004978:	e001      	b.n	800497e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800498c:	88fa      	ldrh	r2, [r7, #6]
 800498e:	2300      	movs	r3, #0
 8004990:	9303      	str	r3, [sp, #12]
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	9302      	str	r3, [sp, #8]
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f80e 	bl	80049c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049a8:	69f8      	ldr	r0, [r7, #28]
 80049aa:	f000 f891 	bl	8004ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e002      	b.n	80049ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049ba:	69bb      	ldr	r3, [r7, #24]
	}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b088      	sub	sp, #32
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	461a      	mov	r2, r3
 80049dc:	21a5      	movs	r1, #165	; 0xa5
 80049de:	f002 fb28 	bl	8007032 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80049ec:	3b01      	subs	r3, #1
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	f023 0307 	bic.w	r3, r3, #7
 80049fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	f003 0307 	and.w	r3, r3, #7
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d009      	beq.n	8004a1a <prvInitialiseNewTask+0x56>
 8004a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0a:	f383 8811 	msr	BASEPRI, r3
 8004a0e:	f3bf 8f6f 	isb	sy
 8004a12:	f3bf 8f4f 	dsb	sy
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	e7fe      	b.n	8004a18 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	61fb      	str	r3, [r7, #28]
 8004a1e:	e012      	b.n	8004a46 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	4413      	add	r3, r2
 8004a26:	7819      	ldrb	r1, [r3, #0]
 8004a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	3334      	adds	r3, #52	; 0x34
 8004a30:	460a      	mov	r2, r1
 8004a32:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d006      	beq.n	8004a4e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3301      	adds	r3, #1
 8004a44:	61fb      	str	r3, [r7, #28]
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b0f      	cmp	r3, #15
 8004a4a:	d9e9      	bls.n	8004a20 <prvInitialiseNewTask+0x5c>
 8004a4c:	e000      	b.n	8004a50 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004a4e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	2b37      	cmp	r3, #55	; 0x37
 8004a5c:	d901      	bls.n	8004a62 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004a5e:	2337      	movs	r3, #55	; 0x37
 8004a60:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a70:	2200      	movs	r2, #0
 8004a72:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	3304      	adds	r3, #4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff f8e6 	bl	8003c4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	3318      	adds	r3, #24
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff f8e1 	bl	8003c4a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a8c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a9c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	68f9      	ldr	r1, [r7, #12]
 8004ab0:	69b8      	ldr	r0, [r7, #24]
 8004ab2:	f001 f8d7 	bl	8005c64 <pxPortInitialiseStack>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ac8:	bf00      	nop
 8004aca:	3720      	adds	r7, #32
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ad8:	f001 f9ae 	bl	8005e38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004adc:	4b2d      	ldr	r3, [pc, #180]	; (8004b94 <prvAddNewTaskToReadyList+0xc4>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <prvAddNewTaskToReadyList+0xc4>)
 8004ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <prvAddNewTaskToReadyList+0xc8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d109      	bne.n	8004b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004aee:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <prvAddNewTaskToReadyList+0xc8>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004af4:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <prvAddNewTaskToReadyList+0xc4>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d110      	bne.n	8004b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004afc:	f000 fc0c 	bl	8005318 <prvInitialiseTaskLists>
 8004b00:	e00d      	b.n	8004b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b02:	4b26      	ldr	r3, [pc, #152]	; (8004b9c <prvAddNewTaskToReadyList+0xcc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <prvAddNewTaskToReadyList+0xc8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d802      	bhi.n	8004b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b18:	4a1f      	ldr	r2, [pc, #124]	; (8004b98 <prvAddNewTaskToReadyList+0xc8>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <prvAddNewTaskToReadyList+0xd0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a1e      	ldr	r2, [pc, #120]	; (8004ba0 <prvAddNewTaskToReadyList+0xd0>)
 8004b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <prvAddNewTaskToReadyList+0xd0>)
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <prvAddNewTaskToReadyList+0xd4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d903      	bls.n	8004b44 <prvAddNewTaskToReadyList+0x74>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b40:	4a18      	ldr	r2, [pc, #96]	; (8004ba4 <prvAddNewTaskToReadyList+0xd4>)
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <prvAddNewTaskToReadyList+0xd8>)
 8004b52:	441a      	add	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	3304      	adds	r3, #4
 8004b58:	4619      	mov	r1, r3
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	f7ff f881 	bl	8003c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004b60:	f001 f998 	bl	8005e94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004b64:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <prvAddNewTaskToReadyList+0xcc>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00e      	beq.n	8004b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <prvAddNewTaskToReadyList+0xc8>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d207      	bcs.n	8004b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <prvAddNewTaskToReadyList+0xdc>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	20000bc0 	.word	0x20000bc0
 8004b98:	200006ec 	.word	0x200006ec
 8004b9c:	20000bcc 	.word	0x20000bcc
 8004ba0:	20000bdc 	.word	0x20000bdc
 8004ba4:	20000bc8 	.word	0x20000bc8
 8004ba8:	200006f0 	.word	0x200006f0
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d016      	beq.n	8004bf0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004bc2:	4b13      	ldr	r3, [pc, #76]	; (8004c10 <vTaskDelay+0x60>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d009      	beq.n	8004bde <vTaskDelay+0x2e>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	e7fe      	b.n	8004bdc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004bde:	f000 f87f 	bl	8004ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004be2:	2100      	movs	r1, #0
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fcdf 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004bea:	f000 f887 	bl	8004cfc <xTaskResumeAll>
 8004bee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d107      	bne.n	8004c06 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004bf6:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <vTaskDelay+0x64>)
 8004bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bfc:	601a      	str	r2, [r3, #0]
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	20000be8 	.word	0x20000be8
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c26:	463a      	mov	r2, r7
 8004c28:	1d39      	adds	r1, r7, #4
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fe ffba 	bl	8003ba8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c34:	6839      	ldr	r1, [r7, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	9202      	str	r2, [sp, #8]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	2300      	movs	r3, #0
 8004c44:	460a      	mov	r2, r1
 8004c46:	4920      	ldr	r1, [pc, #128]	; (8004cc8 <vTaskStartScheduler+0xb0>)
 8004c48:	4820      	ldr	r0, [pc, #128]	; (8004ccc <vTaskStartScheduler+0xb4>)
 8004c4a:	f7ff fe1d 	bl	8004888 <xTaskCreateStatic>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	4b1f      	ldr	r3, [pc, #124]	; (8004cd0 <vTaskStartScheduler+0xb8>)
 8004c52:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004c54:	4b1e      	ldr	r3, [pc, #120]	; (8004cd0 <vTaskStartScheduler+0xb8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d002      	beq.n	8004c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	617b      	str	r3, [r7, #20]
 8004c60:	e001      	b.n	8004c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004c62:	2300      	movs	r3, #0
 8004c64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004c6c:	f000 fcf0 	bl	8005650 <xTimerCreateTimerTask>
 8004c70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d115      	bne.n	8004ca4 <vTaskStartScheduler+0x8c>
 8004c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7c:	f383 8811 	msr	BASEPRI, r3
 8004c80:	f3bf 8f6f 	isb	sy
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <vTaskStartScheduler+0xbc>)
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c92:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <vTaskStartScheduler+0xc0>)
 8004c94:	2201      	movs	r2, #1
 8004c96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <vTaskStartScheduler+0xc4>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c9e:	f001 f85b 	bl	8005d58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ca2:	e00d      	b.n	8004cc0 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d109      	bne.n	8004cc0 <vTaskStartScheduler+0xa8>
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e7fe      	b.n	8004cbe <vTaskStartScheduler+0xa6>
}
 8004cc0:	bf00      	nop
 8004cc2:	3718      	adds	r7, #24
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	080070dc 	.word	0x080070dc
 8004ccc:	080052e9 	.word	0x080052e9
 8004cd0:	20000be4 	.word	0x20000be4
 8004cd4:	20000be0 	.word	0x20000be0
 8004cd8:	20000bcc 	.word	0x20000bcc
 8004cdc:	20000bc4 	.word	0x20000bc4

08004ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <vTaskSuspendAll+0x18>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <vTaskSuspendAll+0x18>)
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bc80      	pop	{r7}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000be8 	.word	0x20000be8

08004cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d0a:	4b41      	ldr	r3, [pc, #260]	; (8004e10 <xTaskResumeAll+0x114>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d109      	bne.n	8004d26 <xTaskResumeAll+0x2a>
 8004d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	e7fe      	b.n	8004d24 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d26:	f001 f887 	bl	8005e38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d2a:	4b39      	ldr	r3, [pc, #228]	; (8004e10 <xTaskResumeAll+0x114>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	4a37      	ldr	r2, [pc, #220]	; (8004e10 <xTaskResumeAll+0x114>)
 8004d32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d34:	4b36      	ldr	r3, [pc, #216]	; (8004e10 <xTaskResumeAll+0x114>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d162      	bne.n	8004e02 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d3c:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <xTaskResumeAll+0x118>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05e      	beq.n	8004e02 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d44:	e02f      	b.n	8004da6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004d46:	4b34      	ldr	r3, [pc, #208]	; (8004e18 <xTaskResumeAll+0x11c>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3318      	adds	r3, #24
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe ffe0 	bl	8003d18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe ffdb 	bl	8003d18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <xTaskResumeAll+0x120>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <xTaskResumeAll+0x7a>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a2a      	ldr	r2, [pc, #168]	; (8004e1c <xTaskResumeAll+0x120>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a27      	ldr	r2, [pc, #156]	; (8004e20 <xTaskResumeAll+0x124>)
 8004d84:	441a      	add	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe ff68 	bl	8003c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <xTaskResumeAll+0x128>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d302      	bcc.n	8004da6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004da0:	4b21      	ldr	r3, [pc, #132]	; (8004e28 <xTaskResumeAll+0x12c>)
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004da6:	4b1c      	ldr	r3, [pc, #112]	; (8004e18 <xTaskResumeAll+0x11c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1cb      	bne.n	8004d46 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004db4:	f000 fb4a 	bl	800544c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004db8:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <xTaskResumeAll+0x130>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d010      	beq.n	8004de6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004dc4:	f000 f844 	bl	8004e50 <xTaskIncrementTick>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004dce:	4b16      	ldr	r3, [pc, #88]	; (8004e28 <xTaskResumeAll+0x12c>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1f1      	bne.n	8004dc4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004de0:	4b12      	ldr	r3, [pc, #72]	; (8004e2c <xTaskResumeAll+0x130>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004de6:	4b10      	ldr	r3, [pc, #64]	; (8004e28 <xTaskResumeAll+0x12c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004dee:	2301      	movs	r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <xTaskResumeAll+0x134>)
 8004df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e02:	f001 f847 	bl	8005e94 <vPortExitCritical>

	return xAlreadyYielded;
 8004e06:	68bb      	ldr	r3, [r7, #8]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000be8 	.word	0x20000be8
 8004e14:	20000bc0 	.word	0x20000bc0
 8004e18:	20000b80 	.word	0x20000b80
 8004e1c:	20000bc8 	.word	0x20000bc8
 8004e20:	200006f0 	.word	0x200006f0
 8004e24:	200006ec 	.word	0x200006ec
 8004e28:	20000bd4 	.word	0x20000bd4
 8004e2c:	20000bd0 	.word	0x20000bd0
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004e3a:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <xTaskGetTickCount+0x18>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004e40:	687b      	ldr	r3, [r7, #4]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr
 8004e4c:	20000bc4 	.word	0x20000bc4

08004e50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e5a:	4b51      	ldr	r3, [pc, #324]	; (8004fa0 <xTaskIncrementTick+0x150>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 808d 	bne.w	8004f7e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e64:	4b4f      	ldr	r3, [pc, #316]	; (8004fa4 <xTaskIncrementTick+0x154>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004e6c:	4a4d      	ldr	r2, [pc, #308]	; (8004fa4 <xTaskIncrementTick+0x154>)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11f      	bne.n	8004eb8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8004e78:	4b4b      	ldr	r3, [pc, #300]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <xTaskIncrementTick+0x46>
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	e7fe      	b.n	8004e94 <xTaskIncrementTick+0x44>
 8004e96:	4b44      	ldr	r3, [pc, #272]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	4b43      	ldr	r3, [pc, #268]	; (8004fac <xTaskIncrementTick+0x15c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	4a41      	ldr	r2, [pc, #260]	; (8004fac <xTaskIncrementTick+0x15c>)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b41      	ldr	r3, [pc, #260]	; (8004fb0 <xTaskIncrementTick+0x160>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	4a3f      	ldr	r2, [pc, #252]	; (8004fb0 <xTaskIncrementTick+0x160>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	f000 faca 	bl	800544c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004eb8:	4b3e      	ldr	r3, [pc, #248]	; (8004fb4 <xTaskIncrementTick+0x164>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d34e      	bcc.n	8004f60 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ec2:	4b39      	ldr	r3, [pc, #228]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <xTaskIncrementTick+0x80>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <xTaskIncrementTick+0x82>
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ed6:	4b37      	ldr	r3, [pc, #220]	; (8004fb4 <xTaskIncrementTick+0x164>)
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8004edc:	601a      	str	r2, [r3, #0]
					break;
 8004ede:	e03f      	b.n	8004f60 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004ee0:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <xTaskIncrementTick+0x158>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d203      	bcs.n	8004f00 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	; (8004fb4 <xTaskIncrementTick+0x164>)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6013      	str	r3, [r2, #0]
						break;
 8004efe:	e02f      	b.n	8004f60 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fe ff07 	bl	8003d18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3318      	adds	r3, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f7fe fefe 	bl	8003d18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f20:	4b25      	ldr	r3, [pc, #148]	; (8004fb8 <xTaskIncrementTick+0x168>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d903      	bls.n	8004f30 <xTaskIncrementTick+0xe0>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2c:	4a22      	ldr	r2, [pc, #136]	; (8004fb8 <xTaskIncrementTick+0x168>)
 8004f2e:	6013      	str	r3, [r2, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f34:	4613      	mov	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4a1f      	ldr	r2, [pc, #124]	; (8004fbc <xTaskIncrementTick+0x16c>)
 8004f3e:	441a      	add	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	3304      	adds	r3, #4
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fe fe8b 	bl	8003c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f50:	4b1b      	ldr	r3, [pc, #108]	; (8004fc0 <xTaskIncrementTick+0x170>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d3b3      	bcc.n	8004ec2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f5e:	e7b0      	b.n	8004ec2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f60:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <xTaskIncrementTick+0x170>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f66:	4915      	ldr	r1, [pc, #84]	; (8004fbc <xTaskIncrementTick+0x16c>)
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d907      	bls.n	8004f88 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	e004      	b.n	8004f88 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004f7e:	4b11      	ldr	r3, [pc, #68]	; (8004fc4 <xTaskIncrementTick+0x174>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3301      	adds	r3, #1
 8004f84:	4a0f      	ldr	r2, [pc, #60]	; (8004fc4 <xTaskIncrementTick+0x174>)
 8004f86:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <xTaskIncrementTick+0x178>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d001      	beq.n	8004f94 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004f90:	2301      	movs	r3, #1
 8004f92:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004f94:	697b      	ldr	r3, [r7, #20]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3718      	adds	r7, #24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	20000be8 	.word	0x20000be8
 8004fa4:	20000bc4 	.word	0x20000bc4
 8004fa8:	20000b78 	.word	0x20000b78
 8004fac:	20000b7c 	.word	0x20000b7c
 8004fb0:	20000bd8 	.word	0x20000bd8
 8004fb4:	20000be0 	.word	0x20000be0
 8004fb8:	20000bc8 	.word	0x20000bc8
 8004fbc:	200006f0 	.word	0x200006f0
 8004fc0:	200006ec 	.word	0x200006ec
 8004fc4:	20000bd0 	.word	0x20000bd0
 8004fc8:	20000bd4 	.word	0x20000bd4

08004fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <vTaskSwitchContext+0xa4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <vTaskSwitchContext+0xa8>)
 8004fdc:	2201      	movs	r2, #1
 8004fde:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004fe0:	e040      	b.n	8005064 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004fe2:	4b24      	ldr	r3, [pc, #144]	; (8005074 <vTaskSwitchContext+0xa8>)
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004fe8:	4b23      	ldr	r3, [pc, #140]	; (8005078 <vTaskSwitchContext+0xac>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	e00f      	b.n	8005010 <vTaskSwitchContext+0x44>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d109      	bne.n	800500a <vTaskSwitchContext+0x3e>
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e7fe      	b.n	8005008 <vTaskSwitchContext+0x3c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	3b01      	subs	r3, #1
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	491a      	ldr	r1, [pc, #104]	; (800507c <vTaskSwitchContext+0xb0>)
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d0e5      	beq.n	8004ff0 <vTaskSwitchContext+0x24>
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	4613      	mov	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4413      	add	r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4a13      	ldr	r2, [pc, #76]	; (800507c <vTaskSwitchContext+0xb0>)
 8005030:	4413      	add	r3, r2
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	605a      	str	r2, [r3, #4]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	3308      	adds	r3, #8
 8005046:	429a      	cmp	r2, r3
 8005048:	d104      	bne.n	8005054 <vTaskSwitchContext+0x88>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vTaskSwitchContext+0xb4>)
 800505c:	6013      	str	r3, [r2, #0]
 800505e:	4a06      	ldr	r2, [pc, #24]	; (8005078 <vTaskSwitchContext+0xac>)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6013      	str	r3, [r2, #0]
}
 8005064:	bf00      	nop
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000be8 	.word	0x20000be8
 8005074:	20000bd4 	.word	0x20000bd4
 8005078:	20000bc8 	.word	0x20000bc8
 800507c:	200006f0 	.word	0x200006f0
 8005080:	200006ec 	.word	0x200006ec

08005084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <vTaskPlaceOnEventList+0x24>
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	e7fe      	b.n	80050a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <vTaskPlaceOnEventList+0x44>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3318      	adds	r3, #24
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7fe fdf9 	bl	8003ca8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050b6:	2101      	movs	r1, #1
 80050b8:	6838      	ldr	r0, [r7, #0]
 80050ba:	f000 fa75 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
}
 80050be:	bf00      	nop
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200006ec 	.word	0x200006ec

080050cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <vTaskPlaceOnEventListRestricted+0x26>
 80050de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e7fe      	b.n	80050f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <vTaskPlaceOnEventListRestricted+0x50>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3318      	adds	r3, #24
 80050f8:	4619      	mov	r1, r3
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f7fe fdb1 	bl	8003c62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800510c:	6879      	ldr	r1, [r7, #4]
 800510e:	68b8      	ldr	r0, [r7, #8]
 8005110:	f000 fa4a 	bl	80055a8 <prvAddCurrentTaskToDelayedList>
	}
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	200006ec 	.word	0x200006ec

08005120 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d109      	bne.n	800514a <xTaskRemoveFromEventList+0x2a>
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	e7fe      	b.n	8005148 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	3318      	adds	r3, #24
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe fde2 	bl	8003d18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005154:	4b1d      	ldr	r3, [pc, #116]	; (80051cc <xTaskRemoveFromEventList+0xac>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11d      	bne.n	8005198 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	3304      	adds	r3, #4
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fdd9 	bl	8003d18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800516a:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d903      	bls.n	800517a <xTaskRemoveFromEventList+0x5a>
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005176:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <xTaskRemoveFromEventList+0xb0>)
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <xTaskRemoveFromEventList+0xb4>)
 8005188:	441a      	add	r2, r3
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	3304      	adds	r3, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4610      	mov	r0, r2
 8005192:	f7fe fd66 	bl	8003c62 <vListInsertEnd>
 8005196:	e005      	b.n	80051a4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3318      	adds	r3, #24
 800519c:	4619      	mov	r1, r3
 800519e:	480e      	ldr	r0, [pc, #56]	; (80051d8 <xTaskRemoveFromEventList+0xb8>)
 80051a0:	f7fe fd5f 	bl	8003c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051a8:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <xTaskRemoveFromEventList+0xbc>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d905      	bls.n	80051be <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <xTaskRemoveFromEventList+0xc0>)
 80051b8:	2201      	movs	r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e001      	b.n	80051c2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80051c2:	697b      	ldr	r3, [r7, #20]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3718      	adds	r7, #24
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000be8 	.word	0x20000be8
 80051d0:	20000bc8 	.word	0x20000bc8
 80051d4:	200006f0 	.word	0x200006f0
 80051d8:	20000b80 	.word	0x20000b80
 80051dc:	200006ec 	.word	0x200006ec
 80051e0:	20000bd4 	.word	0x20000bd4

080051e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051ec:	4b06      	ldr	r3, [pc, #24]	; (8005208 <vTaskInternalSetTimeOutState+0x24>)
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <vTaskInternalSetTimeOutState+0x28>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	bc80      	pop	{r7}
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000bd8 	.word	0x20000bd8
 800520c:	20000bc4 	.word	0x20000bc4

08005210 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b088      	sub	sp, #32
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
 8005218:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d109      	bne.n	8005234 <xTaskCheckForTimeOut+0x24>
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	613b      	str	r3, [r7, #16]
 8005232:	e7fe      	b.n	8005232 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <xTaskCheckForTimeOut+0x3e>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	e7fe      	b.n	800524c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800524e:	f000 fdf3 	bl	8005e38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005252:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <xTaskCheckForTimeOut+0xb8>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	69ba      	ldr	r2, [r7, #24]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d102      	bne.n	8005272 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800526c:	2300      	movs	r3, #0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	e023      	b.n	80052ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <xTaskCheckForTimeOut+0xbc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d007      	beq.n	800528e <xTaskCheckForTimeOut+0x7e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005288:	2301      	movs	r3, #1
 800528a:	61fb      	str	r3, [r7, #28]
 800528c:	e015      	b.n	80052ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	429a      	cmp	r2, r3
 8005296:	d20b      	bcs.n	80052b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff9d 	bl	80051e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
 80052ae:	e004      	b.n	80052ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80052ba:	f000 fdeb 	bl	8005e94 <vPortExitCritical>

	return xReturn;
 80052be:	69fb      	ldr	r3, [r7, #28]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3720      	adds	r7, #32
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	20000bc4 	.word	0x20000bc4
 80052cc:	20000bd8 	.word	0x20000bd8

080052d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80052d4:	4b03      	ldr	r3, [pc, #12]	; (80052e4 <vTaskMissedYield+0x14>)
 80052d6:	2201      	movs	r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
}
 80052da:	bf00      	nop
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	20000bd4 	.word	0x20000bd4

080052e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80052f0:	f000 f852 	bl	8005398 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <prvIdleTask+0x28>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d9f9      	bls.n	80052f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80052fc:	4b05      	ldr	r3, [pc, #20]	; (8005314 <prvIdleTask+0x2c>)
 80052fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800530c:	e7f0      	b.n	80052f0 <prvIdleTask+0x8>
 800530e:	bf00      	nop
 8005310:	200006f0 	.word	0x200006f0
 8005314:	e000ed04 	.word	0xe000ed04

08005318 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800531e:	2300      	movs	r3, #0
 8005320:	607b      	str	r3, [r7, #4]
 8005322:	e00c      	b.n	800533e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <prvInitialiseTaskLists+0x60>)
 8005330:	4413      	add	r3, r2
 8005332:	4618      	mov	r0, r3
 8005334:	f7fe fc6a 	bl	8003c0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3301      	adds	r3, #1
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b37      	cmp	r3, #55	; 0x37
 8005342:	d9ef      	bls.n	8005324 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005344:	480d      	ldr	r0, [pc, #52]	; (800537c <prvInitialiseTaskLists+0x64>)
 8005346:	f7fe fc61 	bl	8003c0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800534a:	480d      	ldr	r0, [pc, #52]	; (8005380 <prvInitialiseTaskLists+0x68>)
 800534c:	f7fe fc5e 	bl	8003c0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005350:	480c      	ldr	r0, [pc, #48]	; (8005384 <prvInitialiseTaskLists+0x6c>)
 8005352:	f7fe fc5b 	bl	8003c0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005356:	480c      	ldr	r0, [pc, #48]	; (8005388 <prvInitialiseTaskLists+0x70>)
 8005358:	f7fe fc58 	bl	8003c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800535c:	480b      	ldr	r0, [pc, #44]	; (800538c <prvInitialiseTaskLists+0x74>)
 800535e:	f7fe fc55 	bl	8003c0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005362:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <prvInitialiseTaskLists+0x78>)
 8005364:	4a05      	ldr	r2, [pc, #20]	; (800537c <prvInitialiseTaskLists+0x64>)
 8005366:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <prvInitialiseTaskLists+0x7c>)
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <prvInitialiseTaskLists+0x68>)
 800536c:	601a      	str	r2, [r3, #0]
}
 800536e:	bf00      	nop
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	200006f0 	.word	0x200006f0
 800537c:	20000b50 	.word	0x20000b50
 8005380:	20000b64 	.word	0x20000b64
 8005384:	20000b80 	.word	0x20000b80
 8005388:	20000b94 	.word	0x20000b94
 800538c:	20000bac 	.word	0x20000bac
 8005390:	20000b78 	.word	0x20000b78
 8005394:	20000b7c 	.word	0x20000b7c

08005398 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800539e:	e019      	b.n	80053d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80053a0:	f000 fd4a 	bl	8005e38 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80053a4:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <prvCheckTasksWaitingTermination+0x4c>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	4618      	mov	r0, r3
 80053b2:	f7fe fcb1 	bl	8003d18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <prvCheckTasksWaitingTermination+0x50>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3b01      	subs	r3, #1
 80053bc:	4a0a      	ldr	r2, [pc, #40]	; (80053e8 <prvCheckTasksWaitingTermination+0x50>)
 80053be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80053c0:	4b0a      	ldr	r3, [pc, #40]	; (80053ec <prvCheckTasksWaitingTermination+0x54>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	4a09      	ldr	r2, [pc, #36]	; (80053ec <prvCheckTasksWaitingTermination+0x54>)
 80053c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80053ca:	f000 fd63 	bl	8005e94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f80e 	bl	80053f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <prvCheckTasksWaitingTermination+0x54>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1e1      	bne.n	80053a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000b94 	.word	0x20000b94
 80053e8:	20000bc0 	.word	0x20000bc0
 80053ec:	20000ba8 	.word	0x20000ba8

080053f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d108      	bne.n	8005414 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4618      	mov	r0, r3
 8005408:	f000 fece 	bl	80061a8 <vPortFree>
				vPortFree( pxTCB );
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 fecb 	bl	80061a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005412:	e017      	b.n	8005444 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800541a:	2b01      	cmp	r3, #1
 800541c:	d103      	bne.n	8005426 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 fec2 	bl	80061a8 <vPortFree>
	}
 8005424:	e00e      	b.n	8005444 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800542c:	2b02      	cmp	r3, #2
 800542e:	d009      	beq.n	8005444 <prvDeleteTCB+0x54>
 8005430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e7fe      	b.n	8005442 <prvDeleteTCB+0x52>
	}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005452:	4b0e      	ldr	r3, [pc, #56]	; (800548c <prvResetNextTaskUnblockTime+0x40>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d101      	bne.n	8005460 <prvResetNextTaskUnblockTime+0x14>
 800545c:	2301      	movs	r3, #1
 800545e:	e000      	b.n	8005462 <prvResetNextTaskUnblockTime+0x16>
 8005460:	2300      	movs	r3, #0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d004      	beq.n	8005470 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005466:	4b0a      	ldr	r3, [pc, #40]	; (8005490 <prvResetNextTaskUnblockTime+0x44>)
 8005468:	f04f 32ff 	mov.w	r2, #4294967295
 800546c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800546e:	e008      	b.n	8005482 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005470:	4b06      	ldr	r3, [pc, #24]	; (800548c <prvResetNextTaskUnblockTime+0x40>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4a04      	ldr	r2, [pc, #16]	; (8005490 <prvResetNextTaskUnblockTime+0x44>)
 8005480:	6013      	str	r3, [r2, #0]
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	20000b78 	.word	0x20000b78
 8005490:	20000be0 	.word	0x20000be0

08005494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <xTaskGetSchedulerState+0x34>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80054a2:	2301      	movs	r3, #1
 80054a4:	607b      	str	r3, [r7, #4]
 80054a6:	e008      	b.n	80054ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a8:	4b08      	ldr	r3, [pc, #32]	; (80054cc <xTaskGetSchedulerState+0x38>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d102      	bne.n	80054b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80054b0:	2302      	movs	r3, #2
 80054b2:	607b      	str	r3, [r7, #4]
 80054b4:	e001      	b.n	80054ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80054ba:	687b      	ldr	r3, [r7, #4]
	}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	20000bcc 	.word	0x20000bcc
 80054cc:	20000be8 	.word	0x20000be8

080054d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d054      	beq.n	8005590 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80054e6:	4b2d      	ldr	r3, [pc, #180]	; (800559c <xTaskPriorityDisinherit+0xcc>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d009      	beq.n	8005504 <xTaskPriorityDisinherit+0x34>
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
 8005502:	e7fe      	b.n	8005502 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <xTaskPriorityDisinherit+0x50>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60bb      	str	r3, [r7, #8]
 800551e:	e7fe      	b.n	800551e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005524:	1e5a      	subs	r2, r3, #1
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005532:	429a      	cmp	r2, r3
 8005534:	d02c      	beq.n	8005590 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	2b00      	cmp	r3, #0
 800553c:	d128      	bne.n	8005590 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	3304      	adds	r3, #4
 8005542:	4618      	mov	r0, r3
 8005544:	f7fe fbe8 	bl	8003d18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <xTaskPriorityDisinherit+0xd0>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d903      	bls.n	8005570 <xTaskPriorityDisinherit+0xa0>
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <xTaskPriorityDisinherit+0xd0>)
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4613      	mov	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <xTaskPriorityDisinherit+0xd4>)
 800557e:	441a      	add	r2, r3
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f7fe fb6b 	bl	8003c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800558c:	2301      	movs	r3, #1
 800558e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005590:	697b      	ldr	r3, [r7, #20]
	}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	200006ec 	.word	0x200006ec
 80055a0:	20000bc8 	.word	0x20000bc8
 80055a4:	200006f0 	.word	0x200006f0

080055a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055b2:	4b21      	ldr	r3, [pc, #132]	; (8005638 <prvAddCurrentTaskToDelayedList+0x90>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3304      	adds	r3, #4
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fbaa 	bl	8003d18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ca:	d10a      	bne.n	80055e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d007      	beq.n	80055e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055d2:	4b1a      	ldr	r3, [pc, #104]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4619      	mov	r1, r3
 80055da:	4819      	ldr	r0, [pc, #100]	; (8005640 <prvAddCurrentTaskToDelayedList+0x98>)
 80055dc:	f7fe fb41 	bl	8003c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055e0:	e026      	b.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4413      	add	r3, r2
 80055e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055ea:	4b14      	ldr	r3, [pc, #80]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055f2:	68ba      	ldr	r2, [r7, #8]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d209      	bcs.n	800560e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055fa:	4b12      	ldr	r3, [pc, #72]	; (8005644 <prvAddCurrentTaskToDelayedList+0x9c>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b0f      	ldr	r3, [pc, #60]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3304      	adds	r3, #4
 8005604:	4619      	mov	r1, r3
 8005606:	4610      	mov	r0, r2
 8005608:	f7fe fb4e 	bl	8003ca8 <vListInsert>
}
 800560c:	e010      	b.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b0a      	ldr	r3, [pc, #40]	; (800563c <prvAddCurrentTaskToDelayedList+0x94>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3304      	adds	r3, #4
 8005618:	4619      	mov	r1, r3
 800561a:	4610      	mov	r0, r2
 800561c:	f7fe fb44 	bl	8003ca8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005620:	4b0a      	ldr	r3, [pc, #40]	; (800564c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d202      	bcs.n	8005630 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <prvAddCurrentTaskToDelayedList+0xa4>)
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	6013      	str	r3, [r2, #0]
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000bc4 	.word	0x20000bc4
 800563c:	200006ec 	.word	0x200006ec
 8005640:	20000bac 	.word	0x20000bac
 8005644:	20000b7c 	.word	0x20000b7c
 8005648:	20000b78 	.word	0x20000b78
 800564c:	20000be0 	.word	0x20000be0

08005650 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005656:	2300      	movs	r3, #0
 8005658:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800565a:	f000 fac3 	bl	8005be4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800565e:	4b1c      	ldr	r3, [pc, #112]	; (80056d0 <xTimerCreateTimerTask+0x80>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d021      	beq.n	80056aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800566e:	1d3a      	adds	r2, r7, #4
 8005670:	f107 0108 	add.w	r1, r7, #8
 8005674:	f107 030c 	add.w	r3, r7, #12
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe faad 	bl	8003bd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	9202      	str	r2, [sp, #8]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	2302      	movs	r3, #2
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	2300      	movs	r3, #0
 800568e:	460a      	mov	r2, r1
 8005690:	4910      	ldr	r1, [pc, #64]	; (80056d4 <xTimerCreateTimerTask+0x84>)
 8005692:	4811      	ldr	r0, [pc, #68]	; (80056d8 <xTimerCreateTimerTask+0x88>)
 8005694:	f7ff f8f8 	bl	8004888 <xTaskCreateStatic>
 8005698:	4602      	mov	r2, r0
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <xTimerCreateTimerTask+0x8c>)
 800569c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800569e:	4b0f      	ldr	r3, [pc, #60]	; (80056dc <xTimerCreateTimerTask+0x8c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80056a6:	2301      	movs	r3, #1
 80056a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <xTimerCreateTimerTask+0x74>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	613b      	str	r3, [r7, #16]
 80056c2:	e7fe      	b.n	80056c2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80056c4:	697b      	ldr	r3, [r7, #20]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3718      	adds	r7, #24
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000c1c 	.word	0x20000c1c
 80056d4:	080070e4 	.word	0x080070e4
 80056d8:	080057f9 	.word	0x080057f9
 80056dc:	20000c20 	.word	0x20000c20

080056e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d109      	bne.n	800570c <xTimerGenericCommand+0x2c>
 80056f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fc:	f383 8811 	msr	BASEPRI, r3
 8005700:	f3bf 8f6f 	isb	sy
 8005704:	f3bf 8f4f 	dsb	sy
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	e7fe      	b.n	800570a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800570c:	4b19      	ldr	r3, [pc, #100]	; (8005774 <xTimerGenericCommand+0x94>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02a      	beq.n	800576a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b05      	cmp	r3, #5
 8005724:	dc18      	bgt.n	8005758 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005726:	f7ff feb5 	bl	8005494 <xTaskGetSchedulerState>
 800572a:	4603      	mov	r3, r0
 800572c:	2b02      	cmp	r3, #2
 800572e:	d109      	bne.n	8005744 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005730:	4b10      	ldr	r3, [pc, #64]	; (8005774 <xTimerGenericCommand+0x94>)
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	f107 0110 	add.w	r1, r7, #16
 8005738:	2300      	movs	r3, #0
 800573a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800573c:	f7fe fc50 	bl	8003fe0 <xQueueGenericSend>
 8005740:	6278      	str	r0, [r7, #36]	; 0x24
 8005742:	e012      	b.n	800576a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <xTimerGenericCommand+0x94>)
 8005746:	6818      	ldr	r0, [r3, #0]
 8005748:	f107 0110 	add.w	r1, r7, #16
 800574c:	2300      	movs	r3, #0
 800574e:	2200      	movs	r2, #0
 8005750:	f7fe fc46 	bl	8003fe0 <xQueueGenericSend>
 8005754:	6278      	str	r0, [r7, #36]	; 0x24
 8005756:	e008      	b.n	800576a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <xTimerGenericCommand+0x94>)
 800575a:	6818      	ldr	r0, [r3, #0]
 800575c:	f107 0110 	add.w	r1, r7, #16
 8005760:	2300      	movs	r3, #0
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	f7fe fd36 	bl	80041d4 <xQueueGenericSendFromISR>
 8005768:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800576c:	4618      	mov	r0, r3
 800576e:	3728      	adds	r7, #40	; 0x28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000c1c 	.word	0x20000c1c

08005778 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af02      	add	r7, sp, #8
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <prvProcessExpiredTimer+0x7c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3304      	adds	r3, #4
 8005790:	4618      	mov	r0, r3
 8005792:	f7fe fac1 	bl	8003d18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d121      	bne.n	80057e2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	18d1      	adds	r1, r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f000 f8c8 	bl	8005940 <prvInsertTimerInActiveList>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d015      	beq.n	80057e2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057b6:	2300      	movs	r3, #0
 80057b8:	9300      	str	r3, [sp, #0]
 80057ba:	2300      	movs	r3, #0
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	2100      	movs	r1, #0
 80057c0:	6978      	ldr	r0, [r7, #20]
 80057c2:	f7ff ff8d 	bl	80056e0 <xTimerGenericCommand>
 80057c6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d109      	bne.n	80057e2 <prvProcessExpiredTimer+0x6a>
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
 80057e0:	e7fe      	b.n	80057e0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	6978      	ldr	r0, [r7, #20]
 80057e8:	4798      	blx	r3
}
 80057ea:	bf00      	nop
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	20000c14 	.word	0x20000c14

080057f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005800:	f107 0308 	add.w	r3, r7, #8
 8005804:	4618      	mov	r0, r3
 8005806:	f000 f857 	bl	80058b8 <prvGetNextExpireTime>
 800580a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4619      	mov	r1, r3
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f803 	bl	800581c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005816:	f000 f8d5 	bl	80059c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800581a:	e7f1      	b.n	8005800 <prvTimerTask+0x8>

0800581c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005826:	f7ff fa5b 	bl	8004ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800582a:	f107 0308 	add.w	r3, r7, #8
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f866 	bl	8005900 <prvSampleTimeNow>
 8005834:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d130      	bne.n	800589e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10a      	bne.n	8005858 <prvProcessTimerOrBlockTask+0x3c>
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	429a      	cmp	r2, r3
 8005848:	d806      	bhi.n	8005858 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800584a:	f7ff fa57 	bl	8004cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff91 	bl	8005778 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005856:	e024      	b.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d008      	beq.n	8005870 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <prvProcessTimerOrBlockTask+0x90>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	bf0c      	ite	eq
 8005868:	2301      	moveq	r3, #1
 800586a:	2300      	movne	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005870:	4b0f      	ldr	r3, [pc, #60]	; (80058b0 <prvProcessTimerOrBlockTask+0x94>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	4619      	mov	r1, r3
 800587e:	f7fe ffcf 	bl	8004820 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005882:	f7ff fa3b 	bl	8004cfc <xTaskResumeAll>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800588c:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <prvProcessTimerOrBlockTask+0x98>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
}
 800589c:	e001      	b.n	80058a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800589e:	f7ff fa2d 	bl	8004cfc <xTaskResumeAll>
}
 80058a2:	bf00      	nop
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000c18 	.word	0x20000c18
 80058b0:	20000c1c 	.word	0x20000c1c
 80058b4:	e000ed04 	.word	0xe000ed04

080058b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80058c0:	4b0e      	ldr	r3, [pc, #56]	; (80058fc <prvGetNextExpireTime+0x44>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	bf0c      	ite	eq
 80058ca:	2301      	moveq	r3, #1
 80058cc:	2300      	movne	r3, #0
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d105      	bne.n	80058ea <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058de:	4b07      	ldr	r3, [pc, #28]	; (80058fc <prvGetNextExpireTime+0x44>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
 80058e8:	e001      	b.n	80058ee <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80058ee:	68fb      	ldr	r3, [r7, #12]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bc80      	pop	{r7}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	20000c14 	.word	0x20000c14

08005900 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005908:	f7ff fa94 	bl	8004e34 <xTaskGetTickCount>
 800590c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800590e:	4b0b      	ldr	r3, [pc, #44]	; (800593c <prvSampleTimeNow+0x3c>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d205      	bcs.n	8005924 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005918:	f000 f904 	bl	8005b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e002      	b.n	800592a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800592a:	4a04      	ldr	r2, [pc, #16]	; (800593c <prvSampleTimeNow+0x3c>)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000c24 	.word	0x20000c24

08005940 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d812      	bhi.n	800598c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad2      	subs	r2, r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	429a      	cmp	r2, r3
 8005972:	d302      	bcc.n	800597a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005974:	2301      	movs	r3, #1
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e01b      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800597a:	4b10      	ldr	r3, [pc, #64]	; (80059bc <prvInsertTimerInActiveList+0x7c>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe f98f 	bl	8003ca8 <vListInsert>
 800598a:	e012      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d206      	bcs.n	80059a2 <prvInsertTimerInActiveList+0x62>
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e007      	b.n	80059b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <prvInsertTimerInActiveList+0x80>)
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7fe f97b 	bl	8003ca8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80059b2:	697b      	ldr	r3, [r7, #20]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	20000c18 	.word	0x20000c18
 80059c0:	20000c14 	.word	0x20000c14

080059c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	; 0x38
 80059c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059ca:	e099      	b.n	8005b00 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	da17      	bge.n	8005a02 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80059d2:	1d3b      	adds	r3, r7, #4
 80059d4:	3304      	adds	r3, #4
 80059d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80059d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d109      	bne.n	80059f2 <prvProcessReceivedCommands+0x2e>
 80059de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e7fe      	b.n	80059f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f8:	6850      	ldr	r0, [r2, #4]
 80059fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	4611      	mov	r1, r2
 8005a00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	db7a      	blt.n	8005afe <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d004      	beq.n	8005a1e <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	3304      	adds	r3, #4
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fe f97d 	bl	8003d18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a1e:	463b      	mov	r3, r7
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7ff ff6d 	bl	8005900 <prvSampleTimeNow>
 8005a26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b09      	cmp	r3, #9
 8005a2c:	d868      	bhi.n	8005b00 <prvProcessReceivedCommands+0x13c>
 8005a2e:	a201      	add	r2, pc, #4	; (adr r2, 8005a34 <prvProcessReceivedCommands+0x70>)
 8005a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a34:	08005a5d 	.word	0x08005a5d
 8005a38:	08005a5d 	.word	0x08005a5d
 8005a3c:	08005a5d 	.word	0x08005a5d
 8005a40:	08005b01 	.word	0x08005b01
 8005a44:	08005ab7 	.word	0x08005ab7
 8005a48:	08005aed 	.word	0x08005aed
 8005a4c:	08005a5d 	.word	0x08005a5d
 8005a50:	08005a5d 	.word	0x08005a5d
 8005a54:	08005b01 	.word	0x08005b01
 8005a58:	08005ab7 	.word	0x08005ab7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	18d1      	adds	r1, r2, r3
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a6a:	f7ff ff69 	bl	8005940 <prvInsertTimerInActiveList>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d045      	beq.n	8005b00 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a7a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d13d      	bne.n	8005b00 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	441a      	add	r2, r3
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2300      	movs	r3, #0
 8005a92:	2100      	movs	r1, #0
 8005a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a96:	f7ff fe23 	bl	80056e0 <xTimerGenericCommand>
 8005a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d12e      	bne.n	8005b00 <prvProcessReceivedCommands+0x13c>
 8005aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa6:	f383 8811 	msr	BASEPRI, r3
 8005aaa:	f3bf 8f6f 	isb	sy
 8005aae:	f3bf 8f4f 	dsb	sy
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e7fe      	b.n	8005ab4 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <prvProcessReceivedCommands+0x114>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	e7fe      	b.n	8005ad6 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ade:	18d1      	adds	r1, r2, r3
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ae6:	f7ff ff2b 	bl	8005940 <prvInsertTimerInActiveList>
					break;
 8005aea:	e009      	b.n	8005b00 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d104      	bne.n	8005b00 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005af8:	f000 fb56 	bl	80061a8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005afc:	e000      	b.n	8005b00 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005afe:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <prvProcessReceivedCommands+0x15c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	1d39      	adds	r1, r7, #4
 8005b06:	2200      	movs	r2, #0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7fe fbf7 	bl	80042fc <xQueueReceive>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f47f af5b 	bne.w	80059cc <prvProcessReceivedCommands+0x8>
	}
}
 8005b16:	bf00      	nop
 8005b18:	3730      	adds	r7, #48	; 0x30
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	20000c1c 	.word	0x20000c1c

08005b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b2a:	e044      	b.n	8005bb6 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b2c:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005b36:	4b29      	ldr	r3, [pc, #164]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4618      	mov	r0, r3
 8005b46:	f7fe f8e7 	bl	8003d18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d12d      	bne.n	8005bb6 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d90e      	bls.n	8005b8a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b78:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3304      	adds	r3, #4
 8005b80:	4619      	mov	r1, r3
 8005b82:	4610      	mov	r0, r2
 8005b84:	f7fe f890 	bl	8003ca8 <vListInsert>
 8005b88:	e015      	b.n	8005bb6 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	2100      	movs	r1, #0
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f7ff fda3 	bl	80056e0 <xTimerGenericCommand>
 8005b9a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <prvSwitchTimerLists+0x92>
 8005ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	e7fe      	b.n	8005bb4 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005bb6:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1b5      	bne.n	8005b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005bc6:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <prvSwitchTimerLists+0xbc>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a04      	ldr	r2, [pc, #16]	; (8005bdc <prvSwitchTimerLists+0xb8>)
 8005bcc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005bce:	4a04      	ldr	r2, [pc, #16]	; (8005be0 <prvSwitchTimerLists+0xbc>)
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6013      	str	r3, [r2, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000c14 	.word	0x20000c14
 8005be0:	20000c18 	.word	0x20000c18

08005be4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005bea:	f000 f925 	bl	8005e38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bee:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d120      	bne.n	8005c38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bf6:	4814      	ldr	r0, [pc, #80]	; (8005c48 <prvCheckForValidListAndQueue+0x64>)
 8005bf8:	f7fe f808 	bl	8003c0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bfc:	4813      	ldr	r0, [pc, #76]	; (8005c4c <prvCheckForValidListAndQueue+0x68>)
 8005bfe:	f7fe f805 	bl	8003c0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005c02:	4b13      	ldr	r3, [pc, #76]	; (8005c50 <prvCheckForValidListAndQueue+0x6c>)
 8005c04:	4a10      	ldr	r2, [pc, #64]	; (8005c48 <prvCheckForValidListAndQueue+0x64>)
 8005c06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005c08:	4b12      	ldr	r3, [pc, #72]	; (8005c54 <prvCheckForValidListAndQueue+0x70>)
 8005c0a:	4a10      	ldr	r2, [pc, #64]	; (8005c4c <prvCheckForValidListAndQueue+0x68>)
 8005c0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005c0e:	2300      	movs	r3, #0
 8005c10:	9300      	str	r3, [sp, #0]
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <prvCheckForValidListAndQueue+0x74>)
 8005c14:	4a11      	ldr	r2, [pc, #68]	; (8005c5c <prvCheckForValidListAndQueue+0x78>)
 8005c16:	2110      	movs	r1, #16
 8005c18:	200a      	movs	r0, #10
 8005c1a:	f7fe f90f 	bl	8003e3c <xQueueGenericCreateStatic>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	4b08      	ldr	r3, [pc, #32]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005c22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005c24:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d005      	beq.n	8005c38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005c2c:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <prvCheckForValidListAndQueue+0x60>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	490b      	ldr	r1, [pc, #44]	; (8005c60 <prvCheckForValidListAndQueue+0x7c>)
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fdcc 	bl	80047d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c38:	f000 f92c 	bl	8005e94 <vPortExitCritical>
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000c1c 	.word	0x20000c1c
 8005c48:	20000bec 	.word	0x20000bec
 8005c4c:	20000c00 	.word	0x20000c00
 8005c50:	20000c14 	.word	0x20000c14
 8005c54:	20000c18 	.word	0x20000c18
 8005c58:	20000cc8 	.word	0x20000cc8
 8005c5c:	20000c28 	.word	0x20000c28
 8005c60:	080070ec 	.word	0x080070ec

08005c64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c64:	b480      	push	{r7}
 8005c66:	b085      	sub	sp, #20
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	3b04      	subs	r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3b04      	subs	r3, #4
 8005c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c94:	4a08      	ldr	r2, [pc, #32]	; (8005cb8 <pxPortInitialiseStack+0x54>)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3b14      	subs	r3, #20
 8005c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3b20      	subs	r3, #32
 8005caa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005cac:	68fb      	ldr	r3, [r7, #12]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	08005cbd 	.word	0x08005cbd

08005cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cc6:	4b10      	ldr	r3, [pc, #64]	; (8005d08 <prvTaskExitError+0x4c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d009      	beq.n	8005ce4 <prvTaskExitError+0x28>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e7fe      	b.n	8005ce2 <prvTaskExitError+0x26>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cf6:	bf00      	nop
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0fc      	beq.n	8005cf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	2000000c 	.word	0x2000000c
 8005d0c:	00000000 	.word	0x00000000

08005d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <pxCurrentTCBConst2>)
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	6808      	ldr	r0, [r1, #0]
 8005d16:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d1a:	f380 8809 	msr	PSP, r0
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8811 	msr	BASEPRI, r0
 8005d2a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005d2e:	4770      	bx	lr

08005d30 <pxCurrentTCBConst2>:
 8005d30:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005d38:	4806      	ldr	r0, [pc, #24]	; (8005d54 <prvPortStartFirstTask+0x1c>)
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f380 8808 	msr	MSP, r0
 8005d42:	b662      	cpsie	i
 8005d44:	b661      	cpsie	f
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	df00      	svc	0
 8005d50:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d52:	bf00      	nop
 8005d54:	e000ed08 	.word	0xe000ed08

08005d58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b084      	sub	sp, #16
 8005d5c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d5e:	4b31      	ldr	r3, [pc, #196]	; (8005e24 <xPortStartScheduler+0xcc>)
 8005d60:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	22ff      	movs	r2, #255	; 0xff
 8005d6e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d80:	b2da      	uxtb	r2, r3
 8005d82:	4b29      	ldr	r3, [pc, #164]	; (8005e28 <xPortStartScheduler+0xd0>)
 8005d84:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d86:	4b29      	ldr	r3, [pc, #164]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005d88:	2207      	movs	r2, #7
 8005d8a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d8c:	e009      	b.n	8005da2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d8e:	4b27      	ldr	r3, [pc, #156]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3b01      	subs	r3, #1
 8005d94:	4a25      	ldr	r2, [pc, #148]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005d96:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d98:	78fb      	ldrb	r3, [r7, #3]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005da2:	78fb      	ldrb	r3, [r7, #3]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005daa:	2b80      	cmp	r3, #128	; 0x80
 8005dac:	d0ef      	beq.n	8005d8e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005dae:	4b1f      	ldr	r3, [pc, #124]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f1c3 0307 	rsb	r3, r3, #7
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d009      	beq.n	8005dce <xPortStartScheduler+0x76>
 8005dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbe:	f383 8811 	msr	BASEPRI, r3
 8005dc2:	f3bf 8f6f 	isb	sy
 8005dc6:	f3bf 8f4f 	dsb	sy
 8005dca:	60bb      	str	r3, [r7, #8]
 8005dcc:	e7fe      	b.n	8005dcc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dce:	4b17      	ldr	r3, [pc, #92]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	021b      	lsls	r3, r3, #8
 8005dd4:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005dd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dd8:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005de0:	4a12      	ldr	r2, [pc, #72]	; (8005e2c <xPortStartScheduler+0xd4>)
 8005de2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xPortStartScheduler+0xd8>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0f      	ldr	r2, [pc, #60]	; (8005e30 <xPortStartScheduler+0xd8>)
 8005df2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005df6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005df8:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <xPortStartScheduler+0xd8>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <xPortStartScheduler+0xd8>)
 8005dfe:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e04:	f000 f8b0 	bl	8005f68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e08:	4b0a      	ldr	r3, [pc, #40]	; (8005e34 <xPortStartScheduler+0xdc>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e0e:	f7ff ff93 	bl	8005d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e12:	f7ff f8db 	bl	8004fcc <vTaskSwitchContext>
	prvTaskExitError();
 8005e16:	f7ff ff51 	bl	8005cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	e000e400 	.word	0xe000e400
 8005e28:	20000d18 	.word	0x20000d18
 8005e2c:	20000d1c 	.word	0x20000d1c
 8005e30:	e000ed20 	.word	0xe000ed20
 8005e34:	2000000c 	.word	0x2000000c

08005e38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e50:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <vPortEnterCritical+0x54>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3301      	adds	r3, #1
 8005e56:	4a0d      	ldr	r2, [pc, #52]	; (8005e8c <vPortEnterCritical+0x54>)
 8005e58:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e5a:	4b0c      	ldr	r3, [pc, #48]	; (8005e8c <vPortEnterCritical+0x54>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d10e      	bne.n	8005e80 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e62:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <vPortEnterCritical+0x58>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <vPortEnterCritical+0x48>
 8005e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e70:	f383 8811 	msr	BASEPRI, r3
 8005e74:	f3bf 8f6f 	isb	sy
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	e7fe      	b.n	8005e7e <vPortEnterCritical+0x46>
	}
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	2000000c 	.word	0x2000000c
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e9a:	4b10      	ldr	r3, [pc, #64]	; (8005edc <vPortExitCritical+0x48>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <vPortExitCritical+0x22>
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	e7fe      	b.n	8005eb4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005eb6:	4b09      	ldr	r3, [pc, #36]	; (8005edc <vPortExitCritical+0x48>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	4a07      	ldr	r2, [pc, #28]	; (8005edc <vPortExitCritical+0x48>)
 8005ebe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005ec0:	4b06      	ldr	r3, [pc, #24]	; (8005edc <vPortExitCritical+0x48>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <vPortExitCritical+0x3e>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ed2:	bf00      	nop
 8005ed4:	370c      	adds	r7, #12
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bc80      	pop	{r7}
 8005eda:	4770      	bx	lr
 8005edc:	2000000c 	.word	0x2000000c

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ef0:	6010      	str	r0, [r2, #0]
 8005ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ef6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005efa:	f380 8811 	msr	BASEPRI, r0
 8005efe:	f7ff f865 	bl	8004fcc <vTaskSwitchContext>
 8005f02:	f04f 0000 	mov.w	r0, #0
 8005f06:	f380 8811 	msr	BASEPRI, r0
 8005f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005f0e:	6819      	ldr	r1, [r3, #0]
 8005f10:	6808      	ldr	r0, [r1, #0]
 8005f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005f16:	f380 8809 	msr	PSP, r0
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	4770      	bx	lr

08005f20 <pxCurrentTCBConst>:
 8005f20:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop

08005f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f40:	f7fe ff86 	bl	8004e50 <xTaskIncrementTick>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f4a:	4b06      	ldr	r3, [pc, #24]	; (8005f64 <SysTick_Handler+0x3c>)
 8005f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f50:	601a      	str	r2, [r3, #0]
 8005f52:	2300      	movs	r3, #0
 8005f54:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f5c:	bf00      	nop
 8005f5e:	3708      	adds	r7, #8
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	e000ed04 	.word	0xe000ed04

08005f68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f68:	b480      	push	{r7}
 8005f6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f6c:	4b0a      	ldr	r3, [pc, #40]	; (8005f98 <vPortSetupTimerInterrupt+0x30>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f72:	4b0a      	ldr	r3, [pc, #40]	; (8005f9c <vPortSetupTimerInterrupt+0x34>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f78:	4b09      	ldr	r3, [pc, #36]	; (8005fa0 <vPortSetupTimerInterrupt+0x38>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a09      	ldr	r2, [pc, #36]	; (8005fa4 <vPortSetupTimerInterrupt+0x3c>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	099b      	lsrs	r3, r3, #6
 8005f84:	4a08      	ldr	r2, [pc, #32]	; (8005fa8 <vPortSetupTimerInterrupt+0x40>)
 8005f86:	3b01      	subs	r3, #1
 8005f88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f8a:	4b03      	ldr	r3, [pc, #12]	; (8005f98 <vPortSetupTimerInterrupt+0x30>)
 8005f8c:	2207      	movs	r2, #7
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bc80      	pop	{r7}
 8005f96:	4770      	bx	lr
 8005f98:	e000e010 	.word	0xe000e010
 8005f9c:	e000e018 	.word	0xe000e018
 8005fa0:	20000000 	.word	0x20000000
 8005fa4:	10624dd3 	.word	0x10624dd3
 8005fa8:	e000e014 	.word	0xe000e014

08005fac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fb2:	f3ef 8305 	mrs	r3, IPSR
 8005fb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b0f      	cmp	r3, #15
 8005fbc:	d913      	bls.n	8005fe6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fbe:	4a15      	ldr	r2, [pc, #84]	; (8006014 <vPortValidateInterruptPriority+0x68>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fc8:	4b13      	ldr	r3, [pc, #76]	; (8006018 <vPortValidateInterruptPriority+0x6c>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	7afa      	ldrb	r2, [r7, #11]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d209      	bcs.n	8005fe6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	607b      	str	r3, [r7, #4]
 8005fe4:	e7fe      	b.n	8005fe4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	; (800601c <vPortValidateInterruptPriority+0x70>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fee:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <vPortValidateInterruptPriority+0x74>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d909      	bls.n	800600a <vPortValidateInterruptPriority+0x5e>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
 8006008:	e7fe      	b.n	8006008 <vPortValidateInterruptPriority+0x5c>
	}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	e000e3f0 	.word	0xe000e3f0
 8006018:	20000d18 	.word	0x20000d18
 800601c:	e000ed0c 	.word	0xe000ed0c
 8006020:	20000d1c 	.word	0x20000d1c

08006024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b08a      	sub	sp, #40	; 0x28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800602c:	2300      	movs	r3, #0
 800602e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006030:	f7fe fe56 	bl	8004ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006034:	4b57      	ldr	r3, [pc, #348]	; (8006194 <pvPortMalloc+0x170>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800603c:	f000 f90c 	bl	8006258 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006040:	4b55      	ldr	r3, [pc, #340]	; (8006198 <pvPortMalloc+0x174>)
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	f040 808c 	bne.w	8006166 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01c      	beq.n	800608e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006054:	2208      	movs	r2, #8
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	2b00      	cmp	r3, #0
 8006064:	d013      	beq.n	800608e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f023 0307 	bic.w	r3, r3, #7
 800606c:	3308      	adds	r3, #8
 800606e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <pvPortMalloc+0x6a>
 800607a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e7fe      	b.n	800608c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d068      	beq.n	8006166 <pvPortMalloc+0x142>
 8006094:	4b41      	ldr	r3, [pc, #260]	; (800619c <pvPortMalloc+0x178>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	429a      	cmp	r2, r3
 800609c:	d863      	bhi.n	8006166 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800609e:	4b40      	ldr	r3, [pc, #256]	; (80061a0 <pvPortMalloc+0x17c>)
 80060a0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060a2:	4b3f      	ldr	r3, [pc, #252]	; (80061a0 <pvPortMalloc+0x17c>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060a8:	e004      	b.n	80060b4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d903      	bls.n	80060c6 <pvPortMalloc+0xa2>
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f1      	bne.n	80060aa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060c6:	4b33      	ldr	r3, [pc, #204]	; (8006194 <pvPortMalloc+0x170>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d04a      	beq.n	8006166 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2208      	movs	r2, #8
 80060d6:	4413      	add	r3, r2
 80060d8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	6a3b      	ldr	r3, [r7, #32]
 80060e0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad2      	subs	r2, r2, r3
 80060ea:	2308      	movs	r3, #8
 80060ec:	005b      	lsls	r3, r3, #1
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d91e      	bls.n	8006130 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4413      	add	r3, r2
 80060f8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	f003 0307 	and.w	r3, r3, #7
 8006100:	2b00      	cmp	r3, #0
 8006102:	d009      	beq.n	8006118 <pvPortMalloc+0xf4>
 8006104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006108:	f383 8811 	msr	BASEPRI, r3
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	e7fe      	b.n	8006116 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800612a:	69b8      	ldr	r0, [r7, #24]
 800612c:	f000 f8f6 	bl	800631c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006130:	4b1a      	ldr	r3, [pc, #104]	; (800619c <pvPortMalloc+0x178>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	4a18      	ldr	r2, [pc, #96]	; (800619c <pvPortMalloc+0x178>)
 800613c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800613e:	4b17      	ldr	r3, [pc, #92]	; (800619c <pvPortMalloc+0x178>)
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4b18      	ldr	r3, [pc, #96]	; (80061a4 <pvPortMalloc+0x180>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	429a      	cmp	r2, r3
 8006148:	d203      	bcs.n	8006152 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <pvPortMalloc+0x178>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <pvPortMalloc+0x180>)
 8006150:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	4b10      	ldr	r3, [pc, #64]	; (8006198 <pvPortMalloc+0x174>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	431a      	orrs	r2, r3
 800615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006166:	f7fe fdc9 	bl	8004cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <pvPortMalloc+0x164>
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	e7fe      	b.n	8006186 <pvPortMalloc+0x162>
	return pvReturn;
 8006188:	69fb      	ldr	r3, [r7, #28]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3728      	adds	r7, #40	; 0x28
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20001928 	.word	0x20001928
 8006198:	20001934 	.word	0x20001934
 800619c:	2000192c 	.word	0x2000192c
 80061a0:	20001920 	.word	0x20001920
 80061a4:	20001930 	.word	0x20001930

080061a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d046      	beq.n	8006248 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ba:	2308      	movs	r3, #8
 80061bc:	425b      	negs	r3, r3
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b20      	ldr	r3, [pc, #128]	; (8006250 <vPortFree+0xa8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4013      	ands	r3, r2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d109      	bne.n	80061ea <vPortFree+0x42>
 80061d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e7fe      	b.n	80061e8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <vPortFree+0x5e>
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	60bb      	str	r3, [r7, #8]
 8006204:	e7fe      	b.n	8006204 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <vPortFree+0xa8>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d019      	beq.n	8006248 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d115      	bne.n	8006248 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortFree+0xa8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	43db      	mvns	r3, r3
 8006226:	401a      	ands	r2, r3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800622c:	f7fe fd58 	bl	8004ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vPortFree+0xac>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4413      	add	r3, r2
 800623a:	4a06      	ldr	r2, [pc, #24]	; (8006254 <vPortFree+0xac>)
 800623c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f000 f86c 	bl	800631c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006244:	f7fe fd5a 	bl	8004cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006248:	bf00      	nop
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20001934 	.word	0x20001934
 8006254:	2000192c 	.word	0x2000192c

08006258 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800625e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006262:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006264:	4b27      	ldr	r3, [pc, #156]	; (8006304 <prvHeapInit+0xac>)
 8006266:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00c      	beq.n	800628c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3307      	adds	r3, #7
 8006276:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0307 	bic.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a1f      	ldr	r2, [pc, #124]	; (8006304 <prvHeapInit+0xac>)
 8006288:	4413      	add	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006290:	4a1d      	ldr	r2, [pc, #116]	; (8006308 <prvHeapInit+0xb0>)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006296:	4b1c      	ldr	r3, [pc, #112]	; (8006308 <prvHeapInit+0xb0>)
 8006298:	2200      	movs	r2, #0
 800629a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062a4:	2208      	movs	r2, #8
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1a9b      	subs	r3, r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	4a15      	ldr	r2, [pc, #84]	; (800630c <prvHeapInit+0xb4>)
 80062b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062ba:	4b14      	ldr	r3, [pc, #80]	; (800630c <prvHeapInit+0xb4>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2200      	movs	r2, #0
 80062c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062c2:	4b12      	ldr	r3, [pc, #72]	; (800630c <prvHeapInit+0xb4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <prvHeapInit+0xb4>)
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a0a      	ldr	r2, [pc, #40]	; (8006310 <prvHeapInit+0xb8>)
 80062e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	4a09      	ldr	r2, [pc, #36]	; (8006314 <prvHeapInit+0xbc>)
 80062ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <prvHeapInit+0xc0>)
 80062f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062f6:	601a      	str	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	3714      	adds	r7, #20
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000d20 	.word	0x20000d20
 8006308:	20001920 	.word	0x20001920
 800630c:	20001928 	.word	0x20001928
 8006310:	20001930 	.word	0x20001930
 8006314:	2000192c 	.word	0x2000192c
 8006318:	20001934 	.word	0x20001934

0800631c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006324:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <prvInsertBlockIntoFreeList+0xa8>)
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	e002      	b.n	8006330 <prvInsertBlockIntoFreeList+0x14>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d8f7      	bhi.n	800632a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	4413      	add	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	429a      	cmp	r2, r3
 800634a:	d108      	bne.n	800635e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	441a      	add	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	441a      	add	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	429a      	cmp	r2, r3
 8006370:	d118      	bne.n	80063a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <prvInsertBlockIntoFreeList+0xac>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	429a      	cmp	r2, r3
 800637c:	d00d      	beq.n	800639a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	441a      	add	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	601a      	str	r2, [r3, #0]
 8006398:	e008      	b.n	80063ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800639a:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <prvInsertBlockIntoFreeList+0xac>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	601a      	str	r2, [r3, #0]
 80063a2:	e003      	b.n	80063ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d002      	beq.n	80063ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ba:	bf00      	nop
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	20001920 	.word	0x20001920
 80063c8:	20001928 	.word	0x20001928

080063cc <BMP280_init>:

//#include "bmp280.h"
extern I2C_HandleTypeDef hi2c2;

void BMP280_init(BMP280_SETTINGS handle)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b088      	sub	sp, #32
 80063d0:	af04      	add	r7, sp, #16
 80063d2:	463b      	mov	r3, r7
 80063d4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t config=((uint8_t)(handle.standy_time)<<5) | ((uint8_t)(handle.filter_coefficient)<<2) | ((uint8_t)(handle.spi3w));
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	015b      	lsls	r3, r3, #5
 80063dc:	b25a      	sxtb	r2, r3
 80063de:	793b      	ldrb	r3, [r7, #4]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	b25b      	sxtb	r3, r3
 80063e4:	4313      	orrs	r3, r2
 80063e6:	b25a      	sxtb	r2, r3
 80063e8:	797b      	ldrb	r3, [r7, #5]
 80063ea:	b25b      	sxtb	r3, r3
 80063ec:	4313      	orrs	r3, r2
 80063ee:	b25b      	sxtb	r3, r3
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	73fb      	strb	r3, [r7, #15]
	uint8_t ctrl_meas=((uint8_t)(handle.oversampling_temp)<<5) | ((uint8_t)(handle.oversampling_press)<<2) | ((uint8_t)(handle.powermode));
 80063f4:	787b      	ldrb	r3, [r7, #1]
 80063f6:	015b      	lsls	r3, r3, #5
 80063f8:	b25a      	sxtb	r2, r3
 80063fa:	78bb      	ldrb	r3, [r7, #2]
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	4313      	orrs	r3, r2
 8006402:	b25a      	sxtb	r2, r3
 8006404:	783b      	ldrb	r3, [r7, #0]
 8006406:	b25b      	sxtb	r3, r3
 8006408:	4313      	orrs	r3, r2
 800640a:	b25b      	sxtb	r3, r3
 800640c:	b2db      	uxtb	r3, r3
 800640e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, &config, sizeof(config), 0xFF);
 8006410:	23ff      	movs	r3, #255	; 0xff
 8006412:	9302      	str	r3, [sp, #8]
 8006414:	2301      	movs	r3, #1
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	f107 030f 	add.w	r3, r7, #15
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	2301      	movs	r3, #1
 8006420:	22f5      	movs	r2, #245	; 0xf5
 8006422:	21ec      	movs	r1, #236	; 0xec
 8006424:	4809      	ldr	r0, [pc, #36]	; (800644c <BMP280_init+0x80>)
 8006426:	f7fa ff15 	bl	8001254 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, sizeof(ctrl_meas), 0xFF);
 800642a:	23ff      	movs	r3, #255	; 0xff
 800642c:	9302      	str	r3, [sp, #8]
 800642e:	2301      	movs	r3, #1
 8006430:	9301      	str	r3, [sp, #4]
 8006432:	f107 030e 	add.w	r3, r7, #14
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	2301      	movs	r3, #1
 800643a:	22f4      	movs	r2, #244	; 0xf4
 800643c:	21ec      	movs	r1, #236	; 0xec
 800643e:	4803      	ldr	r0, [pc, #12]	; (800644c <BMP280_init+0x80>)
 8006440:	f7fa ff08 	bl	8001254 <HAL_I2C_Mem_Write>
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	2000196c 	.word	0x2000196c

08006450 <BMP280_temp_read>:

uint32_t BMP280_temp_read(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b08a      	sub	sp, #40	; 0x28
 8006454:	af04      	add	r7, sp, #16
	uint32_t temp=0;
 8006456:	2300      	movs	r3, #0
 8006458:	617b      	str	r3, [r7, #20]
	uint8_t temp_reg[3]={
 800645a:	2300      	movs	r3, #0
 800645c:	713b      	strb	r3, [r7, #4]
 800645e:	2300      	movs	r3, #0
 8006460:	717b      	strb	r3, [r7, #5]
 8006462:	2300      	movs	r3, #0
 8006464:	71bb      	strb	r3, [r7, #6]
			0,0,0
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, temp_reg, sizeof(temp_reg), 0xFF);
 8006466:	23ff      	movs	r3, #255	; 0xff
 8006468:	9302      	str	r3, [sp, #8]
 800646a:	2303      	movs	r3, #3
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	1d3b      	adds	r3, r7, #4
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	2301      	movs	r3, #1
 8006474:	22fa      	movs	r2, #250	; 0xfa
 8006476:	21ed      	movs	r1, #237	; 0xed
 8006478:	480b      	ldr	r0, [pc, #44]	; (80064a8 <BMP280_temp_read+0x58>)
 800647a:	f7fa ffe5 	bl	8001448 <HAL_I2C_Mem_Read>

	uint32_t temp_msb=temp_reg[0];
 800647e:	793b      	ldrb	r3, [r7, #4]
 8006480:	613b      	str	r3, [r7, #16]
	uint32_t temp_lsb=temp_reg[1];
 8006482:	797b      	ldrb	r3, [r7, #5]
 8006484:	60fb      	str	r3, [r7, #12]
	uint32_t temp_xlsb=temp_reg[2];
 8006486:	79bb      	ldrb	r3, [r7, #6]
 8006488:	60bb      	str	r3, [r7, #8]

	temp=(temp_xlsb>>4) | (temp_lsb<<4) | (temp_msb<<12);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	091a      	lsrs	r2, r3, #4
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	011b      	lsls	r3, r3, #4
 8006492:	431a      	orrs	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	031b      	lsls	r3, r3, #12
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]

	return temp;
 800649c:	697b      	ldr	r3, [r7, #20]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	2000196c 	.word	0x2000196c

080064ac <getDig_T>:

void getDig_T(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b086      	sub	sp, #24
 80064b0:	af04      	add	r7, sp, #16
	uint8_t temp_lsb=0;
 80064b2:	2300      	movs	r3, #0
 80064b4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_msb=0;
 80064b6:	2300      	movs	r3, #0
 80064b8:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 80064ba:	23ff      	movs	r3, #255	; 0xff
 80064bc:	9302      	str	r3, [sp, #8]
 80064be:	2301      	movs	r3, #1
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	1dfb      	adds	r3, r7, #7
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	2301      	movs	r3, #1
 80064c8:	2288      	movs	r2, #136	; 0x88
 80064ca:	21ed      	movs	r1, #237	; 0xed
 80064cc:	482f      	ldr	r0, [pc, #188]	; (800658c <getDig_T+0xe0>)
 80064ce:	f7fa ffbb 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 80064d2:	23ff      	movs	r3, #255	; 0xff
 80064d4:	9302      	str	r3, [sp, #8]
 80064d6:	2301      	movs	r3, #1
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	1dbb      	adds	r3, r7, #6
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	2301      	movs	r3, #1
 80064e0:	2289      	movs	r2, #137	; 0x89
 80064e2:	21ed      	movs	r1, #237	; 0xed
 80064e4:	4829      	ldr	r0, [pc, #164]	; (800658c <getDig_T+0xe0>)
 80064e6:	f7fa ffaf 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_T1= temp_lsb | (((uint16_t)temp_msb)<<8);
 80064ea:	79fb      	ldrb	r3, [r7, #7]
 80064ec:	b21a      	sxth	r2, r3
 80064ee:	79bb      	ldrb	r3, [r7, #6]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	b21b      	sxth	r3, r3
 80064f4:	4313      	orrs	r3, r2
 80064f6:	b21b      	sxth	r3, r3
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	4b25      	ldr	r3, [pc, #148]	; (8006590 <getDig_T+0xe4>)
 80064fc:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 80064fe:	23ff      	movs	r3, #255	; 0xff
 8006500:	9302      	str	r3, [sp, #8]
 8006502:	2301      	movs	r3, #1
 8006504:	9301      	str	r3, [sp, #4]
 8006506:	1dfb      	adds	r3, r7, #7
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	2301      	movs	r3, #1
 800650c:	228a      	movs	r2, #138	; 0x8a
 800650e:	21ed      	movs	r1, #237	; 0xed
 8006510:	481e      	ldr	r0, [pc, #120]	; (800658c <getDig_T+0xe0>)
 8006512:	f7fa ff99 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 8006516:	23ff      	movs	r3, #255	; 0xff
 8006518:	9302      	str	r3, [sp, #8]
 800651a:	2301      	movs	r3, #1
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	1dbb      	adds	r3, r7, #6
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	2301      	movs	r3, #1
 8006524:	228b      	movs	r2, #139	; 0x8b
 8006526:	21ed      	movs	r1, #237	; 0xed
 8006528:	4818      	ldr	r0, [pc, #96]	; (800658c <getDig_T+0xe0>)
 800652a:	f7fa ff8d 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_T2= temp_lsb | (((uint16_t)temp_msb)<<8);
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	b21a      	sxth	r2, r3
 8006532:	79bb      	ldrb	r3, [r7, #6]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	b21b      	sxth	r3, r3
 8006538:	4313      	orrs	r3, r2
 800653a:	b21a      	sxth	r2, r3
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <getDig_T+0xe8>)
 800653e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 8006540:	23ff      	movs	r3, #255	; 0xff
 8006542:	9302      	str	r3, [sp, #8]
 8006544:	2301      	movs	r3, #1
 8006546:	9301      	str	r3, [sp, #4]
 8006548:	1dfb      	adds	r3, r7, #7
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2301      	movs	r3, #1
 800654e:	228c      	movs	r2, #140	; 0x8c
 8006550:	21ed      	movs	r1, #237	; 0xed
 8006552:	480e      	ldr	r0, [pc, #56]	; (800658c <getDig_T+0xe0>)
 8006554:	f7fa ff78 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 8006558:	23ff      	movs	r3, #255	; 0xff
 800655a:	9302      	str	r3, [sp, #8]
 800655c:	2301      	movs	r3, #1
 800655e:	9301      	str	r3, [sp, #4]
 8006560:	1dbb      	adds	r3, r7, #6
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	2301      	movs	r3, #1
 8006566:	228d      	movs	r2, #141	; 0x8d
 8006568:	21ed      	movs	r1, #237	; 0xed
 800656a:	4808      	ldr	r0, [pc, #32]	; (800658c <getDig_T+0xe0>)
 800656c:	f7fa ff6c 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_T3= temp_lsb | (((uint16_t)temp_msb)<<8);
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	b21a      	sxth	r2, r3
 8006574:	79bb      	ldrb	r3, [r7, #6]
 8006576:	021b      	lsls	r3, r3, #8
 8006578:	b21b      	sxth	r3, r3
 800657a:	4313      	orrs	r3, r2
 800657c:	b21a      	sxth	r2, r3
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <getDig_T+0xec>)
 8006580:	801a      	strh	r2, [r3, #0]

}
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000196c 	.word	0x2000196c
 8006590:	20001942 	.word	0x20001942
 8006594:	20001944 	.word	0x20001944
 8006598:	2000195e 	.word	0x2000195e

0800659c <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
	int32_t var1,var2,T;

	var1=((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	10da      	asrs	r2, r3, #3
 80065a8:	4b18      	ldr	r3, [pc, #96]	; (800660c <bmp280_compensate_T_int32+0x70>)
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	4a17      	ldr	r2, [pc, #92]	; (8006610 <bmp280_compensate_T_int32+0x74>)
 80065b2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80065b6:	fb02 f303 	mul.w	r3, r2, r3
 80065ba:	12db      	asrs	r3, r3, #11
 80065bc:	617b      	str	r3, [r7, #20]
	var2=(((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	111b      	asrs	r3, r3, #4
 80065c2:	4a12      	ldr	r2, [pc, #72]	; (800660c <bmp280_compensate_T_int32+0x70>)
 80065c4:	8812      	ldrh	r2, [r2, #0]
 80065c6:	1a9b      	subs	r3, r3, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	1112      	asrs	r2, r2, #4
 80065cc:	490f      	ldr	r1, [pc, #60]	; (800660c <bmp280_compensate_T_int32+0x70>)
 80065ce:	8809      	ldrh	r1, [r1, #0]
 80065d0:	1a52      	subs	r2, r2, r1
 80065d2:	fb02 f303 	mul.w	r3, r2, r3
 80065d6:	131b      	asrs	r3, r3, #12
 80065d8:	4a0e      	ldr	r2, [pc, #56]	; (8006614 <bmp280_compensate_T_int32+0x78>)
 80065da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80065de:	fb02 f303 	mul.w	r3, r2, r3
 80065e2:	139b      	asrs	r3, r3, #14
 80065e4:	613b      	str	r3, [r7, #16]
	t_fine=var1+var2;
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4413      	add	r3, r2
 80065ec:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <bmp280_compensate_T_int32+0x7c>)
 80065ee:	6013      	str	r3, [r2, #0]
	T=(t_fine*5+128)>>8;
 80065f0:	4b09      	ldr	r3, [pc, #36]	; (8006618 <bmp280_compensate_T_int32+0x7c>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	3380      	adds	r3, #128	; 0x80
 80065fc:	121b      	asrs	r3, r3, #8
 80065fe:	60fb      	str	r3, [r7, #12]

	return T;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr
 800660c:	20001942 	.word	0x20001942
 8006610:	20001944 	.word	0x20001944
 8006614:	2000195e 	.word	0x2000195e
 8006618:	20001ae4 	.word	0x20001ae4

0800661c <BMP280_press_read>:

uint32_t BMP280_press_read(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	; 0x28
 8006620:	af04      	add	r7, sp, #16
	uint32_t press=0;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]
	uint8_t press_reg[3]={
 8006626:	2300      	movs	r3, #0
 8006628:	713b      	strb	r3, [r7, #4]
 800662a:	2300      	movs	r3, #0
 800662c:	717b      	strb	r3, [r7, #5]
 800662e:	2300      	movs	r3, #0
 8006630:	71bb      	strb	r3, [r7, #6]
			0,0,0,
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, press_reg, sizeof(press_reg), 0xFF);
 8006632:	23ff      	movs	r3, #255	; 0xff
 8006634:	9302      	str	r3, [sp, #8]
 8006636:	2303      	movs	r3, #3
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	1d3b      	adds	r3, r7, #4
 800663c:	9300      	str	r3, [sp, #0]
 800663e:	2301      	movs	r3, #1
 8006640:	22f7      	movs	r2, #247	; 0xf7
 8006642:	21ed      	movs	r1, #237	; 0xed
 8006644:	480b      	ldr	r0, [pc, #44]	; (8006674 <BMP280_press_read+0x58>)
 8006646:	f7fa feff 	bl	8001448 <HAL_I2C_Mem_Read>

	uint32_t press_msb=press_reg[0];
 800664a:	793b      	ldrb	r3, [r7, #4]
 800664c:	613b      	str	r3, [r7, #16]
	uint32_t press_lsb=press_reg[1];
 800664e:	797b      	ldrb	r3, [r7, #5]
 8006650:	60fb      	str	r3, [r7, #12]
	uint32_t press_xlsb=press_reg[2];
 8006652:	79bb      	ldrb	r3, [r7, #6]
 8006654:	60bb      	str	r3, [r7, #8]

	press= (press_xlsb>>4) | (press_lsb<<4) | (press_msb<<12);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	091a      	lsrs	r2, r3, #4
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	431a      	orrs	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	031b      	lsls	r3, r3, #12
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

	return press;
 8006668:	697b      	ldr	r3, [r7, #20]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	2000196c 	.word	0x2000196c

08006678 <getDig_P>:

void getDig_P(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af04      	add	r7, sp, #16
	uint8_t press_lsb=0;
 800667e:	2300      	movs	r3, #0
 8006680:	71fb      	strb	r3, [r7, #7]
	uint8_t press_msb=0;
 8006682:	2300      	movs	r3, #0
 8006684:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8006686:	23ff      	movs	r3, #255	; 0xff
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	2301      	movs	r3, #1
 800668c:	9301      	str	r3, [sp, #4]
 800668e:	1dfb      	adds	r3, r7, #7
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2301      	movs	r3, #1
 8006694:	228e      	movs	r2, #142	; 0x8e
 8006696:	21ed      	movs	r1, #237	; 0xed
 8006698:	4892      	ldr	r0, [pc, #584]	; (80068e4 <getDig_P+0x26c>)
 800669a:	f7fa fed5 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800669e:	23ff      	movs	r3, #255	; 0xff
 80066a0:	9302      	str	r3, [sp, #8]
 80066a2:	2301      	movs	r3, #1
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	1dbb      	adds	r3, r7, #6
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	2301      	movs	r3, #1
 80066ac:	228f      	movs	r2, #143	; 0x8f
 80066ae:	21ed      	movs	r1, #237	; 0xed
 80066b0:	488c      	ldr	r0, [pc, #560]	; (80068e4 <getDig_P+0x26c>)
 80066b2:	f7fa fec9 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P1= press_lsb | (((uint16_t)press_msb)<<8);
 80066b6:	79fb      	ldrb	r3, [r7, #7]
 80066b8:	b21a      	sxth	r2, r3
 80066ba:	79bb      	ldrb	r3, [r7, #6]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	b21b      	sxth	r3, r3
 80066c0:	4313      	orrs	r3, r2
 80066c2:	b21b      	sxth	r3, r3
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <getDig_P+0x270>)
 80066c8:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80066ca:	23ff      	movs	r3, #255	; 0xff
 80066cc:	9302      	str	r3, [sp, #8]
 80066ce:	2301      	movs	r3, #1
 80066d0:	9301      	str	r3, [sp, #4]
 80066d2:	1dfb      	adds	r3, r7, #7
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	2301      	movs	r3, #1
 80066d8:	2290      	movs	r2, #144	; 0x90
 80066da:	21ed      	movs	r1, #237	; 0xed
 80066dc:	4881      	ldr	r0, [pc, #516]	; (80068e4 <getDig_P+0x26c>)
 80066de:	f7fa feb3 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80066e2:	23ff      	movs	r3, #255	; 0xff
 80066e4:	9302      	str	r3, [sp, #8]
 80066e6:	2301      	movs	r3, #1
 80066e8:	9301      	str	r3, [sp, #4]
 80066ea:	1dbb      	adds	r3, r7, #6
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2301      	movs	r3, #1
 80066f0:	2291      	movs	r2, #145	; 0x91
 80066f2:	21ed      	movs	r1, #237	; 0xed
 80066f4:	487b      	ldr	r0, [pc, #492]	; (80068e4 <getDig_P+0x26c>)
 80066f6:	f7fa fea7 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P2= press_lsb | (((uint16_t)press_msb)<<8);
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	b21a      	sxth	r2, r3
 80066fe:	79bb      	ldrb	r3, [r7, #6]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	b21b      	sxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b21a      	sxth	r2, r3
 8006708:	4b78      	ldr	r3, [pc, #480]	; (80068ec <getDig_P+0x274>)
 800670a:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 800670c:	23ff      	movs	r3, #255	; 0xff
 800670e:	9302      	str	r3, [sp, #8]
 8006710:	2301      	movs	r3, #1
 8006712:	9301      	str	r3, [sp, #4]
 8006714:	1dfb      	adds	r3, r7, #7
 8006716:	9300      	str	r3, [sp, #0]
 8006718:	2301      	movs	r3, #1
 800671a:	2292      	movs	r2, #146	; 0x92
 800671c:	21ed      	movs	r1, #237	; 0xed
 800671e:	4871      	ldr	r0, [pc, #452]	; (80068e4 <getDig_P+0x26c>)
 8006720:	f7fa fe92 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8006724:	23ff      	movs	r3, #255	; 0xff
 8006726:	9302      	str	r3, [sp, #8]
 8006728:	2301      	movs	r3, #1
 800672a:	9301      	str	r3, [sp, #4]
 800672c:	1dbb      	adds	r3, r7, #6
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	2301      	movs	r3, #1
 8006732:	2293      	movs	r2, #147	; 0x93
 8006734:	21ed      	movs	r1, #237	; 0xed
 8006736:	486b      	ldr	r0, [pc, #428]	; (80068e4 <getDig_P+0x26c>)
 8006738:	f7fa fe86 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P3= press_lsb | (((uint16_t)press_msb)<<8);
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	b21a      	sxth	r2, r3
 8006740:	79bb      	ldrb	r3, [r7, #6]
 8006742:	021b      	lsls	r3, r3, #8
 8006744:	b21b      	sxth	r3, r3
 8006746:	4313      	orrs	r3, r2
 8006748:	b21a      	sxth	r2, r3
 800674a:	4b69      	ldr	r3, [pc, #420]	; (80068f0 <getDig_P+0x278>)
 800674c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 800674e:	23ff      	movs	r3, #255	; 0xff
 8006750:	9302      	str	r3, [sp, #8]
 8006752:	2301      	movs	r3, #1
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	1dfb      	adds	r3, r7, #7
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	2301      	movs	r3, #1
 800675c:	2294      	movs	r2, #148	; 0x94
 800675e:	21ed      	movs	r1, #237	; 0xed
 8006760:	4860      	ldr	r0, [pc, #384]	; (80068e4 <getDig_P+0x26c>)
 8006762:	f7fa fe71 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8006766:	23ff      	movs	r3, #255	; 0xff
 8006768:	9302      	str	r3, [sp, #8]
 800676a:	2301      	movs	r3, #1
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	1dbb      	adds	r3, r7, #6
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	2301      	movs	r3, #1
 8006774:	2295      	movs	r2, #149	; 0x95
 8006776:	21ed      	movs	r1, #237	; 0xed
 8006778:	485a      	ldr	r0, [pc, #360]	; (80068e4 <getDig_P+0x26c>)
 800677a:	f7fa fe65 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P4= press_lsb | (((uint16_t)press_msb)<<8);
 800677e:	79fb      	ldrb	r3, [r7, #7]
 8006780:	b21a      	sxth	r2, r3
 8006782:	79bb      	ldrb	r3, [r7, #6]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	b21b      	sxth	r3, r3
 8006788:	4313      	orrs	r3, r2
 800678a:	b21a      	sxth	r2, r3
 800678c:	4b59      	ldr	r3, [pc, #356]	; (80068f4 <getDig_P+0x27c>)
 800678e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8006790:	23ff      	movs	r3, #255	; 0xff
 8006792:	9302      	str	r3, [sp, #8]
 8006794:	2301      	movs	r3, #1
 8006796:	9301      	str	r3, [sp, #4]
 8006798:	1dfb      	adds	r3, r7, #7
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	2301      	movs	r3, #1
 800679e:	2296      	movs	r2, #150	; 0x96
 80067a0:	21ed      	movs	r1, #237	; 0xed
 80067a2:	4850      	ldr	r0, [pc, #320]	; (80068e4 <getDig_P+0x26c>)
 80067a4:	f7fa fe50 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80067a8:	23ff      	movs	r3, #255	; 0xff
 80067aa:	9302      	str	r3, [sp, #8]
 80067ac:	2301      	movs	r3, #1
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	1dbb      	adds	r3, r7, #6
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	2301      	movs	r3, #1
 80067b6:	2297      	movs	r2, #151	; 0x97
 80067b8:	21ed      	movs	r1, #237	; 0xed
 80067ba:	484a      	ldr	r0, [pc, #296]	; (80068e4 <getDig_P+0x26c>)
 80067bc:	f7fa fe44 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P5= press_lsb | (((uint16_t)press_msb)<<8);
 80067c0:	79fb      	ldrb	r3, [r7, #7]
 80067c2:	b21a      	sxth	r2, r3
 80067c4:	79bb      	ldrb	r3, [r7, #6]
 80067c6:	021b      	lsls	r3, r3, #8
 80067c8:	b21b      	sxth	r3, r3
 80067ca:	4313      	orrs	r3, r2
 80067cc:	b21a      	sxth	r2, r3
 80067ce:	4b4a      	ldr	r3, [pc, #296]	; (80068f8 <getDig_P+0x280>)
 80067d0:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80067d2:	23ff      	movs	r3, #255	; 0xff
 80067d4:	9302      	str	r3, [sp, #8]
 80067d6:	2301      	movs	r3, #1
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	1dfb      	adds	r3, r7, #7
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	2301      	movs	r3, #1
 80067e0:	2298      	movs	r2, #152	; 0x98
 80067e2:	21ed      	movs	r1, #237	; 0xed
 80067e4:	483f      	ldr	r0, [pc, #252]	; (80068e4 <getDig_P+0x26c>)
 80067e6:	f7fa fe2f 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80067ea:	23ff      	movs	r3, #255	; 0xff
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	2301      	movs	r3, #1
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	1dbb      	adds	r3, r7, #6
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	2301      	movs	r3, #1
 80067f8:	2299      	movs	r2, #153	; 0x99
 80067fa:	21ed      	movs	r1, #237	; 0xed
 80067fc:	4839      	ldr	r0, [pc, #228]	; (80068e4 <getDig_P+0x26c>)
 80067fe:	f7fa fe23 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P6= press_lsb | (((uint16_t)press_msb)<<8);
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	b21a      	sxth	r2, r3
 8006806:	79bb      	ldrb	r3, [r7, #6]
 8006808:	021b      	lsls	r3, r3, #8
 800680a:	b21b      	sxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b21a      	sxth	r2, r3
 8006810:	4b3a      	ldr	r3, [pc, #232]	; (80068fc <getDig_P+0x284>)
 8006812:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8006814:	23ff      	movs	r3, #255	; 0xff
 8006816:	9302      	str	r3, [sp, #8]
 8006818:	2301      	movs	r3, #1
 800681a:	9301      	str	r3, [sp, #4]
 800681c:	1dfb      	adds	r3, r7, #7
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2301      	movs	r3, #1
 8006822:	229a      	movs	r2, #154	; 0x9a
 8006824:	21ed      	movs	r1, #237	; 0xed
 8006826:	482f      	ldr	r0, [pc, #188]	; (80068e4 <getDig_P+0x26c>)
 8006828:	f7fa fe0e 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800682c:	23ff      	movs	r3, #255	; 0xff
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	2301      	movs	r3, #1
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	1dbb      	adds	r3, r7, #6
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2301      	movs	r3, #1
 800683a:	229b      	movs	r2, #155	; 0x9b
 800683c:	21ed      	movs	r1, #237	; 0xed
 800683e:	4829      	ldr	r0, [pc, #164]	; (80068e4 <getDig_P+0x26c>)
 8006840:	f7fa fe02 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P7= press_lsb | (((uint16_t)press_msb)<<8);
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	b21a      	sxth	r2, r3
 8006848:	79bb      	ldrb	r3, [r7, #6]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	b21b      	sxth	r3, r3
 800684e:	4313      	orrs	r3, r2
 8006850:	b21a      	sxth	r2, r3
 8006852:	4b2b      	ldr	r3, [pc, #172]	; (8006900 <getDig_P+0x288>)
 8006854:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8006856:	23ff      	movs	r3, #255	; 0xff
 8006858:	9302      	str	r3, [sp, #8]
 800685a:	2301      	movs	r3, #1
 800685c:	9301      	str	r3, [sp, #4]
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	2301      	movs	r3, #1
 8006864:	229c      	movs	r2, #156	; 0x9c
 8006866:	21ed      	movs	r1, #237	; 0xed
 8006868:	481e      	ldr	r0, [pc, #120]	; (80068e4 <getDig_P+0x26c>)
 800686a:	f7fa fded 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800686e:	23ff      	movs	r3, #255	; 0xff
 8006870:	9302      	str	r3, [sp, #8]
 8006872:	2301      	movs	r3, #1
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	1dbb      	adds	r3, r7, #6
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	2301      	movs	r3, #1
 800687c:	229d      	movs	r2, #157	; 0x9d
 800687e:	21ed      	movs	r1, #237	; 0xed
 8006880:	4818      	ldr	r0, [pc, #96]	; (80068e4 <getDig_P+0x26c>)
 8006882:	f7fa fde1 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P8= press_lsb | (((uint16_t)press_msb)<<8);
 8006886:	79fb      	ldrb	r3, [r7, #7]
 8006888:	b21a      	sxth	r2, r3
 800688a:	79bb      	ldrb	r3, [r7, #6]
 800688c:	021b      	lsls	r3, r3, #8
 800688e:	b21b      	sxth	r3, r3
 8006890:	4313      	orrs	r3, r2
 8006892:	b21a      	sxth	r2, r3
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <getDig_P+0x28c>)
 8006896:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8006898:	23ff      	movs	r3, #255	; 0xff
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	2301      	movs	r3, #1
 800689e:	9301      	str	r3, [sp, #4]
 80068a0:	1dfb      	adds	r3, r7, #7
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	2301      	movs	r3, #1
 80068a6:	229e      	movs	r2, #158	; 0x9e
 80068a8:	21ed      	movs	r1, #237	; 0xed
 80068aa:	480e      	ldr	r0, [pc, #56]	; (80068e4 <getDig_P+0x26c>)
 80068ac:	f7fa fdcc 	bl	8001448 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80068b0:	23ff      	movs	r3, #255	; 0xff
 80068b2:	9302      	str	r3, [sp, #8]
 80068b4:	2301      	movs	r3, #1
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	1dbb      	adds	r3, r7, #6
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2301      	movs	r3, #1
 80068be:	229f      	movs	r2, #159	; 0x9f
 80068c0:	21ed      	movs	r1, #237	; 0xed
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <getDig_P+0x26c>)
 80068c4:	f7fa fdc0 	bl	8001448 <HAL_I2C_Mem_Read>
	dig_P9= press_lsb | (((uint16_t)press_msb)<<8);
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	b21a      	sxth	r2, r3
 80068cc:	79bb      	ldrb	r3, [r7, #6]
 80068ce:	021b      	lsls	r3, r3, #8
 80068d0:	b21b      	sxth	r3, r3
 80068d2:	4313      	orrs	r3, r2
 80068d4:	b21a      	sxth	r2, r3
 80068d6:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <getDig_P+0x290>)
 80068d8:	801a      	strh	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	2000196c 	.word	0x2000196c
 80068e8:	20001956 	.word	0x20001956
 80068ec:	2000194c 	.word	0x2000194c
 80068f0:	20001958 	.word	0x20001958
 80068f4:	2000194e 	.word	0x2000194e
 80068f8:	20001954 	.word	0x20001954
 80068fc:	20001960 	.word	0x20001960
 8006900:	20001940 	.word	0x20001940
 8006904:	2000195a 	.word	0x2000195a
 8006908:	2000195c 	.word	0x2000195c

0800690c <bmp280_compensate_P_int32>:

	return (uint32_t)p;
}

uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	int32_t var1,var2;
	uint32_t p;
	var1=(((int32_t)t_fine)>>1)-(int32_t)64000;
 8006914:	4b4a      	ldr	r3, [pc, #296]	; (8006a40 <bmp280_compensate_P_int32+0x134>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	105b      	asrs	r3, r3, #1
 800691a:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800691e:	613b      	str	r3, [r7, #16]
	var2=(((var1>>2)*(var1>>2))>>11)*((int32_t)dig_P6);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	109b      	asrs	r3, r3, #2
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	1092      	asrs	r2, r2, #2
 8006928:	fb02 f303 	mul.w	r3, r2, r3
 800692c:	12db      	asrs	r3, r3, #11
 800692e:	4a45      	ldr	r2, [pc, #276]	; (8006a44 <bmp280_compensate_P_int32+0x138>)
 8006930:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006934:	fb02 f303 	mul.w	r3, r2, r3
 8006938:	60fb      	str	r3, [r7, #12]
	var2=var2+((var1*((int32_t)dig_P5))<<1);
 800693a:	4b43      	ldr	r3, [pc, #268]	; (8006a48 <bmp280_compensate_P_int32+0x13c>)
 800693c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006940:	461a      	mov	r2, r3
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	fb03 f302 	mul.w	r3, r3, r2
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4413      	add	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]
	var2=(var2>>2)+(((int32_t)dig_P4)<<16);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	109a      	asrs	r2, r3, #2
 8006954:	4b3d      	ldr	r3, [pc, #244]	; (8006a4c <bmp280_compensate_P_int32+0x140>)
 8006956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800695a:	041b      	lsls	r3, r3, #16
 800695c:	4413      	add	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]
	var1=(((dig_P3*(((var1>>2)*(var1>>2))>>13))>>3)+((((int32_t)dig_P2)*var1)>>1))>>18;
 8006960:	4b3b      	ldr	r3, [pc, #236]	; (8006a50 <bmp280_compensate_P_int32+0x144>)
 8006962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006966:	4619      	mov	r1, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	109b      	asrs	r3, r3, #2
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	1092      	asrs	r2, r2, #2
 8006970:	fb02 f303 	mul.w	r3, r2, r3
 8006974:	135b      	asrs	r3, r3, #13
 8006976:	fb03 f301 	mul.w	r3, r3, r1
 800697a:	10da      	asrs	r2, r3, #3
 800697c:	4b35      	ldr	r3, [pc, #212]	; (8006a54 <bmp280_compensate_P_int32+0x148>)
 800697e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006982:	4619      	mov	r1, r3
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	fb03 f301 	mul.w	r3, r3, r1
 800698a:	105b      	asrs	r3, r3, #1
 800698c:	4413      	add	r3, r2
 800698e:	149b      	asrs	r3, r3, #18
 8006990:	613b      	str	r3, [r7, #16]
	var1=((((32768+var1))*((int32_t)dig_P1))>>15);
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006998:	4a2f      	ldr	r2, [pc, #188]	; (8006a58 <bmp280_compensate_P_int32+0x14c>)
 800699a:	8812      	ldrh	r2, [r2, #0]
 800699c:	fb02 f303 	mul.w	r3, r2, r3
 80069a0:	13db      	asrs	r3, r3, #15
 80069a2:	613b      	str	r3, [r7, #16]
	if(var1==0)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d101      	bne.n	80069ae <bmp280_compensate_P_int32+0xa2>
	{
		return 0;
 80069aa:	2300      	movs	r3, #0
 80069ac:	e042      	b.n	8006a34 <bmp280_compensate_P_int32+0x128>
	}
	p=(((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	425b      	negs	r3, r3
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	1312      	asrs	r2, r2, #12
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	f640 4235 	movw	r2, #3125	; 0xc35
 80069bc:	fb02 f303 	mul.w	r3, r2, r3
 80069c0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80069c4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80069c8:	617b      	str	r3, [r7, #20]
	if(p<0x80000000)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	db06      	blt.n	80069de <bmp280_compensate_P_int32+0xd2>
	{
		p=(p<<1)/((uint32_t)var1);
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	005a      	lsls	r2, r3, #1
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069da:	617b      	str	r3, [r7, #20]
 80069dc:	e005      	b.n	80069ea <bmp280_compensate_P_int32+0xde>
	}
	else
	{
		p=(p/(uint32_t)var1)*2;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	697a      	ldr	r2, [r7, #20]
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	005b      	lsls	r3, r3, #1
 80069e8:	617b      	str	r3, [r7, #20]
	}
	var1=(((int32_t)dig_P9)*((int32_t)(((p>>3)*(p>>3))>>13)))>>12;
 80069ea:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <bmp280_compensate_P_int32+0x150>)
 80069ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f0:	4619      	mov	r1, r3
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	08db      	lsrs	r3, r3, #3
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	08d2      	lsrs	r2, r2, #3
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	0b5b      	lsrs	r3, r3, #13
 8006a00:	fb03 f301 	mul.w	r3, r3, r1
 8006a04:	131b      	asrs	r3, r3, #12
 8006a06:	613b      	str	r3, [r7, #16]
	var2=(((int32_t)(p>>2))*((int32_t)dig_P8))>>13;
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4b14      	ldr	r3, [pc, #80]	; (8006a60 <bmp280_compensate_P_int32+0x154>)
 8006a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a14:	fb03 f302 	mul.w	r3, r3, r2
 8006a18:	135b      	asrs	r3, r3, #13
 8006a1a:	60fb      	str	r3, [r7, #12]
	p=(uint32_t)((int32_t)p+((var1+var2+dig_P7)>>4));
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	4a10      	ldr	r2, [pc, #64]	; (8006a64 <bmp280_compensate_P_int32+0x158>)
 8006a24:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006a28:	4413      	add	r3, r2
 8006a2a:	111a      	asrs	r2, r3, #4
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

	return p;
 8006a32:	697b      	ldr	r3, [r7, #20]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bc80      	pop	{r7}
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	20001ae4 	.word	0x20001ae4
 8006a44:	20001960 	.word	0x20001960
 8006a48:	20001954 	.word	0x20001954
 8006a4c:	2000194e 	.word	0x2000194e
 8006a50:	20001958 	.word	0x20001958
 8006a54:	2000194c 	.word	0x2000194c
 8006a58:	20001956 	.word	0x20001956
 8006a5c:	2000195c 	.word	0x2000195c
 8006a60:	2000195a 	.word	0x2000195a
 8006a64:	20001940 	.word	0x20001940

08006a68 <delay_us>:
		0,0,0,0,0,
};
uint8_t count=1;

void delay_us(uint32_t time)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	uint32_t delay = (HAL_RCC_GetHCLKFreq() / 4000000 * time);
 8006a70:	f7fb fe72 	bl	8002758 <HAL_RCC_GetHCLKFreq>
 8006a74:	4602      	mov	r2, r0
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <delay_us+0x34>)
 8006a78:	fba3 2302 	umull	r2, r3, r3, r2
 8006a7c:	0d1a      	lsrs	r2, r3, #20
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	fb02 f303 	mul.w	r3, r2, r3
 8006a84:	60fb      	str	r3, [r7, #12]
	while(delay--);
 8006a86:	bf00      	nop
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	1e5a      	subs	r2, r3, #1
 8006a8c:	60fa      	str	r2, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1fa      	bne.n	8006a88 <delay_us+0x20>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	431bde83 	.word	0x431bde83

08006aa0 <DHT11_readByte>:

uint8_t DHT11_readByte(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
	uint8_t data_read=0;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t count=0;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	71bb      	strb	r3, [r7, #6]

	for(uint8_t i=0;i<8;i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	717b      	strb	r3, [r7, #5]
 8006ab2:	e034      	b.n	8006b1e <DHT11_readByte+0x7e>
	{
		count=1;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	71bb      	strb	r3, [r7, #6]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8006ab8:	bf00      	nop
 8006aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006abe:	481c      	ldr	r0, [pc, #112]	; (8006b30 <DHT11_readByte+0x90>)
 8006ac0:	f7fa fa60 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d104      	bne.n	8006ad4 <DHT11_readByte+0x34>
 8006aca:	79bb      	ldrb	r3, [r7, #6]
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	71ba      	strb	r2, [r7, #6]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1f2      	bne.n	8006aba <DHT11_readByte+0x1a>

		delay_us(28);
 8006ad4:	201c      	movs	r0, #28
 8006ad6:	f7ff ffc7 	bl	8006a68 <delay_us>

		data_read<<=1;
 8006ada:	79fb      	ldrb	r3, [r7, #7]
 8006adc:	005b      	lsls	r3, r3, #1
 8006ade:	71fb      	strb	r3, [r7, #7]

		if(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 8006ae0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ae4:	4812      	ldr	r0, [pc, #72]	; (8006b30 <DHT11_readByte+0x90>)
 8006ae6:	f7fa fa4d 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d003      	beq.n	8006af8 <DHT11_readByte+0x58>
		{
			data_read |= 1;
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	71fb      	strb	r3, [r7, #7]
		}

		count=1;
 8006af8:	2301      	movs	r3, #1
 8006afa:	71bb      	strb	r3, [r7, #6]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8006afc:	bf00      	nop
 8006afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b02:	480b      	ldr	r0, [pc, #44]	; (8006b30 <DHT11_readByte+0x90>)
 8006b04:	f7fa fa3e 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d004      	beq.n	8006b18 <DHT11_readByte+0x78>
 8006b0e:	79bb      	ldrb	r3, [r7, #6]
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	71ba      	strb	r2, [r7, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1f2      	bne.n	8006afe <DHT11_readByte+0x5e>
	for(uint8_t i=0;i<8;i++)
 8006b18:	797b      	ldrb	r3, [r7, #5]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	717b      	strb	r3, [r7, #5]
 8006b1e:	797b      	ldrb	r3, [r7, #5]
 8006b20:	2b07      	cmp	r3, #7
 8006b22:	d9c7      	bls.n	8006ab4 <DHT11_readByte+0x14>
	}

	return data_read;
 8006b24:	79fb      	ldrb	r3, [r7, #7]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3708      	adds	r7, #8
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	40010800 	.word	0x40010800

08006b34 <DHT11_read>:

void DHT11_read(void)
{
 8006b34:	b590      	push	{r4, r7, lr}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b40:	4829      	ldr	r0, [pc, #164]	; (8006be8 <DHT11_read+0xb4>)
 8006b42:	f7fa fa36 	bl	8000fb2 <HAL_GPIO_WritePin>
	delay_us(20);
 8006b46:	2014      	movs	r0, #20
 8006b48:	f7ff ff8e 	bl	8006a68 <delay_us>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_RESET);
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b52:	4825      	ldr	r0, [pc, #148]	; (8006be8 <DHT11_read+0xb4>)
 8006b54:	f7fa fa2d 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8006b58:	2014      	movs	r0, #20
 8006b5a:	f7f9 ff41 	bl	80009e0 <HAL_Delay>
	HAL_GPIO_WritePin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin, GPIO_PIN_SET);
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b64:	4820      	ldr	r0, [pc, #128]	; (8006be8 <DHT11_read+0xb4>)
 8006b66:	f7fa fa24 	bl	8000fb2 <HAL_GPIO_WritePin>
	delay_us(20);
 8006b6a:	2014      	movs	r0, #20
 8006b6c:	f7ff ff7c 	bl	8006a68 <delay_us>

	if(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin))
 8006b70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b74:	481c      	ldr	r0, [pc, #112]	; (8006be8 <DHT11_read+0xb4>)
 8006b76:	f7fa fa05 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d12f      	bne.n	8006be0 <DHT11_read+0xac>
	{
		count=1;
 8006b80:	4b1a      	ldr	r3, [pc, #104]	; (8006bec <DHT11_read+0xb8>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
		while(!HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin) && count++);
 8006b86:	bf00      	nop
 8006b88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b8c:	4816      	ldr	r0, [pc, #88]	; (8006be8 <DHT11_read+0xb4>)
 8006b8e:	f7fa f9f9 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <DHT11_read+0x74>
 8006b98:	4b14      	ldr	r3, [pc, #80]	; (8006bec <DHT11_read+0xb8>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	b2d1      	uxtb	r1, r2
 8006ba0:	4a12      	ldr	r2, [pc, #72]	; (8006bec <DHT11_read+0xb8>)
 8006ba2:	7011      	strb	r1, [r2, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1ef      	bne.n	8006b88 <DHT11_read+0x54>

		count=1;
 8006ba8:	4b10      	ldr	r3, [pc, #64]	; (8006bec <DHT11_read+0xb8>)
 8006baa:	2201      	movs	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(DHT11_DOUT_GPIO_Port, DHT11_DOUT_Pin));
 8006bae:	bf00      	nop
 8006bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bb4:	480c      	ldr	r0, [pc, #48]	; (8006be8 <DHT11_read+0xb4>)
 8006bb6:	f7fa f9e5 	bl	8000f84 <HAL_GPIO_ReadPin>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1f7      	bne.n	8006bb0 <DHT11_read+0x7c>

		for(uint8_t i=0;i<5;i++)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	71fb      	strb	r3, [r7, #7]
 8006bc4:	e009      	b.n	8006bda <DHT11_read+0xa6>
		{
			dht11_data[i]=DHT11_readByte();
 8006bc6:	79fc      	ldrb	r4, [r7, #7]
 8006bc8:	f7ff ff6a 	bl	8006aa0 <DHT11_readByte>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	461a      	mov	r2, r3
 8006bd0:	4b07      	ldr	r3, [pc, #28]	; (8006bf0 <DHT11_read+0xbc>)
 8006bd2:	551a      	strb	r2, [r3, r4]
		for(uint8_t i=0;i<5;i++)
 8006bd4:	79fb      	ldrb	r3, [r7, #7]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	71fb      	strb	r3, [r7, #7]
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b04      	cmp	r3, #4
 8006bde:	d9f2      	bls.n	8006bc6 <DHT11_read+0x92>
		}
	}

}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd90      	pop	{r4, r7, pc}
 8006be8:	40010800 	.word	0x40010800
 8006bec:	20000010 	.word	0x20000010
 8006bf0:	20001938 	.word	0x20001938

08006bf4 <lcd_write>:

extern uint8_t receiveBuffer;
extern UART_HandleTypeDef huart1;

void lcd_write(uint8_t dat)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	f003 0301 	and.w	r3, r3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	461a      	mov	r2, r3
 8006c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c0c:	4829      	ldr	r0, [pc, #164]	; (8006cb4 <lcd_write+0xc0>)
 8006c0e:	f7fa f9d0 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c12:	79fb      	ldrb	r3, [r7, #7]
 8006c14:	085b      	lsrs	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f003 0301 	and.w	r3, r3, #1
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	2108      	movs	r1, #8
 8006c22:	4825      	ldr	r0, [pc, #148]	; (8006cb8 <lcd_write+0xc4>)
 8006c24:	f7fa f9c5 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	089b      	lsrs	r3, r3, #2
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	2110      	movs	r1, #16
 8006c38:	481f      	ldr	r0, [pc, #124]	; (8006cb8 <lcd_write+0xc4>)
 8006c3a:	f7fa f9ba 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	08db      	lsrs	r3, r3, #3
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	f003 0301 	and.w	r3, r3, #1
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	2120      	movs	r1, #32
 8006c4e:	481a      	ldr	r0, [pc, #104]	; (8006cb8 <lcd_write+0xc4>)
 8006c50:	f7fa f9af 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	091b      	lsrs	r3, r3, #4
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	461a      	mov	r2, r3
 8006c62:	2140      	movs	r1, #64	; 0x40
 8006c64:	4814      	ldr	r0, [pc, #80]	; (8006cb8 <lcd_write+0xc4>)
 8006c66:	f7fa f9a4 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	095b      	lsrs	r3, r3, #5
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	2180      	movs	r1, #128	; 0x80
 8006c7a:	480f      	ldr	r0, [pc, #60]	; (8006cb8 <lcd_write+0xc4>)
 8006c7c:	f7fa f999 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c80:	79fb      	ldrb	r3, [r7, #7]
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c92:	4809      	ldr	r0, [pc, #36]	; (8006cb8 <lcd_write+0xc4>)
 8006c94:	f7fa f98d 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8006c98:	79fb      	ldrb	r3, [r7, #7]
 8006c9a:	09db      	lsrs	r3, r3, #7
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ca4:	4804      	ldr	r0, [pc, #16]	; (8006cb8 <lcd_write+0xc4>)
 8006ca6:	f7fa f984 	bl	8000fb2 <HAL_GPIO_WritePin>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40010800 	.word	0x40010800
 8006cb8:	40010c00 	.word	0x40010c00

08006cbc <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2180      	movs	r1, #128	; 0x80
 8006cca:	4812      	ldr	r0, [pc, #72]	; (8006d14 <lcd_writeCom+0x58>)
 8006ccc:	f7fa f971 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	2140      	movs	r1, #64	; 0x40
 8006cd4:	480f      	ldr	r0, [pc, #60]	; (8006d14 <lcd_writeCom+0x58>)
 8006cd6:	f7fa f96c 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2120      	movs	r1, #32
 8006cde:	480d      	ldr	r0, [pc, #52]	; (8006d14 <lcd_writeCom+0x58>)
 8006ce0:	f7fa f967 	bl	8000fb2 <HAL_GPIO_WritePin>

	lcd_write(com);
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7ff ff84 	bl	8006bf4 <lcd_write>
	HAL_Delay(1);
 8006cec:	2001      	movs	r0, #1
 8006cee:	f7f9 fe77 	bl	80009e0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	2180      	movs	r1, #128	; 0x80
 8006cf6:	4807      	ldr	r0, [pc, #28]	; (8006d14 <lcd_writeCom+0x58>)
 8006cf8:	f7fa f95b 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006cfc:	2001      	movs	r0, #1
 8006cfe:	f7f9 fe6f 	bl	80009e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2180      	movs	r1, #128	; 0x80
 8006d06:	4803      	ldr	r0, [pc, #12]	; (8006d14 <lcd_writeCom+0x58>)
 8006d08:	f7fa f953 	bl	8000fb2 <HAL_GPIO_WritePin>
}
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	40010800 	.word	0x40010800

08006d18 <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8006d22:	2200      	movs	r2, #0
 8006d24:	2180      	movs	r1, #128	; 0x80
 8006d26:	4812      	ldr	r0, [pc, #72]	; (8006d70 <lcd_writeData+0x58>)
 8006d28:	f7fa f943 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	2140      	movs	r1, #64	; 0x40
 8006d30:	480f      	ldr	r0, [pc, #60]	; (8006d70 <lcd_writeData+0x58>)
 8006d32:	f7fa f93e 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8006d36:	2200      	movs	r2, #0
 8006d38:	2120      	movs	r1, #32
 8006d3a:	480d      	ldr	r0, [pc, #52]	; (8006d70 <lcd_writeData+0x58>)
 8006d3c:	f7fa f939 	bl	8000fb2 <HAL_GPIO_WritePin>

	lcd_write(data);
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff ff56 	bl	8006bf4 <lcd_write>
	HAL_Delay(1);
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f7f9 fe49 	bl	80009e0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8006d4e:	2201      	movs	r2, #1
 8006d50:	2180      	movs	r1, #128	; 0x80
 8006d52:	4807      	ldr	r0, [pc, #28]	; (8006d70 <lcd_writeData+0x58>)
 8006d54:	f7fa f92d 	bl	8000fb2 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f7f9 fe41 	bl	80009e0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	2180      	movs	r1, #128	; 0x80
 8006d62:	4803      	ldr	r0, [pc, #12]	; (8006d70 <lcd_writeData+0x58>)
 8006d64:	f7fa f925 	bl	8000fb2 <HAL_GPIO_WritePin>
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	40010800 	.word	0x40010800

08006d74 <lcd_init>:

void lcd_init(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 8006d78:	2038      	movs	r0, #56	; 0x38
 8006d7a:	f7ff ff9f 	bl	8006cbc <lcd_writeCom>
	lcd_writeCom(0x0c);
 8006d7e:	200c      	movs	r0, #12
 8006d80:	f7ff ff9c 	bl	8006cbc <lcd_writeCom>
	lcd_writeCom(0x06);
 8006d84:	2006      	movs	r0, #6
 8006d86:	f7ff ff99 	bl	8006cbc <lcd_writeCom>
	lcd_writeCom(0x01);
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f7ff ff96 	bl	8006cbc <lcd_writeCom>
	lcd_writeCom(0X80);
 8006d90:	2080      	movs	r0, #128	; 0x80
 8006d92:	f7ff ff93 	bl	8006cbc <lcd_writeCom>
}
 8006d96:	bf00      	nop
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <lcd_show_dht11>:

void lcd_show_dht11(uint8_t *result)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
	lcd_writeData((result[0] / 10)+48);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	4a14      	ldr	r2, [pc, #80]	; (8006dfc <lcd_show_dht11+0x60>)
 8006daa:	fba2 2303 	umull	r2, r3, r2, r3
 8006dae:	08db      	lsrs	r3, r3, #3
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	3330      	adds	r3, #48	; 0x30
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff ffae 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result[0] % 10)+48);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	781a      	ldrb	r2, [r3, #0]
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <lcd_show_dht11+0x60>)
 8006dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc6:	08d9      	lsrs	r1, r3, #3
 8006dc8:	460b      	mov	r3, r1
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	440b      	add	r3, r1
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	3330      	adds	r3, #48	; 0x30
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f7ff ff9d 	bl	8006d18 <lcd_writeData>
	lcd_writeData('%');
 8006dde:	2025      	movs	r0, #37	; 0x25
 8006de0:	f7ff ff9a 	bl	8006d18 <lcd_writeData>
	lcd_writeData(' ');
 8006de4:	2020      	movs	r0, #32
 8006de6:	f7ff ff97 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result[3] % 10)+48);
	lcd_writeData(0xDF);
	lcd_writeData('C');
	*/

	HAL_Delay(1000);
 8006dea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006dee:	f7f9 fdf7 	bl	80009e0 <HAL_Delay>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	cccccccd 	.word	0xcccccccd

08006e00 <lcd_show_bmp280_temp>:

	HAL_Delay(1000);
}

void lcd_show_bmp280_temp(uint32_t result)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
	lcd_writeData((result /1000)+48);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a28      	ldr	r2, [pc, #160]	; (8006eac <lcd_show_bmp280_temp+0xac>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	099b      	lsrs	r3, r3, #6
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	3330      	adds	r3, #48	; 0x30
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff ff7d 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	4b22      	ldr	r3, [pc, #136]	; (8006eac <lcd_show_bmp280_temp+0xac>)
 8006e22:	fba3 1302 	umull	r1, r3, r3, r2
 8006e26:	099b      	lsrs	r3, r3, #6
 8006e28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006e2c:	fb01 f303 	mul.w	r3, r1, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <lcd_show_bmp280_temp+0xb0>)
 8006e34:	fba2 2303 	umull	r2, r3, r2, r3
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	3330      	adds	r3, #48	; 0x30
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff69 	bl	8006d18 <lcd_writeData>
	lcd_writeData('.');
 8006e46:	202e      	movs	r0, #46	; 0x2e
 8006e48:	f7ff ff66 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	4b18      	ldr	r3, [pc, #96]	; (8006eb0 <lcd_show_bmp280_temp+0xb0>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	4a15      	ldr	r2, [pc, #84]	; (8006eb4 <lcd_show_bmp280_temp+0xb4>)
 8006e60:	fba2 2303 	umull	r2, r3, r2, r3
 8006e64:	08db      	lsrs	r3, r3, #3
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	3330      	adds	r3, #48	; 0x30
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f7ff ff53 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8006e72:	6879      	ldr	r1, [r7, #4]
 8006e74:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <lcd_show_bmp280_temp+0xb4>)
 8006e76:	fba3 2301 	umull	r2, r3, r3, r1
 8006e7a:	08da      	lsrs	r2, r3, #3
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	1aca      	subs	r2, r1, r3
 8006e86:	b2d3      	uxtb	r3, r2
 8006e88:	3330      	adds	r3, #48	; 0x30
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7ff ff43 	bl	8006d18 <lcd_writeData>
	lcd_writeData(0xDF);
 8006e92:	20df      	movs	r0, #223	; 0xdf
 8006e94:	f7ff ff40 	bl	8006d18 <lcd_writeData>
	lcd_writeData('C');
 8006e98:	2043      	movs	r0, #67	; 0x43
 8006e9a:	f7ff ff3d 	bl	8006d18 <lcd_writeData>
	lcd_writeData(' ');
 8006e9e:	2020      	movs	r0, #32
 8006ea0:	f7ff ff3a 	bl	8006d18 <lcd_writeData>
}
 8006ea4:	bf00      	nop
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	10624dd3 	.word	0x10624dd3
 8006eb0:	51eb851f 	.word	0x51eb851f
 8006eb4:	cccccccd 	.word	0xcccccccd

08006eb8 <lcd_show_bmp280_press>:

void lcd_show_bmp280_press(uint32_t result)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	lcd_writeData((result / 100000)+48);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	095b      	lsrs	r3, r3, #5
 8006ec4:	4a3d      	ldr	r2, [pc, #244]	; (8006fbc <lcd_show_bmp280_press+0x104>)
 8006ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8006eca:	09db      	lsrs	r3, r3, #7
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	3330      	adds	r3, #48	; 0x30
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff ff20 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 100000 / 10000)+48);
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	0953      	lsrs	r3, r2, #5
 8006edc:	4937      	ldr	r1, [pc, #220]	; (8006fbc <lcd_show_bmp280_press+0x104>)
 8006ede:	fba1 1303 	umull	r1, r3, r1, r3
 8006ee2:	09db      	lsrs	r3, r3, #7
 8006ee4:	4936      	ldr	r1, [pc, #216]	; (8006fc0 <lcd_show_bmp280_press+0x108>)
 8006ee6:	fb01 f303 	mul.w	r3, r1, r3
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	4a35      	ldr	r2, [pc, #212]	; (8006fc4 <lcd_show_bmp280_press+0x10c>)
 8006eee:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef2:	0b5b      	lsrs	r3, r3, #13
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	3330      	adds	r3, #48	; 0x30
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7ff ff0c 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 10000 / 1000)+48);
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <lcd_show_bmp280_press+0x10c>)
 8006f04:	fba3 1302 	umull	r1, r3, r3, r2
 8006f08:	0b5b      	lsrs	r3, r3, #13
 8006f0a:	f242 7110 	movw	r1, #10000	; 0x2710
 8006f0e:	fb01 f303 	mul.w	r3, r1, r3
 8006f12:	1ad3      	subs	r3, r2, r3
 8006f14:	4a2c      	ldr	r2, [pc, #176]	; (8006fc8 <lcd_show_bmp280_press+0x110>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	099b      	lsrs	r3, r3, #6
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3330      	adds	r3, #48	; 0x30
 8006f20:	b2db      	uxtb	r3, r3
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff fef8 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4b27      	ldr	r3, [pc, #156]	; (8006fc8 <lcd_show_bmp280_press+0x110>)
 8006f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f30:	099b      	lsrs	r3, r3, #6
 8006f32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006f36:	fb01 f303 	mul.w	r3, r1, r3
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <lcd_show_bmp280_press+0x114>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	095b      	lsrs	r3, r3, #5
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	3330      	adds	r3, #48	; 0x30
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fee4 	bl	8006d18 <lcd_writeData>
	lcd_writeData('.');
 8006f50:	202e      	movs	r0, #46	; 0x2e
 8006f52:	f7ff fee1 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 100 /10)+48);
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4b1c      	ldr	r3, [pc, #112]	; (8006fcc <lcd_show_bmp280_press+0x114>)
 8006f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5e:	095b      	lsrs	r3, r3, #5
 8006f60:	2164      	movs	r1, #100	; 0x64
 8006f62:	fb01 f303 	mul.w	r3, r1, r3
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <lcd_show_bmp280_press+0x118>)
 8006f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6e:	08db      	lsrs	r3, r3, #3
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	3330      	adds	r3, #48	; 0x30
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4618      	mov	r0, r3
 8006f78:	f7ff fece 	bl	8006d18 <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4b14      	ldr	r3, [pc, #80]	; (8006fd0 <lcd_show_bmp280_press+0x118>)
 8006f80:	fba3 2301 	umull	r2, r3, r3, r1
 8006f84:	08da      	lsrs	r2, r3, #3
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	1aca      	subs	r2, r1, r3
 8006f90:	b2d3      	uxtb	r3, r2
 8006f92:	3330      	adds	r3, #48	; 0x30
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff febe 	bl	8006d18 <lcd_writeData>
	lcd_writeData('h');
 8006f9c:	2068      	movs	r0, #104	; 0x68
 8006f9e:	f7ff febb 	bl	8006d18 <lcd_writeData>
	lcd_writeData('P');
 8006fa2:	2050      	movs	r0, #80	; 0x50
 8006fa4:	f7ff feb8 	bl	8006d18 <lcd_writeData>
	lcd_writeData('a');
 8006fa8:	2061      	movs	r0, #97	; 0x61
 8006faa:	f7ff feb5 	bl	8006d18 <lcd_writeData>
	lcd_writeData(' ');
 8006fae:	2020      	movs	r0, #32
 8006fb0:	f7ff feb2 	bl	8006d18 <lcd_writeData>
}
 8006fb4:	bf00      	nop
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	0a7c5ac5 	.word	0x0a7c5ac5
 8006fc0:	000186a0 	.word	0x000186a0
 8006fc4:	d1b71759 	.word	0xd1b71759
 8006fc8:	10624dd3 	.word	0x10624dd3
 8006fcc:	51eb851f 	.word	0x51eb851f
 8006fd0:	cccccccd 	.word	0xcccccccd

08006fd4 <__libc_init_array>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	2500      	movs	r5, #0
 8006fd8:	4e0c      	ldr	r6, [pc, #48]	; (800700c <__libc_init_array+0x38>)
 8006fda:	4c0d      	ldr	r4, [pc, #52]	; (8007010 <__libc_init_array+0x3c>)
 8006fdc:	1ba4      	subs	r4, r4, r6
 8006fde:	10a4      	asrs	r4, r4, #2
 8006fe0:	42a5      	cmp	r5, r4
 8006fe2:	d109      	bne.n	8006ff8 <__libc_init_array+0x24>
 8006fe4:	f000 f82e 	bl	8007044 <_init>
 8006fe8:	2500      	movs	r5, #0
 8006fea:	4e0a      	ldr	r6, [pc, #40]	; (8007014 <__libc_init_array+0x40>)
 8006fec:	4c0a      	ldr	r4, [pc, #40]	; (8007018 <__libc_init_array+0x44>)
 8006fee:	1ba4      	subs	r4, r4, r6
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	42a5      	cmp	r5, r4
 8006ff4:	d105      	bne.n	8007002 <__libc_init_array+0x2e>
 8006ff6:	bd70      	pop	{r4, r5, r6, pc}
 8006ff8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ffc:	4798      	blx	r3
 8006ffe:	3501      	adds	r5, #1
 8007000:	e7ee      	b.n	8006fe0 <__libc_init_array+0xc>
 8007002:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007006:	4798      	blx	r3
 8007008:	3501      	adds	r5, #1
 800700a:	e7f2      	b.n	8006ff2 <__libc_init_array+0x1e>
 800700c:	080071cc 	.word	0x080071cc
 8007010:	080071cc 	.word	0x080071cc
 8007014:	080071cc 	.word	0x080071cc
 8007018:	080071d0 	.word	0x080071d0

0800701c <memcpy>:
 800701c:	b510      	push	{r4, lr}
 800701e:	1e43      	subs	r3, r0, #1
 8007020:	440a      	add	r2, r1
 8007022:	4291      	cmp	r1, r2
 8007024:	d100      	bne.n	8007028 <memcpy+0xc>
 8007026:	bd10      	pop	{r4, pc}
 8007028:	f811 4b01 	ldrb.w	r4, [r1], #1
 800702c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007030:	e7f7      	b.n	8007022 <memcpy+0x6>

08007032 <memset>:
 8007032:	4603      	mov	r3, r0
 8007034:	4402      	add	r2, r0
 8007036:	4293      	cmp	r3, r2
 8007038:	d100      	bne.n	800703c <memset+0xa>
 800703a:	4770      	bx	lr
 800703c:	f803 1b01 	strb.w	r1, [r3], #1
 8007040:	e7f9      	b.n	8007036 <memset+0x4>
	...

08007044 <_init>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	bf00      	nop
 8007048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704a:	bc08      	pop	{r3}
 800704c:	469e      	mov	lr, r3
 800704e:	4770      	bx	lr

08007050 <_fini>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	bf00      	nop
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr
