
Weather_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d60  08002d60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d60  08002d60  00012d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d64  08002d64  00012d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002d74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002d74  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a273  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001681  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000698  00000000  00000000  0002c058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016dee  00000000  00000000  0002c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006d81  00000000  00000000  000434de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000816a0  00000000  00000000  0004a25f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb8ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c2c  00000000  00000000  000cb97c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d14 	.word	0x08002d14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d14 	.word	0x08002d14

0800014c <BMP280_init>:

//#include "bmp280.h"
extern I2C_HandleTypeDef hi2c2;

void BMP280_init(BMP280_SETTINGS handle)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af04      	add	r7, sp, #16
 8000152:	463b      	mov	r3, r7
 8000154:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t config=((uint8_t)(handle.standy_time)<<5) | ((uint8_t)(handle.filter_coefficient)<<2) | ((uint8_t)(handle.spi3w));
 8000158:	78fb      	ldrb	r3, [r7, #3]
 800015a:	015b      	lsls	r3, r3, #5
 800015c:	b25a      	sxtb	r2, r3
 800015e:	793b      	ldrb	r3, [r7, #4]
 8000160:	009b      	lsls	r3, r3, #2
 8000162:	b25b      	sxtb	r3, r3
 8000164:	4313      	orrs	r3, r2
 8000166:	b25a      	sxtb	r2, r3
 8000168:	797b      	ldrb	r3, [r7, #5]
 800016a:	b25b      	sxtb	r3, r3
 800016c:	4313      	orrs	r3, r2
 800016e:	b25b      	sxtb	r3, r3
 8000170:	b2db      	uxtb	r3, r3
 8000172:	73fb      	strb	r3, [r7, #15]
	uint8_t ctrl_meas=((uint8_t)(handle.oversampling_temp)<<5) | ((uint8_t)(handle.oversampling_press)<<2) | ((uint8_t)(handle.powermode));
 8000174:	787b      	ldrb	r3, [r7, #1]
 8000176:	015b      	lsls	r3, r3, #5
 8000178:	b25a      	sxtb	r2, r3
 800017a:	78bb      	ldrb	r3, [r7, #2]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	b25b      	sxtb	r3, r3
 8000180:	4313      	orrs	r3, r2
 8000182:	b25a      	sxtb	r2, r3
 8000184:	783b      	ldrb	r3, [r7, #0]
 8000186:	b25b      	sxtb	r3, r3
 8000188:	4313      	orrs	r3, r2
 800018a:	b25b      	sxtb	r3, r3
 800018c:	b2db      	uxtb	r3, r3
 800018e:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CONFIG_REG, I2C_MEMADD_SIZE_8BIT, &config, sizeof(config), 0xFF);
 8000190:	23ff      	movs	r3, #255	; 0xff
 8000192:	9302      	str	r3, [sp, #8]
 8000194:	2301      	movs	r3, #1
 8000196:	9301      	str	r3, [sp, #4]
 8000198:	f107 030f 	add.w	r3, r7, #15
 800019c:	9300      	str	r3, [sp, #0]
 800019e:	2301      	movs	r3, #1
 80001a0:	22f5      	movs	r2, #245	; 0xf5
 80001a2:	21ec      	movs	r1, #236	; 0xec
 80001a4:	4809      	ldr	r0, [pc, #36]	; (80001cc <BMP280_init+0x80>)
 80001a6:	f001 facb 	bl	8001740 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c2, BMP280_WRITE_ADDR, BMP280_CTRL_MEAS_REG, I2C_MEMADD_SIZE_8BIT, &ctrl_meas, sizeof(ctrl_meas), 0xFF);
 80001aa:	23ff      	movs	r3, #255	; 0xff
 80001ac:	9302      	str	r3, [sp, #8]
 80001ae:	2301      	movs	r3, #1
 80001b0:	9301      	str	r3, [sp, #4]
 80001b2:	f107 030e 	add.w	r3, r7, #14
 80001b6:	9300      	str	r3, [sp, #0]
 80001b8:	2301      	movs	r3, #1
 80001ba:	22f4      	movs	r2, #244	; 0xf4
 80001bc:	21ec      	movs	r1, #236	; 0xec
 80001be:	4803      	ldr	r0, [pc, #12]	; (80001cc <BMP280_init+0x80>)
 80001c0:	f001 fabe 	bl	8001740 <HAL_I2C_Mem_Write>
}
 80001c4:	bf00      	nop
 80001c6:	3710      	adds	r7, #16
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000050 	.word	0x20000050

080001d0 <BMP280_temp_read>:

uint32_t BMP280_temp_read(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b08a      	sub	sp, #40	; 0x28
 80001d4:	af04      	add	r7, sp, #16
	uint32_t temp=0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	617b      	str	r3, [r7, #20]
	uint8_t temp_reg[3]={
 80001da:	2300      	movs	r3, #0
 80001dc:	713b      	strb	r3, [r7, #4]
 80001de:	2300      	movs	r3, #0
 80001e0:	717b      	strb	r3, [r7, #5]
 80001e2:	2300      	movs	r3, #0
 80001e4:	71bb      	strb	r3, [r7, #6]
			0,0,0
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_TEMP_MSB_REG, I2C_MEMADD_SIZE_8BIT, temp_reg, sizeof(temp_reg), 0xFF);
 80001e6:	23ff      	movs	r3, #255	; 0xff
 80001e8:	9302      	str	r3, [sp, #8]
 80001ea:	2303      	movs	r3, #3
 80001ec:	9301      	str	r3, [sp, #4]
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	9300      	str	r3, [sp, #0]
 80001f2:	2301      	movs	r3, #1
 80001f4:	22fa      	movs	r2, #250	; 0xfa
 80001f6:	21ed      	movs	r1, #237	; 0xed
 80001f8:	480b      	ldr	r0, [pc, #44]	; (8000228 <BMP280_temp_read+0x58>)
 80001fa:	f001 fb9b 	bl	8001934 <HAL_I2C_Mem_Read>

	uint32_t temp_msb=temp_reg[0];
 80001fe:	793b      	ldrb	r3, [r7, #4]
 8000200:	613b      	str	r3, [r7, #16]
	uint32_t temp_lsb=temp_reg[1];
 8000202:	797b      	ldrb	r3, [r7, #5]
 8000204:	60fb      	str	r3, [r7, #12]
	uint32_t temp_xlsb=temp_reg[2];
 8000206:	79bb      	ldrb	r3, [r7, #6]
 8000208:	60bb      	str	r3, [r7, #8]

	temp=(temp_xlsb>>4) | (temp_lsb<<4) | (temp_msb<<12);
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	091a      	lsrs	r2, r3, #4
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	011b      	lsls	r3, r3, #4
 8000212:	431a      	orrs	r2, r3
 8000214:	693b      	ldr	r3, [r7, #16]
 8000216:	031b      	lsls	r3, r3, #12
 8000218:	4313      	orrs	r3, r2
 800021a:	617b      	str	r3, [r7, #20]

	return temp;
 800021c:	697b      	ldr	r3, [r7, #20]
}
 800021e:	4618      	mov	r0, r3
 8000220:	3718      	adds	r7, #24
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	20000050 	.word	0x20000050

0800022c <getDig_T>:

void getDig_T(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af04      	add	r7, sp, #16
	uint8_t temp_lsb=0;
 8000232:	2300      	movs	r3, #0
 8000234:	71fb      	strb	r3, [r7, #7]
	uint8_t temp_msb=0;
 8000236:	2300      	movs	r3, #0
 8000238:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 800023a:	23ff      	movs	r3, #255	; 0xff
 800023c:	9302      	str	r3, [sp, #8]
 800023e:	2301      	movs	r3, #1
 8000240:	9301      	str	r3, [sp, #4]
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	9300      	str	r3, [sp, #0]
 8000246:	2301      	movs	r3, #1
 8000248:	2288      	movs	r2, #136	; 0x88
 800024a:	21ed      	movs	r1, #237	; 0xed
 800024c:	482f      	ldr	r0, [pc, #188]	; (800030c <getDig_T+0xe0>)
 800024e:	f001 fb71 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 8000252:	23ff      	movs	r3, #255	; 0xff
 8000254:	9302      	str	r3, [sp, #8]
 8000256:	2301      	movs	r3, #1
 8000258:	9301      	str	r3, [sp, #4]
 800025a:	1dbb      	adds	r3, r7, #6
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	2289      	movs	r2, #137	; 0x89
 8000262:	21ed      	movs	r1, #237	; 0xed
 8000264:	4829      	ldr	r0, [pc, #164]	; (800030c <getDig_T+0xe0>)
 8000266:	f001 fb65 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_T1= temp_lsb | (((uint16_t)temp_msb)<<8);
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	b21a      	sxth	r2, r3
 800026e:	79bb      	ldrb	r3, [r7, #6]
 8000270:	021b      	lsls	r3, r3, #8
 8000272:	b21b      	sxth	r3, r3
 8000274:	4313      	orrs	r3, r2
 8000276:	b21b      	sxth	r3, r3
 8000278:	b29a      	uxth	r2, r3
 800027a:	4b25      	ldr	r3, [pc, #148]	; (8000310 <getDig_T+0xe4>)
 800027c:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 800027e:	23ff      	movs	r3, #255	; 0xff
 8000280:	9302      	str	r3, [sp, #8]
 8000282:	2301      	movs	r3, #1
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2301      	movs	r3, #1
 800028c:	228a      	movs	r2, #138	; 0x8a
 800028e:	21ed      	movs	r1, #237	; 0xed
 8000290:	481e      	ldr	r0, [pc, #120]	; (800030c <getDig_T+0xe0>)
 8000292:	f001 fb4f 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 8000296:	23ff      	movs	r3, #255	; 0xff
 8000298:	9302      	str	r3, [sp, #8]
 800029a:	2301      	movs	r3, #1
 800029c:	9301      	str	r3, [sp, #4]
 800029e:	1dbb      	adds	r3, r7, #6
 80002a0:	9300      	str	r3, [sp, #0]
 80002a2:	2301      	movs	r3, #1
 80002a4:	228b      	movs	r2, #139	; 0x8b
 80002a6:	21ed      	movs	r1, #237	; 0xed
 80002a8:	4818      	ldr	r0, [pc, #96]	; (800030c <getDig_T+0xe0>)
 80002aa:	f001 fb43 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_T2= temp_lsb | (((uint16_t)temp_msb)<<8);
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	b21a      	sxth	r2, r3
 80002b2:	79bb      	ldrb	r3, [r7, #6]
 80002b4:	021b      	lsls	r3, r3, #8
 80002b6:	b21b      	sxth	r3, r3
 80002b8:	4313      	orrs	r3, r2
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <getDig_T+0xe8>)
 80002be:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_lsb, sizeof(temp_lsb), 0xFF);
 80002c0:	23ff      	movs	r3, #255	; 0xff
 80002c2:	9302      	str	r3, [sp, #8]
 80002c4:	2301      	movs	r3, #1
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	228c      	movs	r2, #140	; 0x8c
 80002d0:	21ed      	movs	r1, #237	; 0xed
 80002d2:	480e      	ldr	r0, [pc, #56]	; (800030c <getDig_T+0xe0>)
 80002d4:	f001 fb2e 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_T3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &temp_msb, sizeof(temp_msb), 0xFF);
 80002d8:	23ff      	movs	r3, #255	; 0xff
 80002da:	9302      	str	r3, [sp, #8]
 80002dc:	2301      	movs	r3, #1
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	1dbb      	adds	r3, r7, #6
 80002e2:	9300      	str	r3, [sp, #0]
 80002e4:	2301      	movs	r3, #1
 80002e6:	228d      	movs	r2, #141	; 0x8d
 80002e8:	21ed      	movs	r1, #237	; 0xed
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <getDig_T+0xe0>)
 80002ec:	f001 fb22 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_T3= temp_lsb | (((uint16_t)temp_msb)<<8);
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	b21a      	sxth	r2, r3
 80002f4:	79bb      	ldrb	r3, [r7, #6]
 80002f6:	021b      	lsls	r3, r3, #8
 80002f8:	b21b      	sxth	r3, r3
 80002fa:	4313      	orrs	r3, r2
 80002fc:	b21a      	sxth	r2, r3
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <getDig_T+0xec>)
 8000300:	801a      	strh	r2, [r3, #0]

}
 8000302:	bf00      	nop
 8000304:	3708      	adds	r7, #8
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000050 	.word	0x20000050
 8000310:	2000002a 	.word	0x2000002a
 8000314:	2000002c 	.word	0x2000002c
 8000318:	20000046 	.word	0x20000046

0800031c <bmp280_compensate_T_int32>:

int32_t t_fine;
int32_t bmp280_compensate_T_int32(int32_t adc_T)
{
 800031c:	b480      	push	{r7}
 800031e:	b087      	sub	sp, #28
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	int32_t var1,var2,T;

	var1=((((adc_T>>3)-((int32_t)dig_T1<<1)))*((int32_t)dig_T2))>>11;
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	10da      	asrs	r2, r3, #3
 8000328:	4b18      	ldr	r3, [pc, #96]	; (800038c <bmp280_compensate_T_int32+0x70>)
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	005b      	lsls	r3, r3, #1
 800032e:	1ad3      	subs	r3, r2, r3
 8000330:	4a17      	ldr	r2, [pc, #92]	; (8000390 <bmp280_compensate_T_int32+0x74>)
 8000332:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000336:	fb02 f303 	mul.w	r3, r2, r3
 800033a:	12db      	asrs	r3, r3, #11
 800033c:	617b      	str	r3, [r7, #20]
	var2=(((((adc_T>>4)-((int32_t)dig_T1))*((adc_T>>4)-((int32_t)dig_T1)))>>12)*((int32_t)dig_T3))>>14;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	111b      	asrs	r3, r3, #4
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <bmp280_compensate_T_int32+0x70>)
 8000344:	8812      	ldrh	r2, [r2, #0]
 8000346:	1a9b      	subs	r3, r3, r2
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	1112      	asrs	r2, r2, #4
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <bmp280_compensate_T_int32+0x70>)
 800034e:	8809      	ldrh	r1, [r1, #0]
 8000350:	1a52      	subs	r2, r2, r1
 8000352:	fb02 f303 	mul.w	r3, r2, r3
 8000356:	131b      	asrs	r3, r3, #12
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <bmp280_compensate_T_int32+0x78>)
 800035a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800035e:	fb02 f303 	mul.w	r3, r2, r3
 8000362:	139b      	asrs	r3, r3, #14
 8000364:	613b      	str	r3, [r7, #16]
	t_fine=var1+var2;
 8000366:	697a      	ldr	r2, [r7, #20]
 8000368:	693b      	ldr	r3, [r7, #16]
 800036a:	4413      	add	r3, r2
 800036c:	4a0a      	ldr	r2, [pc, #40]	; (8000398 <bmp280_compensate_T_int32+0x7c>)
 800036e:	6013      	str	r3, [r2, #0]
	T=(t_fine*5+128)>>8;
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <bmp280_compensate_T_int32+0x7c>)
 8000372:	681a      	ldr	r2, [r3, #0]
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	3380      	adds	r3, #128	; 0x80
 800037c:	121b      	asrs	r3, r3, #8
 800037e:	60fb      	str	r3, [r7, #12]

	return T;
 8000380:	68fb      	ldr	r3, [r7, #12]
}
 8000382:	4618      	mov	r0, r3
 8000384:	371c      	adds	r7, #28
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	2000002a 	.word	0x2000002a
 8000390:	2000002c 	.word	0x2000002c
 8000394:	20000046 	.word	0x20000046
 8000398:	2000004c 	.word	0x2000004c

0800039c <BMP280_press_read>:

uint32_t BMP280_press_read(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	; 0x28
 80003a0:	af04      	add	r7, sp, #16
	uint32_t press=0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
	uint8_t press_reg[3]={
 80003a6:	2300      	movs	r3, #0
 80003a8:	713b      	strb	r3, [r7, #4]
 80003aa:	2300      	movs	r3, #0
 80003ac:	717b      	strb	r3, [r7, #5]
 80003ae:	2300      	movs	r3, #0
 80003b0:	71bb      	strb	r3, [r7, #6]
			0,0,0,
	};

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, 0xF7, I2C_MEMADD_SIZE_8BIT, press_reg, sizeof(press_reg), 0xFF);
 80003b2:	23ff      	movs	r3, #255	; 0xff
 80003b4:	9302      	str	r3, [sp, #8]
 80003b6:	2303      	movs	r3, #3
 80003b8:	9301      	str	r3, [sp, #4]
 80003ba:	1d3b      	adds	r3, r7, #4
 80003bc:	9300      	str	r3, [sp, #0]
 80003be:	2301      	movs	r3, #1
 80003c0:	22f7      	movs	r2, #247	; 0xf7
 80003c2:	21ed      	movs	r1, #237	; 0xed
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <BMP280_press_read+0x58>)
 80003c6:	f001 fab5 	bl	8001934 <HAL_I2C_Mem_Read>

	uint32_t press_msb=press_reg[0];
 80003ca:	793b      	ldrb	r3, [r7, #4]
 80003cc:	613b      	str	r3, [r7, #16]
	uint32_t press_lsb=press_reg[1];
 80003ce:	797b      	ldrb	r3, [r7, #5]
 80003d0:	60fb      	str	r3, [r7, #12]
	uint32_t press_xlsb=press_reg[2];
 80003d2:	79bb      	ldrb	r3, [r7, #6]
 80003d4:	60bb      	str	r3, [r7, #8]

	press= (press_xlsb>>4) | (press_lsb<<4) | (press_msb<<12);
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	091a      	lsrs	r2, r3, #4
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	011b      	lsls	r3, r3, #4
 80003de:	431a      	orrs	r2, r3
 80003e0:	693b      	ldr	r3, [r7, #16]
 80003e2:	031b      	lsls	r3, r3, #12
 80003e4:	4313      	orrs	r3, r2
 80003e6:	617b      	str	r3, [r7, #20]

	return press;
 80003e8:	697b      	ldr	r3, [r7, #20]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3718      	adds	r7, #24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000050 	.word	0x20000050

080003f8 <getDig_P>:

void getDig_P(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b086      	sub	sp, #24
 80003fc:	af04      	add	r7, sp, #16
	uint8_t press_lsb=0;
 80003fe:	2300      	movs	r3, #0
 8000400:	71fb      	strb	r3, [r7, #7]
	uint8_t press_msb=0;
 8000402:	2300      	movs	r3, #0
 8000404:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8000406:	23ff      	movs	r3, #255	; 0xff
 8000408:	9302      	str	r3, [sp, #8]
 800040a:	2301      	movs	r3, #1
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	1dfb      	adds	r3, r7, #7
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2301      	movs	r3, #1
 8000414:	228e      	movs	r2, #142	; 0x8e
 8000416:	21ed      	movs	r1, #237	; 0xed
 8000418:	4892      	ldr	r0, [pc, #584]	; (8000664 <getDig_P+0x26c>)
 800041a:	f001 fa8b 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P1_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800041e:	23ff      	movs	r3, #255	; 0xff
 8000420:	9302      	str	r3, [sp, #8]
 8000422:	2301      	movs	r3, #1
 8000424:	9301      	str	r3, [sp, #4]
 8000426:	1dbb      	adds	r3, r7, #6
 8000428:	9300      	str	r3, [sp, #0]
 800042a:	2301      	movs	r3, #1
 800042c:	228f      	movs	r2, #143	; 0x8f
 800042e:	21ed      	movs	r1, #237	; 0xed
 8000430:	488c      	ldr	r0, [pc, #560]	; (8000664 <getDig_P+0x26c>)
 8000432:	f001 fa7f 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P1= press_lsb | (((uint16_t)press_msb)<<8);
 8000436:	79fb      	ldrb	r3, [r7, #7]
 8000438:	b21a      	sxth	r2, r3
 800043a:	79bb      	ldrb	r3, [r7, #6]
 800043c:	021b      	lsls	r3, r3, #8
 800043e:	b21b      	sxth	r3, r3
 8000440:	4313      	orrs	r3, r2
 8000442:	b21b      	sxth	r3, r3
 8000444:	b29a      	uxth	r2, r3
 8000446:	4b88      	ldr	r3, [pc, #544]	; (8000668 <getDig_P+0x270>)
 8000448:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 800044a:	23ff      	movs	r3, #255	; 0xff
 800044c:	9302      	str	r3, [sp, #8]
 800044e:	2301      	movs	r3, #1
 8000450:	9301      	str	r3, [sp, #4]
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	2290      	movs	r2, #144	; 0x90
 800045a:	21ed      	movs	r1, #237	; 0xed
 800045c:	4881      	ldr	r0, [pc, #516]	; (8000664 <getDig_P+0x26c>)
 800045e:	f001 fa69 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P2_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8000462:	23ff      	movs	r3, #255	; 0xff
 8000464:	9302      	str	r3, [sp, #8]
 8000466:	2301      	movs	r3, #1
 8000468:	9301      	str	r3, [sp, #4]
 800046a:	1dbb      	adds	r3, r7, #6
 800046c:	9300      	str	r3, [sp, #0]
 800046e:	2301      	movs	r3, #1
 8000470:	2291      	movs	r2, #145	; 0x91
 8000472:	21ed      	movs	r1, #237	; 0xed
 8000474:	487b      	ldr	r0, [pc, #492]	; (8000664 <getDig_P+0x26c>)
 8000476:	f001 fa5d 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P2= press_lsb | (((uint16_t)press_msb)<<8);
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	b21a      	sxth	r2, r3
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	b21b      	sxth	r3, r3
 8000484:	4313      	orrs	r3, r2
 8000486:	b21a      	sxth	r2, r3
 8000488:	4b78      	ldr	r3, [pc, #480]	; (800066c <getDig_P+0x274>)
 800048a:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 800048c:	23ff      	movs	r3, #255	; 0xff
 800048e:	9302      	str	r3, [sp, #8]
 8000490:	2301      	movs	r3, #1
 8000492:	9301      	str	r3, [sp, #4]
 8000494:	1dfb      	adds	r3, r7, #7
 8000496:	9300      	str	r3, [sp, #0]
 8000498:	2301      	movs	r3, #1
 800049a:	2292      	movs	r2, #146	; 0x92
 800049c:	21ed      	movs	r1, #237	; 0xed
 800049e:	4871      	ldr	r0, [pc, #452]	; (8000664 <getDig_P+0x26c>)
 80004a0:	f001 fa48 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P3_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80004a4:	23ff      	movs	r3, #255	; 0xff
 80004a6:	9302      	str	r3, [sp, #8]
 80004a8:	2301      	movs	r3, #1
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	1dbb      	adds	r3, r7, #6
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	2301      	movs	r3, #1
 80004b2:	2293      	movs	r2, #147	; 0x93
 80004b4:	21ed      	movs	r1, #237	; 0xed
 80004b6:	486b      	ldr	r0, [pc, #428]	; (8000664 <getDig_P+0x26c>)
 80004b8:	f001 fa3c 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P3= press_lsb | (((uint16_t)press_msb)<<8);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	b21a      	sxth	r2, r3
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b21a      	sxth	r2, r3
 80004ca:	4b69      	ldr	r3, [pc, #420]	; (8000670 <getDig_P+0x278>)
 80004cc:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80004ce:	23ff      	movs	r3, #255	; 0xff
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	1dfb      	adds	r3, r7, #7
 80004d8:	9300      	str	r3, [sp, #0]
 80004da:	2301      	movs	r3, #1
 80004dc:	2294      	movs	r2, #148	; 0x94
 80004de:	21ed      	movs	r1, #237	; 0xed
 80004e0:	4860      	ldr	r0, [pc, #384]	; (8000664 <getDig_P+0x26c>)
 80004e2:	f001 fa27 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P4_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80004e6:	23ff      	movs	r3, #255	; 0xff
 80004e8:	9302      	str	r3, [sp, #8]
 80004ea:	2301      	movs	r3, #1
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2301      	movs	r3, #1
 80004f4:	2295      	movs	r2, #149	; 0x95
 80004f6:	21ed      	movs	r1, #237	; 0xed
 80004f8:	485a      	ldr	r0, [pc, #360]	; (8000664 <getDig_P+0x26c>)
 80004fa:	f001 fa1b 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P4= press_lsb | (((uint16_t)press_msb)<<8);
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	b21a      	sxth	r2, r3
 8000502:	79bb      	ldrb	r3, [r7, #6]
 8000504:	021b      	lsls	r3, r3, #8
 8000506:	b21b      	sxth	r3, r3
 8000508:	4313      	orrs	r3, r2
 800050a:	b21a      	sxth	r2, r3
 800050c:	4b59      	ldr	r3, [pc, #356]	; (8000674 <getDig_P+0x27c>)
 800050e:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8000510:	23ff      	movs	r3, #255	; 0xff
 8000512:	9302      	str	r3, [sp, #8]
 8000514:	2301      	movs	r3, #1
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	1dfb      	adds	r3, r7, #7
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2301      	movs	r3, #1
 800051e:	2296      	movs	r2, #150	; 0x96
 8000520:	21ed      	movs	r1, #237	; 0xed
 8000522:	4850      	ldr	r0, [pc, #320]	; (8000664 <getDig_P+0x26c>)
 8000524:	f001 fa06 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P5_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8000528:	23ff      	movs	r3, #255	; 0xff
 800052a:	9302      	str	r3, [sp, #8]
 800052c:	2301      	movs	r3, #1
 800052e:	9301      	str	r3, [sp, #4]
 8000530:	1dbb      	adds	r3, r7, #6
 8000532:	9300      	str	r3, [sp, #0]
 8000534:	2301      	movs	r3, #1
 8000536:	2297      	movs	r2, #151	; 0x97
 8000538:	21ed      	movs	r1, #237	; 0xed
 800053a:	484a      	ldr	r0, [pc, #296]	; (8000664 <getDig_P+0x26c>)
 800053c:	f001 f9fa 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P5= press_lsb | (((uint16_t)press_msb)<<8);
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	b21a      	sxth	r2, r3
 8000544:	79bb      	ldrb	r3, [r7, #6]
 8000546:	021b      	lsls	r3, r3, #8
 8000548:	b21b      	sxth	r3, r3
 800054a:	4313      	orrs	r3, r2
 800054c:	b21a      	sxth	r2, r3
 800054e:	4b4a      	ldr	r3, [pc, #296]	; (8000678 <getDig_P+0x280>)
 8000550:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8000552:	23ff      	movs	r3, #255	; 0xff
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2301      	movs	r3, #1
 8000560:	2298      	movs	r2, #152	; 0x98
 8000562:	21ed      	movs	r1, #237	; 0xed
 8000564:	483f      	ldr	r0, [pc, #252]	; (8000664 <getDig_P+0x26c>)
 8000566:	f001 f9e5 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P6_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 800056a:	23ff      	movs	r3, #255	; 0xff
 800056c:	9302      	str	r3, [sp, #8]
 800056e:	2301      	movs	r3, #1
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	9300      	str	r3, [sp, #0]
 8000576:	2301      	movs	r3, #1
 8000578:	2299      	movs	r2, #153	; 0x99
 800057a:	21ed      	movs	r1, #237	; 0xed
 800057c:	4839      	ldr	r0, [pc, #228]	; (8000664 <getDig_P+0x26c>)
 800057e:	f001 f9d9 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P6= press_lsb | (((uint16_t)press_msb)<<8);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	b21a      	sxth	r2, r3
 8000586:	79bb      	ldrb	r3, [r7, #6]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	b21b      	sxth	r3, r3
 800058c:	4313      	orrs	r3, r2
 800058e:	b21a      	sxth	r2, r3
 8000590:	4b3a      	ldr	r3, [pc, #232]	; (800067c <getDig_P+0x284>)
 8000592:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8000594:	23ff      	movs	r3, #255	; 0xff
 8000596:	9302      	str	r3, [sp, #8]
 8000598:	2301      	movs	r3, #1
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2301      	movs	r3, #1
 80005a2:	229a      	movs	r2, #154	; 0x9a
 80005a4:	21ed      	movs	r1, #237	; 0xed
 80005a6:	482f      	ldr	r0, [pc, #188]	; (8000664 <getDig_P+0x26c>)
 80005a8:	f001 f9c4 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P7_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80005ac:	23ff      	movs	r3, #255	; 0xff
 80005ae:	9302      	str	r3, [sp, #8]
 80005b0:	2301      	movs	r3, #1
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	1dbb      	adds	r3, r7, #6
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2301      	movs	r3, #1
 80005ba:	229b      	movs	r2, #155	; 0x9b
 80005bc:	21ed      	movs	r1, #237	; 0xed
 80005be:	4829      	ldr	r0, [pc, #164]	; (8000664 <getDig_P+0x26c>)
 80005c0:	f001 f9b8 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P7= press_lsb | (((uint16_t)press_msb)<<8);
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	b21a      	sxth	r2, r3
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	021b      	lsls	r3, r3, #8
 80005cc:	b21b      	sxth	r3, r3
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b21a      	sxth	r2, r3
 80005d2:	4b2b      	ldr	r3, [pc, #172]	; (8000680 <getDig_P+0x288>)
 80005d4:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	2301      	movs	r3, #1
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	1dfb      	adds	r3, r7, #7
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	229c      	movs	r2, #156	; 0x9c
 80005e6:	21ed      	movs	r1, #237	; 0xed
 80005e8:	481e      	ldr	r0, [pc, #120]	; (8000664 <getDig_P+0x26c>)
 80005ea:	f001 f9a3 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P8_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 80005ee:	23ff      	movs	r3, #255	; 0xff
 80005f0:	9302      	str	r3, [sp, #8]
 80005f2:	2301      	movs	r3, #1
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	1dbb      	adds	r3, r7, #6
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	229d      	movs	r2, #157	; 0x9d
 80005fe:	21ed      	movs	r1, #237	; 0xed
 8000600:	4818      	ldr	r0, [pc, #96]	; (8000664 <getDig_P+0x26c>)
 8000602:	f001 f997 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P8= press_lsb | (((uint16_t)press_msb)<<8);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	b21a      	sxth	r2, r3
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	021b      	lsls	r3, r3, #8
 800060e:	b21b      	sxth	r3, r3
 8000610:	4313      	orrs	r3, r2
 8000612:	b21a      	sxth	r2, r3
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <getDig_P+0x28c>)
 8000616:	801a      	strh	r2, [r3, #0]

	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_LSB_REG, I2C_MEMADD_SIZE_8BIT, &press_lsb, sizeof(press_lsb), 0xFF);
 8000618:	23ff      	movs	r3, #255	; 0xff
 800061a:	9302      	str	r3, [sp, #8]
 800061c:	2301      	movs	r3, #1
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2301      	movs	r3, #1
 8000626:	229e      	movs	r2, #158	; 0x9e
 8000628:	21ed      	movs	r1, #237	; 0xed
 800062a:	480e      	ldr	r0, [pc, #56]	; (8000664 <getDig_P+0x26c>)
 800062c:	f001 f982 	bl	8001934 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, BMP280_READ_ADDR, BMP280_DIG_P9_MSB_REG, I2C_MEMADD_SIZE_8BIT, &press_msb, sizeof(press_msb), 0xFF);
 8000630:	23ff      	movs	r3, #255	; 0xff
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	2301      	movs	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	229f      	movs	r2, #159	; 0x9f
 8000640:	21ed      	movs	r1, #237	; 0xed
 8000642:	4808      	ldr	r0, [pc, #32]	; (8000664 <getDig_P+0x26c>)
 8000644:	f001 f976 	bl	8001934 <HAL_I2C_Mem_Read>
	dig_P9= press_lsb | (((uint16_t)press_msb)<<8);
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	b21a      	sxth	r2, r3
 800064c:	79bb      	ldrb	r3, [r7, #6]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	b21b      	sxth	r3, r3
 8000652:	4313      	orrs	r3, r2
 8000654:	b21a      	sxth	r2, r3
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <getDig_P+0x290>)
 8000658:	801a      	strh	r2, [r3, #0]
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000050 	.word	0x20000050
 8000668:	2000003e 	.word	0x2000003e
 800066c:	20000034 	.word	0x20000034
 8000670:	20000040 	.word	0x20000040
 8000674:	20000036 	.word	0x20000036
 8000678:	2000003c 	.word	0x2000003c
 800067c:	20000048 	.word	0x20000048
 8000680:	20000028 	.word	0x20000028
 8000684:	20000042 	.word	0x20000042
 8000688:	20000044 	.word	0x20000044

0800068c <bmp280_compensate_P_int32>:

	return (uint32_t)p;
}

uint32_t bmp280_compensate_P_int32(int32_t adc_P)
{
 800068c:	b480      	push	{r7}
 800068e:	b087      	sub	sp, #28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	int32_t var1,var2;
	uint32_t p;
	var1=(((int32_t)t_fine)>>1)-(int32_t)64000;
 8000694:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <bmp280_compensate_P_int32+0x134>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	105b      	asrs	r3, r3, #1
 800069a:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 800069e:	613b      	str	r3, [r7, #16]
	var2=(((var1>>2)*(var1>>2))>>11)*((int32_t)dig_P6);
 80006a0:	693b      	ldr	r3, [r7, #16]
 80006a2:	109b      	asrs	r3, r3, #2
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	1092      	asrs	r2, r2, #2
 80006a8:	fb02 f303 	mul.w	r3, r2, r3
 80006ac:	12db      	asrs	r3, r3, #11
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <bmp280_compensate_P_int32+0x138>)
 80006b0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	60fb      	str	r3, [r7, #12]
	var2=var2+((var1*((int32_t)dig_P5))<<1);
 80006ba:	4b43      	ldr	r3, [pc, #268]	; (80007c8 <bmp280_compensate_P_int32+0x13c>)
 80006bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006c0:	461a      	mov	r2, r3
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	fb03 f302 	mul.w	r3, r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4413      	add	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
	var2=(var2>>2)+(((int32_t)dig_P4)<<16);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	109a      	asrs	r2, r3, #2
 80006d4:	4b3d      	ldr	r3, [pc, #244]	; (80007cc <bmp280_compensate_P_int32+0x140>)
 80006d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	4413      	add	r3, r2
 80006de:	60fb      	str	r3, [r7, #12]
	var1=(((dig_P3*(((var1>>2)*(var1>>2))>>13))>>3)+((((int32_t)dig_P2)*var1)>>1))>>18;
 80006e0:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <bmp280_compensate_P_int32+0x144>)
 80006e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006e6:	4619      	mov	r1, r3
 80006e8:	693b      	ldr	r3, [r7, #16]
 80006ea:	109b      	asrs	r3, r3, #2
 80006ec:	693a      	ldr	r2, [r7, #16]
 80006ee:	1092      	asrs	r2, r2, #2
 80006f0:	fb02 f303 	mul.w	r3, r2, r3
 80006f4:	135b      	asrs	r3, r3, #13
 80006f6:	fb03 f301 	mul.w	r3, r3, r1
 80006fa:	10da      	asrs	r2, r3, #3
 80006fc:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <bmp280_compensate_P_int32+0x148>)
 80006fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000702:	4619      	mov	r1, r3
 8000704:	693b      	ldr	r3, [r7, #16]
 8000706:	fb03 f301 	mul.w	r3, r3, r1
 800070a:	105b      	asrs	r3, r3, #1
 800070c:	4413      	add	r3, r2
 800070e:	149b      	asrs	r3, r3, #18
 8000710:	613b      	str	r3, [r7, #16]
	var1=((((32768+var1))*((int32_t)dig_P1))>>15);
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000718:	4a2f      	ldr	r2, [pc, #188]	; (80007d8 <bmp280_compensate_P_int32+0x14c>)
 800071a:	8812      	ldrh	r2, [r2, #0]
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	13db      	asrs	r3, r3, #15
 8000722:	613b      	str	r3, [r7, #16]
	if(var1==0)
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d101      	bne.n	800072e <bmp280_compensate_P_int32+0xa2>
	{
		return 0;
 800072a:	2300      	movs	r3, #0
 800072c:	e042      	b.n	80007b4 <bmp280_compensate_P_int32+0x128>
	}
	p=(((uint32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	425b      	negs	r3, r3
 8000732:	68fa      	ldr	r2, [r7, #12]
 8000734:	1312      	asrs	r2, r2, #12
 8000736:	1a9b      	subs	r3, r3, r2
 8000738:	f640 4235 	movw	r2, #3125	; 0xc35
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 8000744:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 8000748:	617b      	str	r3, [r7, #20]
	if(p<0x80000000)
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	2b00      	cmp	r3, #0
 800074e:	db06      	blt.n	800075e <bmp280_compensate_P_int32+0xd2>
	{
		p=(p<<1)/((uint32_t)var1);
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	005a      	lsls	r2, r3, #1
 8000754:	693b      	ldr	r3, [r7, #16]
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e005      	b.n	800076a <bmp280_compensate_P_int32+0xde>
	}
	else
	{
		p=(p/(uint32_t)var1)*2;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	617b      	str	r3, [r7, #20]
	}
	var1=(((int32_t)dig_P9)*((int32_t)(((p>>3)*(p>>3))>>13)))>>12;
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <bmp280_compensate_P_int32+0x150>)
 800076c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000770:	4619      	mov	r1, r3
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	08db      	lsrs	r3, r3, #3
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	08d2      	lsrs	r2, r2, #3
 800077a:	fb02 f303 	mul.w	r3, r2, r3
 800077e:	0b5b      	lsrs	r3, r3, #13
 8000780:	fb03 f301 	mul.w	r3, r3, r1
 8000784:	131b      	asrs	r3, r3, #12
 8000786:	613b      	str	r3, [r7, #16]
	var2=(((int32_t)(p>>2))*((int32_t)dig_P8))>>13;
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	089b      	lsrs	r3, r3, #2
 800078c:	461a      	mov	r2, r3
 800078e:	4b14      	ldr	r3, [pc, #80]	; (80007e0 <bmp280_compensate_P_int32+0x154>)
 8000790:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000794:	fb03 f302 	mul.w	r3, r3, r2
 8000798:	135b      	asrs	r3, r3, #13
 800079a:	60fb      	str	r3, [r7, #12]
	p=(uint32_t)((int32_t)p+((var1+var2+dig_P7)>>4));
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	4413      	add	r3, r2
 80007a2:	4a10      	ldr	r2, [pc, #64]	; (80007e4 <bmp280_compensate_P_int32+0x158>)
 80007a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80007a8:	4413      	add	r3, r2
 80007aa:	111a      	asrs	r2, r3, #4
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	4413      	add	r3, r2
 80007b0:	617b      	str	r3, [r7, #20]

	return p;
 80007b2:	697b      	ldr	r3, [r7, #20]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000004c 	.word	0x2000004c
 80007c4:	20000048 	.word	0x20000048
 80007c8:	2000003c 	.word	0x2000003c
 80007cc:	20000036 	.word	0x20000036
 80007d0:	20000040 	.word	0x20000040
 80007d4:	20000034 	.word	0x20000034
 80007d8:	2000003e 	.word	0x2000003e
 80007dc:	20000044 	.word	0x20000044
 80007e0:	20000042 	.word	0x20000042
 80007e4:	20000028 	.word	0x20000028

080007e8 <lcd_write>:
#include "stm32f1xx_hal.h"

char string_overScale[]="FATAL ERROR!";

void lcd_write(uint8_t dat)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, ((dat>>0)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <lcd_write+0xc0>)
 8000802:	f000 fe4d 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, ((dat>>1)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	b2db      	uxtb	r3, r3
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	b2db      	uxtb	r3, r3
 8000812:	461a      	mov	r2, r3
 8000814:	2108      	movs	r1, #8
 8000816:	4825      	ldr	r0, [pc, #148]	; (80008ac <lcd_write+0xc4>)
 8000818:	f000 fe42 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, ((dat>>2)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	089b      	lsrs	r3, r3, #2
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2db      	uxtb	r3, r3
 8000828:	461a      	mov	r2, r3
 800082a:	2110      	movs	r1, #16
 800082c:	481f      	ldr	r0, [pc, #124]	; (80008ac <lcd_write+0xc4>)
 800082e:	f000 fe37 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, ((dat>>3)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	08db      	lsrs	r3, r3, #3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	2120      	movs	r1, #32
 8000842:	481a      	ldr	r0, [pc, #104]	; (80008ac <lcd_write+0xc4>)
 8000844:	f000 fe2c 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, ((dat>>4)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	091b      	lsrs	r3, r3, #4
 800084c:	b2db      	uxtb	r3, r3
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	4814      	ldr	r0, [pc, #80]	; (80008ac <lcd_write+0xc4>)
 800085a:	f000 fe21 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, ((dat>>5)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	095b      	lsrs	r3, r3, #5
 8000862:	b2db      	uxtb	r3, r3
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	480f      	ldr	r0, [pc, #60]	; (80008ac <lcd_write+0xc4>)
 8000870:	f000 fe16 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, ((dat>>6)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	099b      	lsrs	r3, r3, #6
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	b2db      	uxtb	r3, r3
 8000880:	461a      	mov	r2, r3
 8000882:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000886:	4809      	ldr	r0, [pc, #36]	; (80008ac <lcd_write+0xc4>)
 8000888:	f000 fe0a 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, ((dat>>7)&0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	09db      	lsrs	r3, r3, #7
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <lcd_write+0xc4>)
 800089a:	f000 fe01 	bl	80014a0 <HAL_GPIO_WritePin>
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40010800 	.word	0x40010800
 80008ac:	40010c00 	.word	0x40010c00

080008b0 <lcd_writeCom>:

void lcd_writeCom(uint8_t com)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2180      	movs	r1, #128	; 0x80
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <lcd_writeCom+0x58>)
 80008c0:	f000 fdee 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2140      	movs	r1, #64	; 0x40
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <lcd_writeCom+0x58>)
 80008ca:	f000 fde9 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <lcd_writeCom+0x58>)
 80008d4:	f000 fde4 	bl	80014a0 <HAL_GPIO_WritePin>

	lcd_write(com);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ff84 	bl	80007e8 <lcd_write>
	HAL_Delay(1);
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 fb7d 	bl	8000fe0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 80008e6:	2201      	movs	r2, #1
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	4807      	ldr	r0, [pc, #28]	; (8000908 <lcd_writeCom+0x58>)
 80008ec:	f000 fdd8 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 fb75 	bl	8000fe0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <lcd_writeCom+0x58>)
 80008fc:	f000 fdd0 	bl	80014a0 <HAL_GPIO_WritePin>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40010800 	.word	0x40010800

0800090c <lcd_writeData>:

void lcd_writeData(uint8_t data)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	4812      	ldr	r0, [pc, #72]	; (8000964 <lcd_writeData+0x58>)
 800091c:	f000 fdc0 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_RD_GPIO_Port, LCD_RD_Pin, GPIO_PIN_SET);
 8000920:	2201      	movs	r2, #1
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	480f      	ldr	r0, [pc, #60]	; (8000964 <lcd_writeData+0x58>)
 8000926:	f000 fdbb 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2120      	movs	r1, #32
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <lcd_writeData+0x58>)
 8000930:	f000 fdb6 	bl	80014a0 <HAL_GPIO_WritePin>

	lcd_write(data);
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff56 	bl	80007e8 <lcd_write>
	HAL_Delay(1);
 800093c:	2001      	movs	r0, #1
 800093e:	f000 fb4f 	bl	8000fe0 <HAL_Delay>

	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2180      	movs	r1, #128	; 0x80
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <lcd_writeData+0x58>)
 8000948:	f000 fdaa 	bl	80014a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800094c:	2001      	movs	r0, #1
 800094e:	f000 fb47 	bl	8000fe0 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2180      	movs	r1, #128	; 0x80
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <lcd_writeData+0x58>)
 8000958:	f000 fda2 	bl	80014a0 <HAL_GPIO_WritePin>
}
 800095c:	bf00      	nop
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40010800 	.word	0x40010800

08000968 <lcd_init>:

void lcd_init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	lcd_writeCom(0x38);
 800096c:	2038      	movs	r0, #56	; 0x38
 800096e:	f7ff ff9f 	bl	80008b0 <lcd_writeCom>
	lcd_writeCom(0x0c);
 8000972:	200c      	movs	r0, #12
 8000974:	f7ff ff9c 	bl	80008b0 <lcd_writeCom>
	lcd_writeCom(0x06);
 8000978:	2006      	movs	r0, #6
 800097a:	f7ff ff99 	bl	80008b0 <lcd_writeCom>
	lcd_writeCom(0x01);
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff ff96 	bl	80008b0 <lcd_writeCom>
	lcd_writeCom(0X80);
 8000984:	2080      	movs	r0, #128	; 0x80
 8000986:	f7ff ff93 	bl	80008b0 <lcd_writeCom>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <lcd_temp_show>:

void lcd_temp_show(uint32_t result)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	lcd_writeData((result /1000)+48);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <lcd_temp_show+0xa8>)
 800099c:	fba2 2303 	umull	r2, r3, r2, r3
 80009a0:	099b      	lsrs	r3, r3, #6
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	3330      	adds	r3, #48	; 0x30
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ffaf 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <lcd_temp_show+0xa8>)
 80009b2:	fba3 1302 	umull	r1, r3, r3, r2
 80009b6:	099b      	lsrs	r3, r3, #6
 80009b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009bc:	fb01 f303 	mul.w	r3, r1, r3
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <lcd_temp_show+0xac>)
 80009c4:	fba2 2303 	umull	r2, r3, r2, r3
 80009c8:	095b      	lsrs	r3, r3, #5
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	3330      	adds	r3, #48	; 0x30
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff9b 	bl	800090c <lcd_writeData>
	lcd_writeData('.');
 80009d6:	202e      	movs	r0, #46	; 0x2e
 80009d8:	f7ff ff98 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 100 / 10)+48);
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <lcd_temp_show+0xac>)
 80009e0:	fba3 1302 	umull	r1, r3, r3, r2
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	fb01 f303 	mul.w	r3, r1, r3
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	4a14      	ldr	r2, [pc, #80]	; (8000a40 <lcd_temp_show+0xb0>)
 80009f0:	fba2 2303 	umull	r2, r3, r2, r3
 80009f4:	08db      	lsrs	r3, r3, #3
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	3330      	adds	r3, #48	; 0x30
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff85 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <lcd_temp_show+0xb0>)
 8000a06:	fba3 2301 	umull	r2, r3, r3, r1
 8000a0a:	08da      	lsrs	r2, r3, #3
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	1aca      	subs	r2, r1, r3
 8000a16:	b2d3      	uxtb	r3, r2
 8000a18:	3330      	adds	r3, #48	; 0x30
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff75 	bl	800090c <lcd_writeData>
	lcd_writeData(0xEB);
 8000a22:	20eb      	movs	r0, #235	; 0xeb
 8000a24:	f7ff ff72 	bl	800090c <lcd_writeData>
	lcd_writeData('C');
 8000a28:	2043      	movs	r0, #67	; 0x43
 8000a2a:	f7ff ff6f 	bl	800090c <lcd_writeData>
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	10624dd3 	.word	0x10624dd3
 8000a3c:	51eb851f 	.word	0x51eb851f
 8000a40:	cccccccd 	.word	0xcccccccd

08000a44 <lcd_press_show>:

void lcd_press_show(uint32_t result)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	lcd_writeData((result / 100000)+48);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	4a3c      	ldr	r2, [pc, #240]	; (8000b44 <lcd_press_show+0x100>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	09db      	lsrs	r3, r3, #7
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3330      	adds	r3, #48	; 0x30
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff54 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 100000 / 10000)+48);
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	0953      	lsrs	r3, r2, #5
 8000a68:	4936      	ldr	r1, [pc, #216]	; (8000b44 <lcd_press_show+0x100>)
 8000a6a:	fba1 1303 	umull	r1, r3, r1, r3
 8000a6e:	09db      	lsrs	r3, r3, #7
 8000a70:	4935      	ldr	r1, [pc, #212]	; (8000b48 <lcd_press_show+0x104>)
 8000a72:	fb01 f303 	mul.w	r3, r1, r3
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	4a34      	ldr	r2, [pc, #208]	; (8000b4c <lcd_press_show+0x108>)
 8000a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7e:	0b5b      	lsrs	r3, r3, #13
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	3330      	adds	r3, #48	; 0x30
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff40 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 10000 / 1000)+48);
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	4b2f      	ldr	r3, [pc, #188]	; (8000b4c <lcd_press_show+0x108>)
 8000a90:	fba3 1302 	umull	r1, r3, r3, r2
 8000a94:	0b5b      	lsrs	r3, r3, #13
 8000a96:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a9a:	fb01 f303 	mul.w	r3, r1, r3
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	4a2b      	ldr	r2, [pc, #172]	; (8000b50 <lcd_press_show+0x10c>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	099b      	lsrs	r3, r3, #6
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	3330      	adds	r3, #48	; 0x30
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff2c 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 1000 / 100)+48);
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	4b26      	ldr	r3, [pc, #152]	; (8000b50 <lcd_press_show+0x10c>)
 8000ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8000abc:	099b      	lsrs	r3, r3, #6
 8000abe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ac2:	fb01 f303 	mul.w	r3, r1, r3
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	4a22      	ldr	r2, [pc, #136]	; (8000b54 <lcd_press_show+0x110>)
 8000aca:	fba2 2303 	umull	r2, r3, r2, r3
 8000ace:	095b      	lsrs	r3, r3, #5
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	3330      	adds	r3, #48	; 0x30
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff18 	bl	800090c <lcd_writeData>
	lcd_writeData('.');
 8000adc:	202e      	movs	r0, #46	; 0x2e
 8000ade:	f7ff ff15 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 100 /10)+48);
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <lcd_press_show+0x110>)
 8000ae6:	fba3 1302 	umull	r1, r3, r3, r2
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2164      	movs	r1, #100	; 0x64
 8000aee:	fb01 f303 	mul.w	r3, r1, r3
 8000af2:	1ad3      	subs	r3, r2, r3
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <lcd_press_show+0x114>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3330      	adds	r3, #48	; 0x30
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff02 	bl	800090c <lcd_writeData>
	lcd_writeData((result % 10)+48);
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <lcd_press_show+0x114>)
 8000b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8000b10:	08da      	lsrs	r2, r3, #3
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	1aca      	subs	r2, r1, r3
 8000b1c:	b2d3      	uxtb	r3, r2
 8000b1e:	3330      	adds	r3, #48	; 0x30
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fef2 	bl	800090c <lcd_writeData>
	lcd_writeData('h');
 8000b28:	2068      	movs	r0, #104	; 0x68
 8000b2a:	f7ff feef 	bl	800090c <lcd_writeData>
	lcd_writeData('P');
 8000b2e:	2050      	movs	r0, #80	; 0x50
 8000b30:	f7ff feec 	bl	800090c <lcd_writeData>
	lcd_writeData('a');
 8000b34:	2061      	movs	r0, #97	; 0x61
 8000b36:	f7ff fee9 	bl	800090c <lcd_writeData>
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	0a7c5ac5 	.word	0x0a7c5ac5
 8000b48:	000186a0 	.word	0x000186a0
 8000b4c:	d1b71759 	.word	0xd1b71759
 8000b50:	10624dd3 	.word	0x10624dd3
 8000b54:	51eb851f 	.word	0x51eb851f
 8000b58:	cccccccd 	.word	0xcccccccd

08000b5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b62:	f000 f9db 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b66:	f000 f835 	bl	8000bd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6a:	f000 f8a7 	bl	8000cbc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000b6e:	f000 f877 	bl	8000c60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  BMP280_SETTINGS bmp280={
 8000b72:	4a17      	ldr	r2, [pc, #92]	; (8000bd0 <main+0x74>)
 8000b74:	463b      	mov	r3, r7
 8000b76:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b7a:	6018      	str	r0, [r3, #0]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	8019      	strh	r1, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  lcd_init();
 8000b80:	f7ff fef2 	bl	8000968 <lcd_init>
	  BMP280_init(bmp280);
 8000b84:	463b      	mov	r3, r7
 8000b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b8a:	f7ff fadf 	bl	800014c <BMP280_init>

	  getDig_T();
 8000b8e:	f7ff fb4d 	bl	800022c <getDig_T>
	  int32_t temp=bmp280_compensate_T_int32(BMP280_temp_read());
 8000b92:	f7ff fb1d 	bl	80001d0 <BMP280_temp_read>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fbbf 	bl	800031c <bmp280_compensate_T_int32>
 8000b9e:	60f8      	str	r0, [r7, #12]
	  lcd_temp_show(temp);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff fef4 	bl	8000990 <lcd_temp_show>

	  lcd_writeCom(0x80|0x40);
 8000ba8:	20c0      	movs	r0, #192	; 0xc0
 8000baa:	f7ff fe81 	bl	80008b0 <lcd_writeCom>

	  getDig_P();
 8000bae:	f7ff fc23 	bl	80003f8 <getDig_P>
	  uint32_t press=bmp280_compensate_P_int32(BMP280_press_read());
 8000bb2:	f7ff fbf3 	bl	800039c <BMP280_press_read>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fd67 	bl	800068c <bmp280_compensate_P_int32>
 8000bbe:	60b8      	str	r0, [r7, #8]
	  lcd_press_show(press);
 8000bc0:	68b8      	ldr	r0, [r7, #8]
 8000bc2:	f7ff ff3f 	bl	8000a44 <lcd_press_show>
	  HAL_Delay(1000);
 8000bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bca:	f000 fa09 	bl	8000fe0 <HAL_Delay>
  {
 8000bce:	e7d7      	b.n	8000b80 <main+0x24>
 8000bd0:	08002d2c 	.word	0x08002d2c

08000bd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b090      	sub	sp, #64	; 0x40
 8000bd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bda:	f107 0318 	add.w	r3, r7, #24
 8000bde:	2228      	movs	r2, #40	; 0x28
 8000be0:	2100      	movs	r1, #0
 8000be2:	4618      	mov	r0, r3
 8000be4:	f002 f88e 	bl	8002d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c04:	2301      	movs	r3, #1
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c12:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c18:	f107 0318 	add.w	r3, r7, #24
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f001 fc45 	bl	80024ac <HAL_RCC_OscConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c28:	f000 f8aa 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c30:	2302      	movs	r3, #2
 8000c32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 feb0 	bl	80029ac <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c52:	f000 f895 	bl	8000d80 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3740      	adds	r7, #64	; 0x40
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c66:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <MX_I2C2_Init+0x54>)
 8000c68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_I2C2_Init+0x58>)
 8000c6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c8a:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c9c:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <MX_I2C2_Init+0x50>)
 8000c9e:	f000 fc17 	bl	80014d0 <HAL_I2C_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ca8:	f000 f86a 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000050 	.word	0x20000050
 8000cb4:	40005800 	.word	0x40005800
 8000cb8:	000186a0 	.word	0x000186a0

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd0:	4b28      	ldr	r3, [pc, #160]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cd2:	699b      	ldr	r3, [r3, #24]
 8000cd4:	4a27      	ldr	r2, [pc, #156]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cd6:	f043 0320 	orr.w	r3, r3, #32
 8000cda:	6193      	str	r3, [r2, #24]
 8000cdc:	4b25      	ldr	r3, [pc, #148]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	f003 0320 	and.w	r3, r3, #32
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cee:	f043 0304 	orr.w	r3, r3, #4
 8000cf2:	6193      	str	r3, [r2, #24]
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f003 0304 	and.w	r3, r3, #4
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d00:	4b1c      	ldr	r3, [pc, #112]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	6193      	str	r3, [r2, #24]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <MX_GPIO_Init+0xb8>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin, GPIO_PIN_RESET);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f248 01e0 	movw	r1, #32992	; 0x80e0
 8000d1e:	4816      	ldr	r0, [pc, #88]	; (8000d78 <MX_GPIO_Init+0xbc>)
 8000d20:	f000 fbbe 	bl	80014a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000d24:	2200      	movs	r2, #0
 8000d26:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000d2a:	4814      	ldr	r0, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d2c:	f000 fbb8 	bl	80014a0 <HAL_GPIO_WritePin>
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_WR_Pin LCD_RD_Pin LCD_E_Pin LCD_D0_Pin */
  GPIO_InitStruct.Pin = LCD_WR_Pin|LCD_RD_Pin|LCD_E_Pin|LCD_D0_Pin;
 8000d30:	f248 03e0 	movw	r3, #32992	; 0x80e0
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <MX_GPIO_Init+0xbc>)
 8000d4a:	f000 fa4f 	bl	80011ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_D1_Pin LCD_D2_Pin LCD_D3_Pin LCD_D4_Pin
                           LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_D1_Pin|LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin
 8000d4e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000d52:	613b      	str	r3, [r7, #16]
                          |LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_GPIO_Init+0xc0>)
 8000d68:	f000 fa40 	bl	80011ec <HAL_GPIO_Init>

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800
 8000d7c:	40010c00 	.word	0x40010c00

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_MspInit+0x5c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_MspInit+0x5c>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_MspInit+0x5c>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_MspInit+0x5c>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x60>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_MspInit+0x60>)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dde:	bf00      	nop
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010000 	.word	0x40010000

08000df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0310 	add.w	r3, r7, #16
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_I2C_MspInit+0x74>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d124      	bne.n	8000e5a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e16:	f043 0308 	orr.w	r3, r3, #8
 8000e1a:	6193      	str	r3, [r2, #24]
 8000e1c:	4b12      	ldr	r3, [pc, #72]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	f003 0308 	and.w	r3, r3, #8
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e2e:	2312      	movs	r3, #18
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	f107 0310 	add.w	r3, r7, #16
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480b      	ldr	r0, [pc, #44]	; (8000e6c <HAL_I2C_MspInit+0x7c>)
 8000e3e:	f000 f9d5 	bl	80011ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e44:	69db      	ldr	r3, [r3, #28]
 8000e46:	4a08      	ldr	r2, [pc, #32]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e4c:	61d3      	str	r3, [r2, #28]
 8000e4e:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <HAL_I2C_MspInit+0x78>)
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40005800 	.word	0x40005800
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010c00 	.word	0x40010c00

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr

08000e7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <HardFault_Handler+0x4>

08000e82 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <MemManage_Handler+0x4>

08000e88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <BusFault_Handler+0x4>

08000e8e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <UsageFault_Handler+0x4>

08000e94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f874 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ed0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ed2:	e003      	b.n	8000edc <LoopCopyDataInit>

08000ed4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ed6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ed8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000eda:	3104      	adds	r1, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000edc:	480a      	ldr	r0, [pc, #40]	; (8000f08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ee0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ee2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ee4:	d3f6      	bcc.n	8000ed4 <CopyDataInit>
  ldr r2, =_sbss
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ee8:	e002      	b.n	8000ef0 <LoopFillZerobss>

08000eea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000eec:	f842 3b04 	str.w	r3, [r2], #4

08000ef0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ef2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ef4:	d3f9      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef6:	f7ff ffe5 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000efa:	f001 fedf 	bl	8002cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fe2d 	bl	8000b5c <main>
  bx lr
 8000f02:	4770      	bx	lr
  ldr r3, =_sidata
 8000f04:	08002d68 	.word	0x08002d68
  ldr r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f0c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000f14:	200000a8 	.word	0x200000a8

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	; (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	; (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f929 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff ff28 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f933 	bl	80011d2 <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f000 f909 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	; (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000004 	.word	0x20000004

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a03      	ldr	r2, [pc, #12]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000008 	.word	0x20000008
 8000fc8:	200000a4 	.word	0x200000a4

08000fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	; (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	200000a4 	.word	0x200000a4

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_Delay+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffe0 	bl	8000fcc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff90 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff49 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff5e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff90 	bl	80010dc <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5f 	bl	8001088 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ffb0 	bl	8001140 <SysTick_Config>
 80011e0:	4603      	mov	r3, r0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b08b      	sub	sp, #44	; 0x2c
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e127      	b.n	8001450 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001200:	2201      	movs	r2, #1
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	69fa      	ldr	r2, [r7, #28]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 8116 	bne.w	800144a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	2b12      	cmp	r3, #18
 8001224:	d034      	beq.n	8001290 <HAL_GPIO_Init+0xa4>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d80d      	bhi.n	8001246 <HAL_GPIO_Init+0x5a>
 800122a:	2b02      	cmp	r3, #2
 800122c:	d02b      	beq.n	8001286 <HAL_GPIO_Init+0x9a>
 800122e:	2b02      	cmp	r3, #2
 8001230:	d804      	bhi.n	800123c <HAL_GPIO_Init+0x50>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d031      	beq.n	800129a <HAL_GPIO_Init+0xae>
 8001236:	2b01      	cmp	r3, #1
 8001238:	d01c      	beq.n	8001274 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800123a:	e048      	b.n	80012ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800123c:	2b03      	cmp	r3, #3
 800123e:	d043      	beq.n	80012c8 <HAL_GPIO_Init+0xdc>
 8001240:	2b11      	cmp	r3, #17
 8001242:	d01b      	beq.n	800127c <HAL_GPIO_Init+0x90>
          break;
 8001244:	e043      	b.n	80012ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001246:	4a89      	ldr	r2, [pc, #548]	; (800146c <HAL_GPIO_Init+0x280>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d026      	beq.n	800129a <HAL_GPIO_Init+0xae>
 800124c:	4a87      	ldr	r2, [pc, #540]	; (800146c <HAL_GPIO_Init+0x280>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d806      	bhi.n	8001260 <HAL_GPIO_Init+0x74>
 8001252:	4a87      	ldr	r2, [pc, #540]	; (8001470 <HAL_GPIO_Init+0x284>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d020      	beq.n	800129a <HAL_GPIO_Init+0xae>
 8001258:	4a86      	ldr	r2, [pc, #536]	; (8001474 <HAL_GPIO_Init+0x288>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d01d      	beq.n	800129a <HAL_GPIO_Init+0xae>
          break;
 800125e:	e036      	b.n	80012ce <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001260:	4a85      	ldr	r2, [pc, #532]	; (8001478 <HAL_GPIO_Init+0x28c>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d019      	beq.n	800129a <HAL_GPIO_Init+0xae>
 8001266:	4a85      	ldr	r2, [pc, #532]	; (800147c <HAL_GPIO_Init+0x290>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d016      	beq.n	800129a <HAL_GPIO_Init+0xae>
 800126c:	4a84      	ldr	r2, [pc, #528]	; (8001480 <HAL_GPIO_Init+0x294>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d013      	beq.n	800129a <HAL_GPIO_Init+0xae>
          break;
 8001272:	e02c      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	623b      	str	r3, [r7, #32]
          break;
 800127a:	e028      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	3304      	adds	r3, #4
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e023      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	68db      	ldr	r3, [r3, #12]
 800128a:	3308      	adds	r3, #8
 800128c:	623b      	str	r3, [r7, #32]
          break;
 800128e:	e01e      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	330c      	adds	r3, #12
 8001296:	623b      	str	r3, [r7, #32]
          break;
 8001298:	e019      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012a2:	2304      	movs	r3, #4
 80012a4:	623b      	str	r3, [r7, #32]
          break;
 80012a6:	e012      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b0:	2308      	movs	r3, #8
 80012b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	611a      	str	r2, [r3, #16]
          break;
 80012ba:	e008      	b.n	80012ce <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012bc:	2308      	movs	r3, #8
 80012be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69fa      	ldr	r2, [r7, #28]
 80012c4:	615a      	str	r2, [r3, #20]
          break;
 80012c6:	e002      	b.n	80012ce <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
          break;
 80012cc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2bff      	cmp	r3, #255	; 0xff
 80012d2:	d801      	bhi.n	80012d8 <HAL_GPIO_Init+0xec>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	e001      	b.n	80012dc <HAL_GPIO_Init+0xf0>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3304      	adds	r3, #4
 80012dc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	2bff      	cmp	r3, #255	; 0xff
 80012e2:	d802      	bhi.n	80012ea <HAL_GPIO_Init+0xfe>
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_Init+0x104>
 80012ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ec:	3b08      	subs	r3, #8
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	210f      	movs	r1, #15
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	401a      	ands	r2, r3
 8001302:	6a39      	ldr	r1, [r7, #32]
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	fa01 f303 	lsl.w	r3, r1, r3
 800130a:	431a      	orrs	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 8096 	beq.w	800144a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800131e:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_GPIO_Init+0x298>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a58      	ldr	r2, [pc, #352]	; (8001484 <HAL_GPIO_Init+0x298>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b56      	ldr	r3, [pc, #344]	; (8001484 <HAL_GPIO_Init+0x298>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001336:	4a54      	ldr	r2, [pc, #336]	; (8001488 <HAL_GPIO_Init+0x29c>)
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	4013      	ands	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4b      	ldr	r2, [pc, #300]	; (800148c <HAL_GPIO_Init+0x2a0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x19e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_GPIO_Init+0x2a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x19a>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a49      	ldr	r2, [pc, #292]	; (8001494 <HAL_GPIO_Init+0x2a8>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x196>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a48      	ldr	r2, [pc, #288]	; (8001498 <HAL_GPIO_Init+0x2ac>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x192>
 800137a:	2303      	movs	r3, #3
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x1a0>
 800137e:	2304      	movs	r3, #4
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x1a0>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x1a0>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x1a0>
 800138a:	2300      	movs	r3, #0
 800138c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800139c:	493a      	ldr	r1, [pc, #232]	; (8001488 <HAL_GPIO_Init+0x29c>)
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4938      	ldr	r1, [pc, #224]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013c4:	4b35      	ldr	r3, [pc, #212]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4933      	ldr	r1, [pc, #204]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013de:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013e0:	685a      	ldr	r2, [r3, #4]
 80013e2:	492e      	ldr	r1, [pc, #184]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
 80013ea:	e006      	b.n	80013fa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	4929      	ldr	r1, [pc, #164]	; (800149c <HAL_GPIO_Init+0x2b0>)
 80013f6:	4013      	ands	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d006      	beq.n	8001414 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001406:	4b25      	ldr	r3, [pc, #148]	; (800149c <HAL_GPIO_Init+0x2b0>)
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	4924      	ldr	r1, [pc, #144]	; (800149c <HAL_GPIO_Init+0x2b0>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	608b      	str	r3, [r1, #8]
 8001412:	e006      	b.n	8001422 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001414:	4b21      	ldr	r3, [pc, #132]	; (800149c <HAL_GPIO_Init+0x2b0>)
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	43db      	mvns	r3, r3
 800141c:	491f      	ldr	r1, [pc, #124]	; (800149c <HAL_GPIO_Init+0x2b0>)
 800141e:	4013      	ands	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800142e:	4b1b      	ldr	r3, [pc, #108]	; (800149c <HAL_GPIO_Init+0x2b0>)
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	491a      	ldr	r1, [pc, #104]	; (800149c <HAL_GPIO_Init+0x2b0>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_GPIO_Init+0x2b0>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	43db      	mvns	r3, r3
 8001444:	4915      	ldr	r1, [pc, #84]	; (800149c <HAL_GPIO_Init+0x2b0>)
 8001446:	4013      	ands	r3, r2
 8001448:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	3301      	adds	r3, #1
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	f47f aed0 	bne.w	8001200 <HAL_GPIO_Init+0x14>
  }
}
 8001460:	bf00      	nop
 8001462:	372c      	adds	r7, #44	; 0x2c
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	10210000 	.word	0x10210000
 8001470:	10110000 	.word	0x10110000
 8001474:	10120000 	.word	0x10120000
 8001478:	10310000 	.word	0x10310000
 800147c:	10320000 	.word	0x10320000
 8001480:	10220000 	.word	0x10220000
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000
 800148c:	40010800 	.word	0x40010800
 8001490:	40010c00 	.word	0x40010c00
 8001494:	40011000 	.word	0x40011000
 8001498:	40011400 	.word	0x40011400
 800149c:	40010400 	.word	0x40010400

080014a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	807b      	strh	r3, [r7, #2]
 80014ac:	4613      	mov	r3, r2
 80014ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	787b      	ldrb	r3, [r7, #1]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b6:	887a      	ldrh	r2, [r7, #2]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014bc:	e003      	b.n	80014c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	041a      	lsls	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	611a      	str	r2, [r3, #16]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e11f      	b.n	8001722 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d106      	bne.n	80014fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fc7a 	bl	8000df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2224      	movs	r2, #36	; 0x24
 8001500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f022 0201 	bic.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001534:	f001 fb90 	bl	8002c58 <HAL_RCC_GetPCLK1Freq>
 8001538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4a7b      	ldr	r2, [pc, #492]	; (800172c <HAL_I2C_Init+0x25c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d807      	bhi.n	8001554 <HAL_I2C_Init+0x84>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	4a7a      	ldr	r2, [pc, #488]	; (8001730 <HAL_I2C_Init+0x260>)
 8001548:	4293      	cmp	r3, r2
 800154a:	bf94      	ite	ls
 800154c:	2301      	movls	r3, #1
 800154e:	2300      	movhi	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	e006      	b.n	8001562 <HAL_I2C_Init+0x92>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4a77      	ldr	r2, [pc, #476]	; (8001734 <HAL_I2C_Init+0x264>)
 8001558:	4293      	cmp	r3, r2
 800155a:	bf94      	ite	ls
 800155c:	2301      	movls	r3, #1
 800155e:	2300      	movhi	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e0db      	b.n	8001722 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_I2C_Init+0x268>)
 800156e:	fba2 2303 	umull	r2, r3, r2, r3
 8001572:	0c9b      	lsrs	r3, r3, #18
 8001574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68ba      	ldr	r2, [r7, #8]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	4a64      	ldr	r2, [pc, #400]	; (800172c <HAL_I2C_Init+0x25c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d802      	bhi.n	80015a4 <HAL_I2C_Init+0xd4>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3301      	adds	r3, #1
 80015a2:	e009      	b.n	80015b8 <HAL_I2C_Init+0xe8>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	4a63      	ldr	r2, [pc, #396]	; (800173c <HAL_I2C_Init+0x26c>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	3301      	adds	r3, #1
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	430b      	orrs	r3, r1
 80015be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4956      	ldr	r1, [pc, #344]	; (800172c <HAL_I2C_Init+0x25c>)
 80015d4:	428b      	cmp	r3, r1
 80015d6:	d80d      	bhi.n	80015f4 <HAL_I2C_Init+0x124>
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1e59      	subs	r1, r3, #1
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	bf38      	it	cc
 80015f0:	2304      	movcc	r3, #4
 80015f2:	e04f      	b.n	8001694 <HAL_I2C_Init+0x1c4>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <HAL_I2C_Init+0x150>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e58      	subs	r0, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6859      	ldr	r1, [r3, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	440b      	add	r3, r1
 800160a:	fbb0 f3f3 	udiv	r3, r0, r3
 800160e:	3301      	adds	r3, #1
 8001610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf0c      	ite	eq
 8001618:	2301      	moveq	r3, #1
 800161a:	2300      	movne	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	e012      	b.n	8001646 <HAL_I2C_Init+0x176>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e58      	subs	r0, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	0099      	lsls	r1, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	fbb0 f3f3 	udiv	r3, r0, r3
 8001636:	3301      	adds	r3, #1
 8001638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf0c      	ite	eq
 8001640:	2301      	moveq	r3, #1
 8001642:	2300      	movne	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Init+0x17e>
 800164a:	2301      	movs	r3, #1
 800164c:	e022      	b.n	8001694 <HAL_I2C_Init+0x1c4>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d10e      	bne.n	8001674 <HAL_I2C_Init+0x1a4>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1e58      	subs	r0, r3, #1
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	440b      	add	r3, r1
 8001664:	fbb0 f3f3 	udiv	r3, r0, r3
 8001668:	3301      	adds	r3, #1
 800166a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800166e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001672:	e00f      	b.n	8001694 <HAL_I2C_Init+0x1c4>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	1e58      	subs	r0, r3, #1
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6859      	ldr	r1, [r3, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	0099      	lsls	r1, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	fbb0 f3f3 	udiv	r3, r0, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	6809      	ldr	r1, [r1, #0]
 8001698:	4313      	orrs	r3, r2
 800169a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6911      	ldr	r1, [r2, #16]
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	68d2      	ldr	r2, [r2, #12]
 80016ce:	4311      	orrs	r1, r2
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6812      	ldr	r2, [r2, #0]
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	695a      	ldr	r2, [r3, #20]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 0201 	orr.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2220      	movs	r2, #32
 800170e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2200      	movs	r2, #0
 8001716:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	000186a0 	.word	0x000186a0
 8001730:	001e847f 	.word	0x001e847f
 8001734:	003d08ff 	.word	0x003d08ff
 8001738:	431bde83 	.word	0x431bde83
 800173c:	10624dd3 	.word	0x10624dd3

08001740 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af02      	add	r7, sp, #8
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	4608      	mov	r0, r1
 800174a:	4611      	mov	r1, r2
 800174c:	461a      	mov	r2, r3
 800174e:	4603      	mov	r3, r0
 8001750:	817b      	strh	r3, [r7, #10]
 8001752:	460b      	mov	r3, r1
 8001754:	813b      	strh	r3, [r7, #8]
 8001756:	4613      	mov	r3, r2
 8001758:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800175a:	f7ff fc37 	bl	8000fcc <HAL_GetTick>
 800175e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001766:	b2db      	uxtb	r3, r3
 8001768:	2b20      	cmp	r3, #32
 800176a:	f040 80d9 	bne.w	8001920 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2319      	movs	r3, #25
 8001774:	2201      	movs	r2, #1
 8001776:	496d      	ldr	r1, [pc, #436]	; (800192c <HAL_I2C_Mem_Write+0x1ec>)
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f000 fcbb 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001784:	2302      	movs	r3, #2
 8001786:	e0cc      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800178e:	2b01      	cmp	r3, #1
 8001790:	d101      	bne.n	8001796 <HAL_I2C_Mem_Write+0x56>
 8001792:	2302      	movs	r3, #2
 8001794:	e0c5      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d007      	beq.n	80017bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f042 0201 	orr.w	r2, r2, #1
 80017ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	2221      	movs	r2, #33	; 0x21
 80017d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2240      	movs	r2, #64	; 0x40
 80017d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2200      	movs	r2, #0
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6a3a      	ldr	r2, [r7, #32]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80017ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4a4d      	ldr	r2, [pc, #308]	; (8001930 <HAL_I2C_Mem_Write+0x1f0>)
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80017fe:	88f8      	ldrh	r0, [r7, #6]
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	8979      	ldrh	r1, [r7, #10]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	4603      	mov	r3, r0
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 faf2 	bl	8001df8 <I2C_RequestMemoryWrite>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d052      	beq.n	80018c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e081      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fd3c 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d00d      	beq.n	800184a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	2b04      	cmp	r3, #4
 8001834:	d107      	bne.n	8001846 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	3b01      	subs	r3, #1
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001870:	b29b      	uxth	r3, r3
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b04      	cmp	r3, #4
 8001886:	d11b      	bne.n	80018c0 <HAL_I2C_Mem_Write+0x180>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d017      	beq.n	80018c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	1c5a      	adds	r2, r3, #1
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018aa:	3b01      	subs	r3, #1
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1aa      	bne.n	800181e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fd28 	bl	8002322 <I2C_WaitOnBTFFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00d      	beq.n	80018f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d107      	bne.n	80018f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e016      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2220      	movs	r2, #32
 8001908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800191c:	2300      	movs	r3, #0
 800191e:	e000      	b.n	8001922 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001920:	2302      	movs	r3, #2
  }
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	00100002 	.word	0x00100002
 8001930:	ffff0000 	.word	0xffff0000

08001934 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	; 0x30
 8001938:	af02      	add	r7, sp, #8
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	4608      	mov	r0, r1
 800193e:	4611      	mov	r1, r2
 8001940:	461a      	mov	r2, r3
 8001942:	4603      	mov	r3, r0
 8001944:	817b      	strh	r3, [r7, #10]
 8001946:	460b      	mov	r3, r1
 8001948:	813b      	strh	r3, [r7, #8]
 800194a:	4613      	mov	r3, r2
 800194c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001952:	f7ff fb3b 	bl	8000fcc <HAL_GetTick>
 8001956:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b20      	cmp	r3, #32
 8001962:	f040 823d 	bne.w	8001de0 <HAL_I2C_Mem_Read+0x4ac>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2319      	movs	r3, #25
 800196c:	2201      	movs	r2, #1
 800196e:	4981      	ldr	r1, [pc, #516]	; (8001b74 <HAL_I2C_Mem_Read+0x240>)
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fbbf 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800197c:	2302      	movs	r3, #2
 800197e:	e230      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001986:	2b01      	cmp	r3, #1
 8001988:	d101      	bne.n	800198e <HAL_I2C_Mem_Read+0x5a>
 800198a:	2302      	movs	r3, #2
 800198c:	e229      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d007      	beq.n	80019b4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2222      	movs	r2, #34	; 0x22
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2240      	movs	r2, #64	; 0x40
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a61      	ldr	r2, [pc, #388]	; (8001b78 <HAL_I2C_Mem_Read+0x244>)
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019f6:	88f8      	ldrh	r0, [r7, #6]
 80019f8:	893a      	ldrh	r2, [r7, #8]
 80019fa:	8979      	ldrh	r1, [r7, #10]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4603      	mov	r3, r0
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fa8c 	bl	8001f24 <I2C_RequestMemoryRead>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1e5      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
    }

    if (hi2c->XferSize == 0U)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d113      	bne.n	8001a46 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	61fb      	str	r3, [r7, #28]
 8001a32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e1b9      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
    }
    else if (hi2c->XferSize == 1U)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d11d      	bne.n	8001a8a <HAL_I2C_Mem_Read+0x156>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a5c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a60:	2300      	movs	r3, #0
 8001a62:	61bb      	str	r3, [r7, #24]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a86:	b662      	cpsie	i
 8001a88:	e197      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d11d      	bne.n	8001ace <HAL_I2C_Mem_Read+0x19a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ac8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001aca:	b662      	cpsie	i
 8001acc:	e175      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001adc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001af4:	e161      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
    {
      if (hi2c->XferSize <= 3U)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	f200 811a 	bhi.w	8001d34 <HAL_I2C_Mem_Read+0x400>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d123      	bne.n	8001b50 <HAL_I2C_Mem_Read+0x21c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 fc49 	bl	80023a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_Mem_Read+0x1e8>
          {
            return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e162      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b4e:	e134      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d150      	bne.n	8001bfa <HAL_I2C_Mem_Read+0x2c6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	2200      	movs	r2, #0
 8001b60:	4906      	ldr	r1, [pc, #24]	; (8001b7c <HAL_I2C_Mem_Read+0x248>)
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 fac6 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <HAL_I2C_Mem_Read+0x24c>
          {
            return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e137      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
 8001b72:	bf00      	nop
 8001b74:	00100002 	.word	0x00100002
 8001b78:	ffff0000 	.word	0xffff0000
 8001b7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b90:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001bc4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bf8:	e0df      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c00:	2200      	movs	r2, #0
 8001c02:	497a      	ldr	r1, [pc, #488]	; (8001dec <HAL_I2C_Mem_Read+0x4b8>)
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f000 fa75 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_I2C_Mem_Read+0x2e0>
          {
            return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e0e6      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	b2d2      	uxtb	r2, r2
 8001c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	1c5a      	adds	r2, r3, #1
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	3b01      	subs	r3, #1
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001c58:	4b65      	ldr	r3, [pc, #404]	; (8001df0 <HAL_I2C_Mem_Read+0x4bc>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	08db      	lsrs	r3, r3, #3
 8001c5e:	4a65      	ldr	r2, [pc, #404]	; (8001df4 <HAL_I2C_Mem_Read+0x4c0>)
 8001c60:	fba2 2303 	umull	r2, r3, r2, r3
 8001c64:	0a1a      	lsrs	r2, r3, #8
 8001c66:	4613      	mov	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00da      	lsls	r2, r3, #3
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d117      	bne.n	8001cae <HAL_I2C_Mem_Read+0x37a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2220      	movs	r2, #32
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ca0:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e099      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d1da      	bne.n	8001c72 <HAL_I2C_Mem_Read+0x33e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691a      	ldr	r2, [r3, #16]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	1c5a      	adds	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cfe:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691a      	ldr	r2, [r3, #16]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d32:	e042      	b.n	8001dba <HAL_I2C_Mem_Read+0x486>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fb33 	bl	80023a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <HAL_I2C_Mem_Read+0x414>
        {
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e04c      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b04      	cmp	r3, #4
 8001d86:	d118      	bne.n	8001dba <HAL_I2C_Mem_Read+0x486>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691a      	ldr	r2, [r3, #16]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae99 	bne.w	8001af6 <HAL_I2C_Mem_Read+0x1c2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2C_Mem_Read+0x4ae>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	00010004 	.word	0x00010004
 8001df0:	20000000 	.word	0x20000000
 8001df4:	14f8b589 	.word	0x14f8b589

08001df8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	4608      	mov	r0, r1
 8001e02:	4611      	mov	r1, r2
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	817b      	strh	r3, [r7, #10]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	813b      	strh	r3, [r7, #8]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e2e:	68f8      	ldr	r0, [r7, #12]
 8001e30:	f000 f960 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00d      	beq.n	8001e56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e48:	d103      	bne.n	8001e52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e05f      	b.n	8001f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e56:	897b      	ldrh	r3, [r7, #10]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001e64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	6a3a      	ldr	r2, [r7, #32]
 8001e6a:	492d      	ldr	r1, [pc, #180]	; (8001f20 <I2C_RequestMemoryWrite+0x128>)
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	f000 f998 	bl	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e04c      	b.n	8001f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	6a39      	ldr	r1, [r7, #32]
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fa02 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00d      	beq.n	8001ebe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d107      	bne.n	8001eba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e02b      	b.n	8001f16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ebe:	88fb      	ldrh	r3, [r7, #6]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001ec4:	893b      	ldrh	r3, [r7, #8]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	e021      	b.n	8001f14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ed0:	893b      	ldrh	r3, [r7, #8]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee0:	6a39      	ldr	r1, [r7, #32]
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 f9dc 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d107      	bne.n	8001f06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e005      	b.n	8001f16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f0a:	893b      	ldrh	r3, [r7, #8]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	00010002 	.word	0x00010002

08001f24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af02      	add	r7, sp, #8
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	4608      	mov	r0, r1
 8001f2e:	4611      	mov	r1, r2
 8001f30:	461a      	mov	r2, r3
 8001f32:	4603      	mov	r3, r0
 8001f34:	817b      	strh	r3, [r7, #10]
 8001f36:	460b      	mov	r3, r1
 8001f38:	813b      	strh	r3, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f8c2 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00d      	beq.n	8001f92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f84:	d103      	bne.n	8001f8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0aa      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f92:	897b      	ldrh	r3, [r7, #10]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	461a      	mov	r2, r3
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	6a3a      	ldr	r2, [r7, #32]
 8001fa6:	4952      	ldr	r1, [pc, #328]	; (80020f0 <I2C_RequestMemoryRead+0x1cc>)
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f8fa 	bl	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e097      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd0:	6a39      	ldr	r1, [r7, #32]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 f964 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00d      	beq.n	8001ffa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d107      	bne.n	8001ff6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ff4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e076      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002000:	893b      	ldrh	r3, [r7, #8]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	e021      	b.n	8002050 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800200c:	893b      	ldrh	r3, [r7, #8]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2da      	uxtb	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201c:	6a39      	ldr	r1, [r7, #32]
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f93e 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b04      	cmp	r3, #4
 8002030:	d107      	bne.n	8002042 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002040:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e050      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002046:	893b      	ldrh	r3, [r7, #8]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002052:	6a39      	ldr	r1, [r7, #32]
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f923 	bl	80022a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00d      	beq.n	800207c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	2b04      	cmp	r3, #4
 8002066:	d107      	bne.n	8002078 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002076:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e035      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	2200      	movs	r2, #0
 8002094:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 f82b 	bl	80020f4 <I2C_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00d      	beq.n	80020c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020b2:	d103      	bne.n	80020bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e013      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020c0:	897b      	ldrh	r3, [r7, #10]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	6a3a      	ldr	r2, [r7, #32]
 80020d4:	4906      	ldr	r1, [pc, #24]	; (80020f0 <I2C_RequestMemoryRead+0x1cc>)
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f863 	bl	80021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	00010002 	.word	0x00010002

080020f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	4613      	mov	r3, r2
 8002102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002104:	e025      	b.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d021      	beq.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7fe ff5d 	bl	8000fcc <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e023      	b.n	800219a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10d      	bne.n	8002178 <I2C_WaitOnFlagUntilTimeout+0x84>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf0c      	ite	eq
 800216e:	2301      	moveq	r3, #1
 8002170:	2300      	movne	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
 8002176:	e00c      	b.n	8002192 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	43da      	mvns	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4013      	ands	r3, r2
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf0c      	ite	eq
 800218a:	2301      	moveq	r3, #1
 800218c:	2300      	movne	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	429a      	cmp	r2, r3
 8002196:	d0b6      	beq.n	8002106 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b0:	e051      	b.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d123      	bne.n	800220a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2220      	movs	r2, #32
 80021e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e046      	b.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d021      	beq.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002212:	f7fe fedb 	bl	8000fcc <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	429a      	cmp	r2, r3
 8002220:	d302      	bcc.n	8002228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d116      	bne.n	8002256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e020      	b.n	8002298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	0c1b      	lsrs	r3, r3, #16
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	d10c      	bne.n	800227a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4013      	ands	r3, r2
 800226c:	b29b      	uxth	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	bf14      	ite	ne
 8002272:	2301      	movne	r3, #1
 8002274:	2300      	moveq	r3, #0
 8002276:	b2db      	uxtb	r3, r3
 8002278:	e00b      	b.n	8002292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	43da      	mvns	r2, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	4013      	ands	r3, r2
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d18d      	bne.n	80021b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ac:	e02d      	b.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 f8ce 	bl	8002450 <I2C_IsAcknowledgeFailed>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e02d      	b.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c4:	d021      	beq.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c6:	f7fe fe81 	bl	8000fcc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d302      	bcc.n	80022dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d116      	bne.n	800230a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f043 0220 	orr.w	r2, r3, #32
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e007      	b.n	800231a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002314:	2b80      	cmp	r3, #128	; 0x80
 8002316:	d1ca      	bne.n	80022ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	60f8      	str	r0, [r7, #12]
 800232a:	60b9      	str	r1, [r7, #8]
 800232c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800232e:	e02d      	b.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f88d 	bl	8002450 <I2C_IsAcknowledgeFailed>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e02d      	b.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002346:	d021      	beq.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002348:	f7fe fe40 	bl	8000fcc <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d302      	bcc.n	800235e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0220 	orr.w	r2, r3, #32
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e007      	b.n	800239c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	f003 0304 	and.w	r3, r3, #4
 8002396:	2b04      	cmp	r3, #4
 8002398:	d1ca      	bne.n	8002330 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023b0:	e042      	b.n	8002438 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d119      	bne.n	80023f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0210 	mvn.w	r2, #16
 80023c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e029      	b.n	8002448 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f4:	f7fe fdea 	bl	8000fcc <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d302      	bcc.n	800240a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d116      	bne.n	8002438 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	f043 0220 	orr.w	r2, r3, #32
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e007      	b.n	8002448 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d1b5      	bne.n	80023b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}

08002450 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d11b      	bne.n	80024a0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002470:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0204 	orr.w	r2, r3, #4
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e26c      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024cc:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024d8:	4b8f      	ldr	r3, [pc, #572]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
 80024e4:	4b8c      	ldr	r3, [pc, #560]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	4b89      	ldr	r3, [pc, #548]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d06c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x12c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d168      	bne.n	80025d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e246      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x76>
 8002514:	4b80      	ldr	r3, [pc, #512]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a7f      	ldr	r2, [pc, #508]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b7b      	ldr	r3, [pc, #492]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b78      	ldr	r3, [pc, #480]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a77      	ldr	r2, [pc, #476]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xbc>
 800254e:	4b72      	ldr	r3, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a71      	ldr	r2, [pc, #452]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd4>
 8002568:	4b6b      	ldr	r3, [pc, #428]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6a      	ldr	r2, [pc, #424]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b68      	ldr	r3, [pc, #416]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a67      	ldr	r2, [pc, #412]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fd20 	bl	8000fcc <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fd1c 	bl	8000fcc <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1fa      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe4>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b0:	f7fe fd0c 	bl	8000fcc <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fd08 	bl	8000fcc <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e1e6      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x10c>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d063      	beq.n	80026ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e6:	4b4c      	ldr	r3, [pc, #304]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025f2:	4b49      	ldr	r3, [pc, #292]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b43      	ldr	r3, [pc, #268]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1ba      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	4939      	ldr	r1, [pc, #228]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e03a      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b36      	ldr	r3, [pc, #216]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fcc1 	bl	8000fcc <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800264e:	f7fe fcbd 	bl	8000fcc <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e19b      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	4b2d      	ldr	r3, [pc, #180]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4927      	ldr	r1, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]
 8002680:	e015      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002682:	4b26      	ldr	r3, [pc, #152]	; (800271c <HAL_RCC_OscConfig+0x270>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fca0 	bl	8000fcc <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002690:	f7fe fc9c 	bl	8000fcc <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e17a      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d03a      	beq.n	8002730 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d019      	beq.n	80026f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fc80 	bl	8000fcc <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fc7c 	bl	8000fcc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e15a      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f000 fac6 	bl	8002c80 <RCC_Delay>
 80026f4:	e01c      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <HAL_RCC_OscConfig+0x274>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe fc66 	bl	8000fcc <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002702:	e00f      	b.n	8002724 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe fc62 	bl	8000fcc <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d908      	bls.n	8002724 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e140      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	42420000 	.word	0x42420000
 8002720:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e9      	bne.n	8002704 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a6 	beq.w	800288a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b97      	ldr	r3, [pc, #604]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10d      	bne.n	800276a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a93      	ldr	r2, [pc, #588]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]
 800275a:	4b91      	ldr	r3, [pc, #580]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276a:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	2b00      	cmp	r3, #0
 8002774:	d118      	bne.n	80027a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002776:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a8a      	ldr	r2, [pc, #552]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800277c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002780:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002782:	f7fe fc23 	bl	8000fcc <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278a:	f7fe fc1f 	bl	8000fcc <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b64      	cmp	r3, #100	; 0x64
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e0fd      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279c:	4b81      	ldr	r3, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0f0      	beq.n	800278a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x312>
 80027b0:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027b2:	6a1b      	ldr	r3, [r3, #32]
 80027b4:	4a7a      	ldr	r2, [pc, #488]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6213      	str	r3, [r2, #32]
 80027bc:	e02d      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x334>
 80027c6:	4b76      	ldr	r3, [pc, #472]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a75      	ldr	r2, [pc, #468]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6213      	str	r3, [r2, #32]
 80027d2:	4b73      	ldr	r3, [pc, #460]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a72      	ldr	r2, [pc, #456]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	e01c      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d10c      	bne.n	8002802 <HAL_RCC_OscConfig+0x356>
 80027e8:	4b6d      	ldr	r3, [pc, #436]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	4a6c      	ldr	r2, [pc, #432]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027ee:	f043 0304 	orr.w	r3, r3, #4
 80027f2:	6213      	str	r3, [r2, #32]
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a69      	ldr	r2, [pc, #420]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e00b      	b.n	800281a <HAL_RCC_OscConfig+0x36e>
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a66      	ldr	r2, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002808:	f023 0301 	bic.w	r3, r3, #1
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	4b64      	ldr	r3, [pc, #400]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a63      	ldr	r2, [pc, #396]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002814:	f023 0304 	bic.w	r3, r3, #4
 8002818:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d015      	beq.n	800284e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7fe fbd3 	bl	8000fcc <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fbcf 	bl	8000fcc <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0ab      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCC_OscConfig+0x37e>
 800284c:	e014      	b.n	8002878 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284e:	f7fe fbbd 	bl	8000fcc <HAL_GetTick>
 8002852:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe fbb9 	bl	8000fcc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	; 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e095      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800286e:	6a1b      	ldr	r3, [r3, #32]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ee      	bne.n	8002856 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002878:	7dfb      	ldrb	r3, [r7, #23]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d105      	bne.n	800288a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	4a47      	ldr	r2, [pc, #284]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002884:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002888:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8081 	beq.w	8002996 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d061      	beq.n	8002964 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d146      	bne.n	8002936 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a8:	4b3f      	ldr	r3, [pc, #252]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7fe fb8d 	bl	8000fcc <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe fb89 	bl	8000fcc <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e067      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c8:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f0      	bne.n	80028b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028dc:	d108      	bne.n	80028f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	492d      	ldr	r1, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a19      	ldr	r1, [r3, #32]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	430b      	orrs	r3, r1
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fb5d 	bl	8000fcc <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fb59 	bl	8000fcc <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e037      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x46a>
 8002934:	e02f      	b.n	8002996 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fb46 	bl	8000fcc <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fb42 	bl	8000fcc <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e020      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x498>
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e013      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420060 	.word	0x42420060

080029ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0d0      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029c0:	4b6a      	ldr	r3, [pc, #424]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d910      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f023 0207 	bic.w	r2, r3, #7
 80029d6:	4965      	ldr	r1, [pc, #404]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	4313      	orrs	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a12:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d040      	beq.n	8002acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d115      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a6a:	4b41      	ldr	r3, [pc, #260]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d109      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e073      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a7a:	4b3d      	ldr	r3, [pc, #244]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e06b      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a8a:	4b39      	ldr	r3, [pc, #228]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 0203 	bic.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	4936      	ldr	r1, [pc, #216]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7fe fa96 	bl	8000fcc <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa4:	f7fe fa92 	bl	8000fcc <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e053      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 020c 	and.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1eb      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002acc:	4b27      	ldr	r3, [pc, #156]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d210      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 0207 	bic.w	r2, r3, #7
 8002ae2:	4922      	ldr	r1, [pc, #136]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4601      	mov	r1, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	4a0a      	ldr	r2, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c8>)
 8002b4c:	5cd3      	ldrb	r3, [r2, r3]
 8002b4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1cc>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1d0>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe f9f4 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40022000 	.word	0x40022000
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08002d48 	.word	0x08002d48
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000004 	.word	0x20000004

08002b80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	b490      	push	{r4, r7}
 8002b82:	b08a      	sub	sp, #40	; 0x28
 8002b84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b86:	4b2a      	ldr	r3, [pc, #168]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002b88:	1d3c      	adds	r4, r7, #4
 8002b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d002      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x46>
 8002bbe:	e02d      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bc2:	623b      	str	r3, [r7, #32]
      break;
 8002bc4:	e02d      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	0c9b      	lsrs	r3, r3, #18
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bd8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002be4:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c5b      	lsrs	r3, r3, #17
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002bf8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bfe:	fb02 f203 	mul.w	r2, r2, r3
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
 8002c0a:	e004      	b.n	8002c16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	; (8002c40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c10:	fb02 f303 	mul.w	r3, r2, r3
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	623b      	str	r3, [r7, #32]
      break;
 8002c1a:	e002      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c1c:	4b07      	ldr	r3, [pc, #28]	; (8002c3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c1e:	623b      	str	r3, [r7, #32]
      break;
 8002c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c22:	6a3b      	ldr	r3, [r7, #32]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3728      	adds	r7, #40	; 0x28
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bc90      	pop	{r4, r7}
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	08002d34 	.word	0x08002d34
 8002c34:	08002d44 	.word	0x08002d44
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	007a1200 	.word	0x007a1200
 8002c40:	003d0900 	.word	0x003d0900

08002c44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c48:	4b02      	ldr	r3, [pc, #8]	; (8002c54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	20000000 	.word	0x20000000

08002c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c5c:	f7ff fff2 	bl	8002c44 <HAL_RCC_GetHCLKFreq>
 8002c60:	4601      	mov	r1, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4a03      	ldr	r2, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	08002d58 	.word	0x08002d58

08002c80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <RCC_Delay+0x34>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	; (8002cb8 <RCC_Delay+0x38>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0a5b      	lsrs	r3, r3, #9
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	fb02 f303 	mul.w	r3, r2, r3
 8002c9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c9c:	bf00      	nop
  }
  while (Delay --);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e5a      	subs	r2, r3, #1
 8002ca2:	60fa      	str	r2, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f9      	bne.n	8002c9c <RCC_Delay+0x1c>
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	10624dd3 	.word	0x10624dd3

08002cbc <__libc_init_array>:
 8002cbc:	b570      	push	{r4, r5, r6, lr}
 8002cbe:	2500      	movs	r5, #0
 8002cc0:	4e0c      	ldr	r6, [pc, #48]	; (8002cf4 <__libc_init_array+0x38>)
 8002cc2:	4c0d      	ldr	r4, [pc, #52]	; (8002cf8 <__libc_init_array+0x3c>)
 8002cc4:	1ba4      	subs	r4, r4, r6
 8002cc6:	10a4      	asrs	r4, r4, #2
 8002cc8:	42a5      	cmp	r5, r4
 8002cca:	d109      	bne.n	8002ce0 <__libc_init_array+0x24>
 8002ccc:	f000 f822 	bl	8002d14 <_init>
 8002cd0:	2500      	movs	r5, #0
 8002cd2:	4e0a      	ldr	r6, [pc, #40]	; (8002cfc <__libc_init_array+0x40>)
 8002cd4:	4c0a      	ldr	r4, [pc, #40]	; (8002d00 <__libc_init_array+0x44>)
 8002cd6:	1ba4      	subs	r4, r4, r6
 8002cd8:	10a4      	asrs	r4, r4, #2
 8002cda:	42a5      	cmp	r5, r4
 8002cdc:	d105      	bne.n	8002cea <__libc_init_array+0x2e>
 8002cde:	bd70      	pop	{r4, r5, r6, pc}
 8002ce0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ce4:	4798      	blx	r3
 8002ce6:	3501      	adds	r5, #1
 8002ce8:	e7ee      	b.n	8002cc8 <__libc_init_array+0xc>
 8002cea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002cee:	4798      	blx	r3
 8002cf0:	3501      	adds	r5, #1
 8002cf2:	e7f2      	b.n	8002cda <__libc_init_array+0x1e>
 8002cf4:	08002d60 	.word	0x08002d60
 8002cf8:	08002d60 	.word	0x08002d60
 8002cfc:	08002d60 	.word	0x08002d60
 8002d00:	08002d64 	.word	0x08002d64

08002d04 <memset>:
 8002d04:	4603      	mov	r3, r0
 8002d06:	4402      	add	r2, r0
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <memset+0xa>
 8002d0c:	4770      	bx	lr
 8002d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d12:	e7f9      	b.n	8002d08 <memset+0x4>

08002d14 <_init>:
 8002d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d16:	bf00      	nop
 8002d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d1a:	bc08      	pop	{r3}
 8002d1c:	469e      	mov	lr, r3
 8002d1e:	4770      	bx	lr

08002d20 <_fini>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr
